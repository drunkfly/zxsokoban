# file opened: game.asm
  1   0000
  2   0000              					device 		zxspectrum48
  3   0000
  4   0000              stack_top:
  5   0000
  6   0000              					include		"irq.asm"
# file opened: irq.asm
  1+  0000
  2+  0000              					org			8000h
  3+  8000
  4+  8000              INTERRUPT = 81h
  5+  8000
  6+  8000              irq_vectors:		dup			257
  7+  8000 81          >					db			INTERRUPT
  7+  8001 81          >					db			INTERRUPT
  7+  8002 81          >					db			INTERRUPT
  7+  8003 81          >					db			INTERRUPT
  7+  8004 81          >					db			INTERRUPT
  7+  8005 81          >					db			INTERRUPT
  7+  8006 81          >					db			INTERRUPT
  7+  8007 81          >					db			INTERRUPT
  7+  8008 81          >					db			INTERRUPT
  7+  8009 81          >					db			INTERRUPT
  7+  800A 81          >					db			INTERRUPT
  7+  800B 81          >					db			INTERRUPT
  7+  800C 81          >					db			INTERRUPT
  7+  800D 81          >					db			INTERRUPT
  7+  800E 81          >					db			INTERRUPT
  7+  800F 81          >					db			INTERRUPT
  7+  8010 81          >					db			INTERRUPT
  7+  8011 81          >					db			INTERRUPT
  7+  8012 81          >					db			INTERRUPT
  7+  8013 81          >					db			INTERRUPT
  7+  8014 81          >					db			INTERRUPT
  7+  8015 81          >					db			INTERRUPT
  7+  8016 81          >					db			INTERRUPT
  7+  8017 81          >					db			INTERRUPT
  7+  8018 81          >					db			INTERRUPT
  7+  8019 81          >					db			INTERRUPT
  7+  801A 81          >					db			INTERRUPT
  7+  801B 81          >					db			INTERRUPT
  7+  801C 81          >					db			INTERRUPT
  7+  801D 81          >					db			INTERRUPT
  7+  801E 81          >					db			INTERRUPT
  7+  801F 81          >					db			INTERRUPT
  7+  8020 81          >					db			INTERRUPT
  7+  8021 81          >					db			INTERRUPT
  7+  8022 81          >					db			INTERRUPT
  7+  8023 81          >					db			INTERRUPT
  7+  8024 81          >					db			INTERRUPT
  7+  8025 81          >					db			INTERRUPT
  7+  8026 81          >					db			INTERRUPT
  7+  8027 81          >					db			INTERRUPT
  7+  8028 81          >					db			INTERRUPT
  7+  8029 81          >					db			INTERRUPT
  7+  802A 81          >					db			INTERRUPT
  7+  802B 81          >					db			INTERRUPT
  7+  802C 81          >					db			INTERRUPT
  7+  802D 81          >					db			INTERRUPT
  7+  802E 81          >					db			INTERRUPT
  7+  802F 81          >					db			INTERRUPT
  7+  8030 81          >					db			INTERRUPT
  7+  8031 81          >					db			INTERRUPT
  7+  8032 81          >					db			INTERRUPT
  7+  8033 81          >					db			INTERRUPT
  7+  8034 81          >					db			INTERRUPT
  7+  8035 81          >					db			INTERRUPT
  7+  8036 81          >					db			INTERRUPT
  7+  8037 81          >					db			INTERRUPT
  7+  8038 81          >					db			INTERRUPT
  7+  8039 81          >					db			INTERRUPT
  7+  803A 81          >					db			INTERRUPT
  7+  803B 81          >					db			INTERRUPT
  7+  803C 81          >					db			INTERRUPT
  7+  803D 81          >					db			INTERRUPT
  7+  803E 81          >					db			INTERRUPT
  7+  803F 81          >					db			INTERRUPT
  7+  8040 81          >					db			INTERRUPT
  7+  8041 81          >					db			INTERRUPT
  7+  8042 81          >					db			INTERRUPT
  7+  8043 81          >					db			INTERRUPT
  7+  8044 81          >					db			INTERRUPT
  7+  8045 81          >					db			INTERRUPT
  7+  8046 81          >					db			INTERRUPT
  7+  8047 81          >					db			INTERRUPT
  7+  8048 81          >					db			INTERRUPT
  7+  8049 81          >					db			INTERRUPT
  7+  804A 81          >					db			INTERRUPT
  7+  804B 81          >					db			INTERRUPT
  7+  804C 81          >					db			INTERRUPT
  7+  804D 81          >					db			INTERRUPT
  7+  804E 81          >					db			INTERRUPT
  7+  804F 81          >					db			INTERRUPT
  7+  8050 81          >					db			INTERRUPT
  7+  8051 81          >					db			INTERRUPT
  7+  8052 81          >					db			INTERRUPT
  7+  8053 81          >					db			INTERRUPT
  7+  8054 81          >					db			INTERRUPT
  7+  8055 81          >					db			INTERRUPT
  7+  8056 81          >					db			INTERRUPT
  7+  8057 81          >					db			INTERRUPT
  7+  8058 81          >					db			INTERRUPT
  7+  8059 81          >					db			INTERRUPT
  7+  805A 81          >					db			INTERRUPT
  7+  805B 81          >					db			INTERRUPT
  7+  805C 81          >					db			INTERRUPT
  7+  805D 81          >					db			INTERRUPT
  7+  805E 81          >					db			INTERRUPT
  7+  805F 81          >					db			INTERRUPT
  7+  8060 81          >					db			INTERRUPT
  7+  8061 81          >					db			INTERRUPT
  7+  8062 81          >					db			INTERRUPT
  7+  8063 81          >					db			INTERRUPT
  7+  8064 81          >					db			INTERRUPT
  7+  8065 81          >					db			INTERRUPT
  7+  8066 81          >					db			INTERRUPT
  7+  8067 81          >					db			INTERRUPT
  7+  8068 81          >					db			INTERRUPT
  7+  8069 81          >					db			INTERRUPT
  7+  806A 81          >					db			INTERRUPT
  7+  806B 81          >					db			INTERRUPT
  7+  806C 81          >					db			INTERRUPT
  7+  806D 81          >					db			INTERRUPT
  7+  806E 81          >					db			INTERRUPT
  7+  806F 81          >					db			INTERRUPT
  7+  8070 81          >					db			INTERRUPT
  7+  8071 81          >					db			INTERRUPT
  7+  8072 81          >					db			INTERRUPT
  7+  8073 81          >					db			INTERRUPT
  7+  8074 81          >					db			INTERRUPT
  7+  8075 81          >					db			INTERRUPT
  7+  8076 81          >					db			INTERRUPT
  7+  8077 81          >					db			INTERRUPT
  7+  8078 81          >					db			INTERRUPT
  7+  8079 81          >					db			INTERRUPT
  7+  807A 81          >					db			INTERRUPT
  7+  807B 81          >					db			INTERRUPT
  7+  807C 81          >					db			INTERRUPT
  7+  807D 81          >					db			INTERRUPT
  7+  807E 81          >					db			INTERRUPT
  7+  807F 81          >					db			INTERRUPT
  7+  8080 81          >					db			INTERRUPT
  7+  8081 81          >					db			INTERRUPT
  7+  8082 81          >					db			INTERRUPT
  7+  8083 81          >					db			INTERRUPT
  7+  8084 81          >					db			INTERRUPT
  7+  8085 81          >					db			INTERRUPT
  7+  8086 81          >					db			INTERRUPT
  7+  8087 81          >					db			INTERRUPT
  7+  8088 81          >					db			INTERRUPT
  7+  8089 81          >					db			INTERRUPT
  7+  808A 81          >					db			INTERRUPT
  7+  808B 81          >					db			INTERRUPT
  7+  808C 81          >					db			INTERRUPT
  7+  808D 81          >					db			INTERRUPT
  7+  808E 81          >					db			INTERRUPT
  7+  808F 81          >					db			INTERRUPT
  7+  8090 81          >					db			INTERRUPT
  7+  8091 81          >					db			INTERRUPT
  7+  8092 81          >					db			INTERRUPT
  7+  8093 81          >					db			INTERRUPT
  7+  8094 81          >					db			INTERRUPT
  7+  8095 81          >					db			INTERRUPT
  7+  8096 81          >					db			INTERRUPT
  7+  8097 81          >					db			INTERRUPT
  7+  8098 81          >					db			INTERRUPT
  7+  8099 81          >					db			INTERRUPT
  7+  809A 81          >					db			INTERRUPT
  7+  809B 81          >					db			INTERRUPT
  7+  809C 81          >					db			INTERRUPT
  7+  809D 81          >					db			INTERRUPT
  7+  809E 81          >					db			INTERRUPT
  7+  809F 81          >					db			INTERRUPT
  7+  80A0 81          >					db			INTERRUPT
  7+  80A1 81          >					db			INTERRUPT
  7+  80A2 81          >					db			INTERRUPT
  7+  80A3 81          >					db			INTERRUPT
  7+  80A4 81          >					db			INTERRUPT
  7+  80A5 81          >					db			INTERRUPT
  7+  80A6 81          >					db			INTERRUPT
  7+  80A7 81          >					db			INTERRUPT
  7+  80A8 81          >					db			INTERRUPT
  7+  80A9 81          >					db			INTERRUPT
  7+  80AA 81          >					db			INTERRUPT
  7+  80AB 81          >					db			INTERRUPT
  7+  80AC 81          >					db			INTERRUPT
  7+  80AD 81          >					db			INTERRUPT
  7+  80AE 81          >					db			INTERRUPT
  7+  80AF 81          >					db			INTERRUPT
  7+  80B0 81          >					db			INTERRUPT
  7+  80B1 81          >					db			INTERRUPT
  7+  80B2 81          >					db			INTERRUPT
  7+  80B3 81          >					db			INTERRUPT
  7+  80B4 81          >					db			INTERRUPT
  7+  80B5 81          >					db			INTERRUPT
  7+  80B6 81          >					db			INTERRUPT
  7+  80B7 81          >					db			INTERRUPT
  7+  80B8 81          >					db			INTERRUPT
  7+  80B9 81          >					db			INTERRUPT
  7+  80BA 81          >					db			INTERRUPT
  7+  80BB 81          >					db			INTERRUPT
  7+  80BC 81          >					db			INTERRUPT
  7+  80BD 81          >					db			INTERRUPT
  7+  80BE 81          >					db			INTERRUPT
  7+  80BF 81          >					db			INTERRUPT
  7+  80C0 81          >					db			INTERRUPT
  7+  80C1 81          >					db			INTERRUPT
  7+  80C2 81          >					db			INTERRUPT
  7+  80C3 81          >					db			INTERRUPT
  7+  80C4 81          >					db			INTERRUPT
  7+  80C5 81          >					db			INTERRUPT
  7+  80C6 81          >					db			INTERRUPT
  7+  80C7 81          >					db			INTERRUPT
  7+  80C8 81          >					db			INTERRUPT
  7+  80C9 81          >					db			INTERRUPT
  7+  80CA 81          >					db			INTERRUPT
  7+  80CB 81          >					db			INTERRUPT
  7+  80CC 81          >					db			INTERRUPT
  7+  80CD 81          >					db			INTERRUPT
  7+  80CE 81          >					db			INTERRUPT
  7+  80CF 81          >					db			INTERRUPT
  7+  80D0 81          >					db			INTERRUPT
  7+  80D1 81          >					db			INTERRUPT
  7+  80D2 81          >					db			INTERRUPT
  7+  80D3 81          >					db			INTERRUPT
  7+  80D4 81          >					db			INTERRUPT
  7+  80D5 81          >					db			INTERRUPT
  7+  80D6 81          >					db			INTERRUPT
  7+  80D7 81          >					db			INTERRUPT
  7+  80D8 81          >					db			INTERRUPT
  7+  80D9 81          >					db			INTERRUPT
  7+  80DA 81          >					db			INTERRUPT
  7+  80DB 81          >					db			INTERRUPT
  7+  80DC 81          >					db			INTERRUPT
  7+  80DD 81          >					db			INTERRUPT
  7+  80DE 81          >					db			INTERRUPT
  7+  80DF 81          >					db			INTERRUPT
  7+  80E0 81          >					db			INTERRUPT
  7+  80E1 81          >					db			INTERRUPT
  7+  80E2 81          >					db			INTERRUPT
  7+  80E3 81          >					db			INTERRUPT
  7+  80E4 81          >					db			INTERRUPT
  7+  80E5 81          >					db			INTERRUPT
  7+  80E6 81          >					db			INTERRUPT
  7+  80E7 81          >					db			INTERRUPT
  7+  80E8 81          >					db			INTERRUPT
  7+  80E9 81          >					db			INTERRUPT
  7+  80EA 81          >					db			INTERRUPT
  7+  80EB 81          >					db			INTERRUPT
  7+  80EC 81          >					db			INTERRUPT
  7+  80ED 81          >					db			INTERRUPT
  7+  80EE 81          >					db			INTERRUPT
  7+  80EF 81          >					db			INTERRUPT
  7+  80F0 81          >					db			INTERRUPT
  7+  80F1 81          >					db			INTERRUPT
  7+  80F2 81          >					db			INTERRUPT
  7+  80F3 81          >					db			INTERRUPT
  7+  80F4 81          >					db			INTERRUPT
  7+  80F5 81          >					db			INTERRUPT
  7+  80F6 81          >					db			INTERRUPT
  7+  80F7 81          >					db			INTERRUPT
  7+  80F8 81          >					db			INTERRUPT
  7+  80F9 81          >					db			INTERRUPT
  7+  80FA 81          >					db			INTERRUPT
  7+  80FB 81          >					db			INTERRUPT
  7+  80FC 81          >					db			INTERRUPT
  7+  80FD 81          >					db			INTERRUPT
  7+  80FE 81          >					db			INTERRUPT
  7+  80FF 81          >					db			INTERRUPT
  7+  8100 81          >					db			INTERRUPT
  8+  8101              					edup
  9+  8101
 10+  8101 00 00 00...  					ds			(INTERRUPT*256+INTERRUPT)-$
 11+  8181
 12+  8181              					org			(INTERRUPT*256+INTERRUPT)
 13+  8181
 14+  8181 F5           interrupt:			push		af
 15+  8182 C5           					push		bc
 16+  8183 D5           					push		de
 17+  8184 E5           					push		hl
 18+  8185 08           					ex			af, af'
 19+  8186 D9           					exx
 20+  8187 F5           					push		af
 21+  8188 C5           					push		bc
 22+  8189 D5           					push		de
 23+  818A E5           					push		hl
 24+  818B DD E5        					push		ix
 25+  818D FD E5        					push		iy
 26+  818F
 27+  818F 21 DE 81     					ld			hl, FramesPending
 28+  8192 34           					inc			(hl)
 29+  8193
 30+  8193              					; рисуем спрайты
 31+  8193
 32+  8193 DD 21 C9 86  					ld			ix, player1
 33+  8197 CD D2 86     					call		DrawPlayer
 34+  819A
 35+  819A              					; готово
 36+  819A
 37+  819A FD E1        					pop			iy
 38+  819C DD E1        					pop			ix
 39+  819E E1           					pop			hl
 40+  819F D1           					pop			de
 41+  81A0 C1           					pop			bc
 42+  81A1 F1           					pop			af
 43+  81A2 08           					ex			af, af'
 44+  81A3 D9           					exx
 45+  81A4 E1           					pop			hl
 46+  81A5 D1           					pop			de
 47+  81A6 C1           					pop			bc
 48+  81A7 F1           					pop			af
 49+  81A8 FB           					ei
 50+  81A9 C9           					ret
 51+  81AA
# file closed: irq.asm
  7   81AA
  8   81AA F3           start:				di
  9   81AB 31 00 00     					ld			sp, stack_top
 10   81AE 3E 80        					ld			a, 80h
 11   81B0 ED 47        					ld			i, a
 12   81B2 ED 5E        					im			2
 13   81B4 FB           					ei
 14   81B5
 15   81B5 3E 00        					ld			a, 00h
 16   81B7 CD DF 81     					call		ClearScreen
 17   81BA
 18   81BA CD 52 86     					call		InitLevel
 19   81BD CD 73 86     					call		DrawLevel
 20   81C0
 21   81C0 DD 21 C9 86  					ld			ix, player1
 22   81C4 CD CD 86     					call		InitPlayer
 23   81C7
 24   81C7 21 DE 81     .mainLoop:			ld			hl, FramesPending
 25   81CA AF           					xor			a
 26   81CB BE           					cp			(hl)
 27   81CC 28 0D        					jr			z, .halt
 28   81CE 35           					dec			(hl)
 29   81CF
 30   81CF CD 9D 83     					call		ReadInput
 31   81D2
 32   81D2 DD 21 C9 86  					ld			ix, player1
 33   81D6 CD 57 88     					call		HandlePlayer
 34   81D9
 35   81D9 18 EC        					jr			.mainLoop
 36   81DB
 37   81DB 76           .halt:				halt
 38   81DC 18 E9        					jr			.mainLoop
 39   81DE
 40   81DE 00           FramesPending:		db			0
 41   81DF
 42   81DF              					include		"draw.asm"
# file opened: draw.asm
  1+  81DF
  2+  81DF              				; Input:
  3+  81DF              				;   A = attribute
  4+  81DF
  5+  81DF              ClearScreen:	; очищаем пиксели
  6+  81DF 21 00 40     				ld		hl, 4000h
  7+  81E2 5D           				ld      e, l
  8+  81E3 54           				ld		d, h
  9+  81E4 36 00        				ld		(hl), 0
 10+  81E6 13           				inc		de
 11+  81E7 01 00 18     				ld		bc, 1800h
 12+  81EA ED B0        				ldir
 13+  81EC              				; очищаем атрибуты
 14+  81EC 77           				ld		(hl), a
 15+  81ED 01 FF 02     				ld		bc, 300h-1
 16+  81F0 ED B0        				ldir
 17+  81F2 C9           				ret
 18+  81F3
 19+  81F3                              ; Input:
 20+  81F3                              ;   C = X
 21+  81F3                              ;   B = Y (знакоместо)
 22+  81F3                              ;   IYH = старший байт адреса
 23+  81F3                              ; Output:
 24+  81F3                              ;   DE => screen addr
 25+  81F3
 26+  81F3              CalcScreenAddr: ; Преобразуем координату Y в пикселях в значение в знакоместах
 27+  81F3 78                           ld		a, b
 28+  81F4 17                           rla
 29+  81F5 17                           rla
 30+  81F6 17                           rla
 31+  81F7 E6 F8                        and		0xf8
 32+  81F9              ; альтернативная точка входа, A = Y (пиксели)
 33+  81F9              CalcScreenAddrPix:
 34+  81F9 47                           ld		b, a
 35+  81FA                              ; Расчитываем адрес на экране
 36+  81FA 17                           rla                                 ; A = ? |Y5|Y4|Y3| ?| ?| ?| ?
 37+  81FB 17                           rla                                 ; A = Y5|Y4|Y3| ?| ?| ?| ?| ?
 38+  81FC E6 E0                        and     0xe0            ; 1110 0000 ; A = Y5|Y4|Y3| 0| 0| 0| 0| 0
 39+  81FE B1                           or      c               ;             A = Y5|Y4|Y3|X4|X3|X2|X1|X0
 40+  81FF 5F                           ld      e, a
 41+  8200 78                           ld      a, b
 42+  8201 1F                           rra
 43+  8202 1F                           rra
 44+  8203 1F                           rra                                 ; A =  ?| ?| ?|Y7|Y6| ?| ?| ?
 45+  8204 E6 18                        and     0x18                        ; A =  0| 0| 0|Y7|Y6| 0| 0| 0
 46+  8206 57                           ld      d, a
 47+  8207 78                           ld      a, b
 48+  8208 E6 07                        and     0x07                        ; A =  0| 0| 0| 0| 0|Y2|Y1|Y0
 49+  820A B2                           or      d                           ; A =  0| 0| 0|Y7|Y6|Y2|Y1|Y0
 50+  820B FD B4                        or      iyh                         ; A =  0| 1| 0|Y7|Y6|Y2|Y1|Y0
 51+  820D 57                           ld      d, a
 52+  820E C9                           ret
 53+  820F
 54+  820F                              ; Input:
 55+  820F                              ;   C = X (знакоместо)
 56+  820F                              ;   B = Y (знакоместо)
 57+  820F                              ;   D = дополнительный сдвиг по Y (-7..7)
 58+  820F
 59+  820F              DrawEmptyByte:	; Расчитываем адрес назначения
 60+  820F FD 26 40                     ld		iyh, 0x40
 61+  8212 78                           ld		a, b
 62+  8213 87                           add		a, a		; *2
 63+  8214 87                           add		a, a		; *4
 64+  8215 87                           add		a, a		; *8
 65+  8216 82                           add		a, d
 66+  8217 CD F9 81         			call    CalcScreenAddrPix
 67+  821A                  			; Записываем нулевой байт
 68+  821A AF               			xor		a
 69+  821B 12               			ld		(de), a
 70+  821C C9               			ret
 71+  821D
 72+  821D              DRAW_REPLACE 	equ		0			; nop
 73+  821D              DRAW_OR			equ		0xB6		; or (hl)
 74+  821D
 75+  821D                              ; Input:
 76+  821D                              ;   A = mode (DRAW_OR или DRAW_REPLACE)
 77+  821D
 78+  821D 32 89 82     SetDrawCharMode:ld		(DrawChar.hotPatch1), a
 79+  8220 32 97 82     				ld		(DrawChar.hotPatch2), a
 80+  8223 32 A7 82     				ld		(DrawChar.hotPatch3), a
 81+  8226 32 B8 82     				ld		(DrawChar.hotPatch4), a
 82+  8229 32 CA 82     				ld		(DrawChar.hotPatch5), a
 83+  822C 32 DB 82     				ld		(DrawChar.hotPatch6), a
 84+  822F 32 EB 82     				ld		(DrawChar.hotPatch7), a
 85+  8232 32 F9 82     				ld		(DrawChar.hotPatch8), a
 86+  8235 32 04 83     				ld		(DrawChar.hotPatch9), a
 87+  8238 32 11 83     				ld		(DrawChar.hotPatch10), a
 88+  823B 32 20 83     				ld		(DrawChar.hotPatch11), a
 89+  823E 32 30 83     				ld		(DrawChar.hotPatch12), a
 90+  8241 32 41 83     				ld		(DrawChar.hotPatch13), a
 91+  8244 32 51 83     				ld		(DrawChar.hotPatch14), a
 92+  8247 32 60 83     				ld		(DrawChar.hotPatch15), a
 93+  824A 32 6E 83     				ld		(DrawChar.hotPatch16), a
 94+  824D C9           				ret
 95+  824E
 96+  824E                              ; Input:
 97+  824E                              ;	A = атрибут
 98+  824E                              ;   E = дополнительный сдвиг по X (-7..7)
 99+  824E                              ;   D = дополнительный сдвиг по Y (-7..7)
100+  824E                              ;   L = X спрайта (знакоместо)
101+  824E                              ;   H = Y спрайта (знакоместо)
102+  824E                              ;   C = X (знакоместо)
103+  824E                              ;   B = Y (знакоместо)
104+  824E
105+  824E              DrawChar:    	; Сохраняем А
106+  824E 08                           ex      af, af'
107+  824F                              ; Патчим код
108+  824F 7B                           ld		a, e
109+  8250 32 6E 82                     ld		(.hotPatch+2), a
110+  8253              				; Расчитываем адрес назначения
111+  8253 FD 26 40                     ld		iyh, 0x40
112+  8256 78                           ld		a, b
113+  8257 87                           add		a, a		; *2
114+  8258 87                           add		a, a		; *4
115+  8259 87                           add		a, a		; *8
116+  825A 82                           add		a, d
117+  825B CD F9 81         			call    CalcScreenAddrPix
118+  825E D5                           push	de
119+  825F                              ; Преобразуем координату Y спрайта в адрес в SCR
120+  825F 44                           ld		b, h
121+  8260 4D                           ld		c, l
122+  8261 EB                           ex		de, hl		; сохраню DE в HL
123+  8262                              ; Расчитываем адрес спрайта
124+  8262 FD 26 A0                     ld		iyh, high gfx
125+  8265 CD F3 81                     call	CalcScreenAddr
126+  8268
127+  8268 FD 21 7F 82  				ld		iy, .table
128+  826C FD 4E 00     .hotPatch:		ld		c, (iy+0)
129+  826F 06 00        				ld		b, 0
130+  8271 FD 09        				add		iy, bc
131+  8273 06 08                        ld      b, 8		; счетчик для цикла
132+  8275 FD E9        				jp		(iy)
133+  8277
134+  8277 09           				db		.empty-.table
135+  8278 14           				db		.shiftM7-.table
136+  8279 23           				db		.shiftM6-.table
137+  827A 33           				db		.shiftM5-.table
138+  827B 44           				db		.shiftM4-.table
139+  827C 56           				db		.shiftM3-.table
140+  827D 67           				db		.shiftM2-.table
141+  827E 77           				db		.shiftM1-.table
142+  827F 84           .table:			db		.noShift-.table
143+  8280 8F           				db		.shift1-.table
144+  8281 9C           				db		.shift2-.table
145+  8282 AB           				db		.shift3-.table
146+  8283 BB           				db		.shift4-.table
147+  8284 CC           				db		.shift5-.table
148+  8285 DC           				db		.shift6-.table
149+  8286 EB           				db		.shift7-.table
150+  8287 09           				db		.empty-.table
151+  8288
152+  8288 AF           .empty:       	xor		a
153+  8289 00           .hotPatch1:		nop
154+  828A 77           				ld      (hl), a
155+  828B CD 8E 83                     call	DownHL
156+  828E 10 F8                        djnz    .empty
157+  8290 C3 76 83                     jp		.charDone
158+  8293
159+  8293 1A           .shiftM7:       ld      a, (de)
160+  8294 0F           				rrca
161+  8295 E6 80        				and		0x80
162+  8297 00           .hotPatch2:		nop
163+  8298 77                           ld      (hl), a
164+  8299 14                           inc     d
165+  829A CD 8E 83                     call	DownHL
166+  829D 10 F4                        djnz    .shiftM7
167+  829F C3 76 83                     jp		.charDone
168+  82A2
169+  82A2 1A           .shiftM6:       ld      a, (de)
170+  82A3 0F           				rrca
171+  82A4 0F           				rrca
172+  82A5 E6 C0        				and		0xc0
173+  82A7 00           .hotPatch3:		nop
174+  82A8 77                           ld      (hl), a
175+  82A9 14                           inc     d
176+  82AA CD 8E 83                     call	DownHL
177+  82AD 10 F3                        djnz    .shiftM6
178+  82AF C3 76 83                     jp		.charDone
179+  82B2
180+  82B2 1A           .shiftM5:       ld      a, (de)
181+  82B3              				dup		3
182+  82B3 0F          >				rrca
182+  82B4 0F          >				rrca
182+  82B5 0F          >				rrca
183+  82B6              				edup
184+  82B6 E6 E0        				and		0xe0
185+  82B8 00           .hotPatch4:		nop
186+  82B9 77                           ld      (hl), a
187+  82BA 14                           inc     d
188+  82BB CD 8E 83                     call	DownHL
189+  82BE 10 F2                        djnz    .shiftM5
190+  82C0 C3 76 83                     jp		.charDone
191+  82C3
192+  82C3 1A           .shiftM4:       ld      a, (de)
193+  82C4              				dup		4
194+  82C4 07          >				rlca
194+  82C5 07          >				rlca
194+  82C6 07          >				rlca
194+  82C7 07          >				rlca
195+  82C8              				edup
196+  82C8 E6 F0        				and		0xf0
197+  82CA 00           .hotPatch5:		nop
198+  82CB 77                           ld      (hl), a
199+  82CC 14                           inc     d
200+  82CD CD 8E 83                     call	DownHL
201+  82D0 10 F1                        djnz    .shiftM4
202+  82D2 C3 76 83                     jp		.charDone
203+  82D5
204+  82D5 1A           .shiftM3:       ld      a, (de)
205+  82D6              				dup		3
206+  82D6 07          >				rlca
206+  82D7 07          >				rlca
206+  82D8 07          >				rlca
207+  82D9              				edup
208+  82D9 E6 F8        				and		0xf8
209+  82DB 00           .hotPatch6:		nop
210+  82DC 77                           ld      (hl), a
211+  82DD 14                           inc     d
212+  82DE CD 8E 83                     call	DownHL
213+  82E1 10 F2                        djnz    .shiftM3
214+  82E3 C3 76 83                     jp		.charDone
215+  82E6
216+  82E6 1A           .shiftM2:       ld      a, (de)
217+  82E7 07           				rlca
218+  82E8 07           				rlca
219+  82E9 E6 FC        				and		0xfc
220+  82EB 00           .hotPatch7:		nop
221+  82EC 77                           ld      (hl), a
222+  82ED 14                           inc     d
223+  82EE CD 8E 83                     call	DownHL
224+  82F1 10 F3                        djnz    .shiftM2
225+  82F3 C3 76 83                     jp		.charDone
226+  82F6
227+  82F6 1A           .shiftM1:       ld      a, (de)
228+  82F7 CB 27        				sla		a
229+  82F9 00           .hotPatch8:		nop
230+  82FA 77                           ld      (hl), a
231+  82FB 14                           inc     d
232+  82FC CD 8E 83                     call	DownHL
233+  82FF 10 F5                        djnz    .shiftM1
234+  8301 18 73                        jr		.charDone
235+  8303
236+  8303 1A           .noShift:       ld      a, (de)
237+  8304 00           .hotPatch9:		nop
238+  8305 77                           ld      (hl), a
239+  8306 14                           inc     d
240+  8307 CD 8E 83                     call	DownHL
241+  830A 10 F7                        djnz    .noShift
242+  830C 18 68                        jr		.charDone
243+  830E
244+  830E 1A           .shift1:       	ld      a, (de)
245+  830F CB 3F        				srl		a
246+  8311 00           .hotPatch10:	nop
247+  8312 77                           ld      (hl), a
248+  8313 14                           inc     d
249+  8314 CD 8E 83                     call	DownHL
250+  8317 10 F5                        djnz    .shift1
251+  8319 18 5B                        jr		.charDone
252+  831B
253+  831B 1A           .shift2:       	ld      a, (de)
254+  831C 0F           				rrca
255+  831D 0F           				rrca
256+  831E E6 3F        				and		0x3f
257+  8320 00           .hotPatch11:	nop
258+  8321 77                           ld      (hl), a
259+  8322 14                           inc     d
260+  8323 CD 8E 83                     call	DownHL
261+  8326 10 F3                        djnz    .shift2
262+  8328 18 4C                        jr		.charDone
263+  832A
264+  832A 1A           .shift3:       	ld      a, (de)
265+  832B              				dup		3
266+  832B 0F          >				rrca
266+  832C 0F          >				rrca
266+  832D 0F          >				rrca
267+  832E              				edup
268+  832E E6 1F        				and		0x1f
269+  8330 00           .hotPatch12:	nop
270+  8331 77                           ld      (hl), a
271+  8332 14                           inc     d
272+  8333 CD 8E 83                     call	DownHL
273+  8336 10 F2                        djnz    .shift3
274+  8338 18 3C                        jr		.charDone
275+  833A
276+  833A 1A           .shift4:       	ld      a, (de)
277+  833B              				dup		4
278+  833B 0F          >				rrca
278+  833C 0F          >				rrca
278+  833D 0F          >				rrca
278+  833E 0F          >				rrca
279+  833F              				edup
280+  833F E6 0F        				and		0x0f
281+  8341 00           .hotPatch13:	nop
282+  8342 77                           ld      (hl), a
283+  8343 14                           inc     d
284+  8344 CD 8E 83                     call	DownHL
285+  8347 10 F1                        djnz    .shift4
286+  8349 18 2B                        jr		.charDone
287+  834B
288+  834B 1A           .shift5:       	ld      a, (de)
289+  834C              				dup		3
290+  834C 07          >				rlca
290+  834D 07          >				rlca
290+  834E 07          >				rlca
291+  834F              				edup
292+  834F E6 07        				and		0x07
293+  8351 00           .hotPatch14:	nop
294+  8352 77                           ld      (hl), a
295+  8353 14                           inc     d
296+  8354 CD 8E 83                     call	DownHL
297+  8357 10 F2                        djnz    .shift5
298+  8359 18 1B                        jr		.charDone
299+  835B
300+  835B 1A           .shift6:       	ld      a, (de)
301+  835C              				dup		2
302+  835C 07          >				rlca
302+  835D 07          >				rlca
303+  835E              				edup
304+  835E E6 03        				and		0x03
305+  8360 00           .hotPatch15:	nop
306+  8361 77                           ld      (hl), a
307+  8362 14                           inc     d
308+  8363 CD 8E 83                     call	DownHL
309+  8366 10 F3                        djnz    .shift6
310+  8368 18 0C                        jr		.charDone
311+  836A
312+  836A 1A           .shift7:       	ld      a, (de)
313+  836B 07           				rlca
314+  836C E6 01        				and		0x01
315+  836E 00           .hotPatch16:	nop
316+  836F 77                           ld      (hl), a
317+  8370 14                           inc     d
318+  8371 CD 8E 83                     call	DownHL
319+  8374 10 F4                        djnz    .shift7
320+  8376                              ;jr		.charDone
321+  8376
322+  8376              .charDone: 		; Получаем из стека начальный адрес на экране
323+  8376 E1           				pop		hl
324+  8377 4C           				ld		c, h				; сохраняем старший байт в C для проверки внизу
325+  8378              				; Расчитываем адрес в области атрибутов
326+  8378 7C                           ld      a, h
327+  8379 1F                  			rra
328+  837A 1F                           rra
329+  837B 1F                           rra
330+  837C E6 03                        and     0x03
331+  837E F6 58                        or      0x58
332+  8380 67                           ld      h, a
333+  8381                              ; Восстанавливаем A
334+  8381 08                           ex      af, af'
335+  8382                              ; Записываем атрибут
336+  8382 77                           ld      (hl), a
337+  8383                              ; Сохраняем атрибут в B
338+  8383 47                           ld		b, a
339+  8384                              ; Проверяем, нужно ли рисовать второй атрибут
340+  8384 3E 07                        ld		a, 7
341+  8386 A1                           and		c
342+  8387 C8                           ret		z				; мы на границе знакоместа, второй атрибут не нужен
343+  8388              				; Переходим на следующую строку в атрибутах
344+  8388 11 20 00                     ld		de, 32
345+  838B 19                           add		hl, de
346+  838C              				; Записываем второй атрибут
347+  838C 70                           ld		(hl), b
348+  838D C9                           ret
349+  838E
350+  838E                              ; Input:
351+  838E                              ;	HL => адрес байта (8 пикселей) на экране
352+  838E                              ; Output:
353+  838E                              ;   HL => адрес байта (8 пикселей) в следующей строке (Y = Y + 1)
354+  838E
355+  838E 24           DownHL:			inc		h
356+  838F 3E 07        				ld		a, 00000111b	; 7=8-1;  остаток от деления на 8
357+  8391 A4           				and		h
358+  8392 C0           				ret		nz
359+  8393 7D           				ld		a, l			; L = L + 32
360+  8394 D6 E0        				sub		-32
361+  8396 6F           				ld		l, a
362+  8397 9F           				sbc		a, a			; 0 = no carry, -1 (0xff 11111111) = was carry
363+  8398 E6 F8        				and		-8				; 0 = no carry, -8 (0xf8 11111000) = was carry
364+  839A 84           				add		a, h
365+  839B 67           				ld		h, a
366+  839C C9           				ret
367+  839D
# file closed: draw.asm
 43   839D              					include		"input.asm"
# file opened: input.asm
  1+  839D
  2+  839D 01 FE FB     ReadInput:			ld			bc, 0xfbfe
  3+  83A0 ED 78        					in			a, (c)
  4+  83A2 E6 01        					and			1					; Q
  5+  83A4 32 CF 83     					ld			(Input.up), a
  6+  83A7
  7+  83A7 01 FE FD     					ld			bc, 0xfdfe
  8+  83AA ED 78        					in			a, (c)
  9+  83AC E6 01        					and			1					; A
 10+  83AE 32 D0 83     					ld			(Input.down), a
 11+  83B1
 12+  83B1 01 FE DF     					ld			bc, 0xdffe
 13+  83B4 ED 78        					in			a, (c)
 14+  83B6 47           					ld			b, a
 15+  83B7 E6 02        					and			2					; O
 16+  83B9 32 CD 83     					ld			(Input.left), a
 17+  83BC
 18+  83BC 78           					ld			a, b
 19+  83BD E6 01        					and			1					; P
 20+  83BF 32 CE 83     					ld			(Input.right), a
 21+  83C2
 22+  83C2 01 FE 7F     					ld			bc, 0x7ffe
 23+  83C5 ED 78        					in			a, (c)
 24+  83C7 E6 01        					and			1					; Space
 25+  83C9 32 D1 83     					ld			(Input.fire), a
 26+  83CC
 27+  83CC C9           					ret
 28+  83CD
 29+  83CD              Input:
 30+  83CD 01           .left:				db			1
 31+  83CE 01           .right:				db			1
 32+  83CF 01           .up:				db			1
 33+  83D0 01           .down:				db			1
 34+  83D1 01           .fire:				db			1
 35+  83D2
# file closed: input.asm
 44   83D2              					include		"level.asm"
# file opened: level.asm
  1+  83D2
  2+  83D2              LEVEL_WIDTH 		equ		 	32
  3+  83D2              LEVEL_HEIGHT 		equ 		20
  4+  83D2
  5+  83D2              FLOOR_ATTR 			equ 		01001111b
  6+  83D2              SPHERE_ATTR 		equ 		01001110b
  7+  83D2              WALL_ATTR  			equ 		00001101b
  8+  83D2
  9+  83D2              					; пробел - пустое место
 10+  83D2              					; X - стена
 11+  83D2              					; 1 - точка старта
 12+  83D2
 13+  83D2 58 58 58 58  Level:				db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 13+  83D6 58 58 58 58
 13+  83DA 58 58 58 58
 13+  83DE 58 58 58 58
 13+  83E2 58 58 58 58
 13+  83E6 58 58 58 58
 13+  83EA 58 58 58 58
 13+  83EE 58 58 58 58
 14+  83F2 58 20 20 20  					db			"X                              X"
 14+  83F6 20 20 20 20
 14+  83FA 20 20 20 20
 14+  83FE 20 20 20 20
 14+  8402 20 20 20 20
 14+  8406 20 20 20 20
 14+  840A 20 20 20 20
 14+  840E 20 20 20 58
 15+  8412 58 20 20 20  					db			"X                              X"
 15+  8416 20 20 20 20
 15+  841A 20 20 20 20
 15+  841E 20 20 20 20
 15+  8422 20 20 20 20
 15+  8426 20 20 20 20
 15+  842A 20 20 20 20
 15+  842E 20 20 20 58
 16+  8432 58 20 20 20  					db			"X                      O       X"
 16+  8436 20 20 20 20
 16+  843A 20 20 20 20
 16+  843E 20 20 20 20
 16+  8442 20 20 20 20
 16+  8446 20 20 20 4F
 16+  844A 20 20 20 20
 16+  844E 20 20 20 58
 17+  8452 58 20 20 20  					db			"X   O                          X"
 17+  8456 4F 20 20 20
 17+  845A 20 20 20 20
 17+  845E 20 20 20 20
 17+  8462 20 20 20 20
 17+  8466 20 20 20 20
 17+  846A 20 20 20 20
 17+  846E 20 20 20 58
 18+  8472 58 20 20 20  					db			"X                              X"
 18+  8476 20 20 20 20
 18+  847A 20 20 20 20
 18+  847E 20 20 20 20
 18+  8482 20 20 20 20
 18+  8486 20 20 20 20
 18+  848A 20 20 20 20
 18+  848E 20 20 20 58
 19+  8492 58 20 20 20  					db			"X        1                     X"
 19+  8496 20 20 20 20
 19+  849A 20 31 20 20
 19+  849E 20 20 20 20
 19+  84A2 20 20 20 20
 19+  84A6 20 20 20 20
 19+  84AA 20 20 20 20
 19+  84AE 20 20 20 58
 20+  84B2 58 20 20 20  					db			"X                              X"
 20+  84B6 20 20 20 20
 20+  84BA 20 20 20 20
 20+  84BE 20 20 20 20
 20+  84C2 20 20 20 20
 20+  84C6 20 20 20 20
 20+  84CA 20 20 20 20
 20+  84CE 20 20 20 58
 21+  84D2 58 20 20 20  					db			"X           O                  X"
 21+  84D6 20 20 20 20
 21+  84DA 20 20 20 20
 21+  84DE 4F 20 20 20
 21+  84E2 20 20 20 20
 21+  84E6 20 20 20 20
 21+  84EA 20 20 20 20
 21+  84EE 20 20 20 58
 22+  84F2 58 20 20 20  					db			"X                        O     X"
 22+  84F6 20 20 20 20
 22+  84FA 20 20 20 20
 22+  84FE 20 20 20 20
 22+  8502 20 20 20 20
 22+  8506 20 20 20 20
 22+  850A 20 4F 20 20
 22+  850E 20 20 20 58
 23+  8512 58 20 20 20  					db			"X              O               X"
 23+  8516 20 20 20 20
 23+  851A 20 20 20 20
 23+  851E 20 20 20 4F
 23+  8522 20 20 20 20
 23+  8526 20 20 20 20
 23+  852A 20 20 20 20
 23+  852E 20 20 20 58
 24+  8532 58 20 20 20  					db			"X                              X"
 24+  8536 20 20 20 20
 24+  853A 20 20 20 20
 24+  853E 20 20 20 20
 24+  8542 20 20 20 20
 24+  8546 20 20 20 20
 24+  854A 20 20 20 20
 24+  854E 20 20 20 58
 25+  8552 58 20 20 20  					db			"X                              X"
 25+  8556 20 20 20 20
 25+  855A 20 20 20 20
 25+  855E 20 20 20 20
 25+  8562 20 20 20 20
 25+  8566 20 20 20 20
 25+  856A 20 20 20 20
 25+  856E 20 20 20 58
 26+  8572 58 20 58 58  					db			"X XXX XXX X X XXX XXX  X  XX X X"
 26+  8576 58 20 58 58
 26+  857A 58 20 58 20
 26+  857E 58 20 58 58
 26+  8582 58 20 58 58
 26+  8586 58 20 20 58
 26+  858A 20 20 58 58
 26+  858E 20 58 20 58
 27+  8592 58 20 58 20  					db			"X X   X X X X X X X X X X XX X X"
 27+  8596 20 20 58 20
 27+  859A 58 20 58 20
 27+  859E 58 20 58 20
 27+  85A2 58 20 58 20
 27+  85A6 58 20 58 20
 27+  85AA 58 20 58 58
 27+  85AE 20 58 20 58
 28+  85B2 58 20 58 58  					db			"X XXX X X XX  X X XX  XXX X XX X"
 28+  85B6 58 20 58 20
 28+  85BA 58 20 58 58
 28+  85BE 20 20 58 20
 28+  85C2 58 20 58 58
 28+  85C6 20 20 58 58
 28+  85CA 58 20 58 20
 28+  85CE 58 58 20 58
 29+  85D2 58 20 20 20  					db			"X   X X X X X X X X X X X X XX X"
 29+  85D6 58 20 58 20
 29+  85DA 58 20 58 20
 29+  85DE 58 20 58 20
 29+  85E2 58 20 58 20
 29+  85E6 58 20 58 20
 29+  85EA 58 20 58 20
 29+  85EE 58 58 20 58
 30+  85F2 58 20 58 58  					db			"X XXX XXX X X XXX XXX X X X  X X"
 30+  85F6 58 20 58 58
 30+  85FA 58 20 58 20
 30+  85FE 58 20 58 58
 30+  8602 58 20 58 58
 30+  8606 58 20 58 20
 30+  860A 58 20 58 20
 30+  860E 20 58 20 58
 31+  8612 58 20 20 20  					db			"X                              X"
 31+  8616 20 20 20 20
 31+  861A 20 20 20 20
 31+  861E 20 20 20 20
 31+  8622 20 20 20 20
 31+  8626 20 20 20 20
 31+  862A 20 20 20 20
 31+  862E 20 20 20 58
 32+  8632 58 58 58 58  					db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 32+  8636 58 58 58 58
 32+  863A 58 58 58 58
 32+  863E 58 58 58 58
 32+  8642 58 58 58 58
 32+  8646 58 58 58 58
 32+  864A 58 58 58 58
 32+  864E 58 58 58 58
 33+  8652              LevelEnd:
 34+  8652
 35+  8652 21 52 86     InitLevel:			ld			hl, LevelEnd
 36+  8655 0E 14        					ld			c, LEVEL_HEIGHT
 37+  8657 06 20        .rowLoop:			ld			b, LEVEL_WIDTH
 38+  8659 2B           .colLoop:			dec			hl
 39+  865A 7E           					ld			a, (hl)
 40+  865B FE 31        					cp			a, '1'
 41+  865D CC 66 86     					call		z, .handlePlayerStart
 42+  8660 10 F7        					djnz		.colLoop
 43+  8662 0D           					dec			c
 44+  8663 20 F2        					jr			nz, .rowLoop
 45+  8665 C9           					ret
 46+  8666 36 20        .handlePlayerStart:	ld			(hl), ' '
 47+  8668 78           					ld			a, b
 48+  8669 3D           					dec			a
 49+  866A 32 C9 86     					ld			(player1.x), a
 50+  866D 79           					ld			a, c
 51+  866E 3D           					dec			a
 52+  866F 32 CA 86     					ld			(player1.y), a
 53+  8672 C9           					ret
 54+  8673
 55+  8673 21 52 86     DrawLevel:			ld			hl, LevelEnd
 56+  8676 06 14        					ld			b, LEVEL_HEIGHT
 57+  8678 0E 20        .rowLoop:			ld			c, LEVEL_WIDTH
 58+  867A 2B           .colLoop:			dec			hl
 59+  867B 7E           					ld			a, (hl)
 60+  867C FE 20        					cp			a, ' '
 61+  867E CC 91 86     					call		z, .drawFloor
 62+  8681 FE 58        					cp			a, 'X'
 63+  8683 CC 9F 86     					call		z, .drawWall
 64+  8686 FE 4F        					cp			a, 'O'
 65+  8688 CC 98 86     					call		z, .drawSphere
 66+  868B 0D           					dec			c
 67+  868C 20 EC        					jr			nz, .colLoop
 68+  868E 10 E8        					djnz		.rowLoop
 69+  8690 C9           					ret
 70+  8691 3E 4F        .drawFloor:			ld			a, FLOOR_ATTR
 71+  8693 11 01 02     					ld			de, 0x201
 72+  8696 18 0C        					jr			.drawChar
 73+  8698 3E 4E        .drawSphere:		ld			a, SPHERE_ATTR
 74+  869A 11 00 01     					ld			de, 0x100
 75+  869D 18 05        					jr			.drawChar
 76+  869F 3E 0D        .drawWall:			ld			a, WALL_ATTR
 77+  86A1 11 00 02     					ld			de, 0x200
 78+  86A4              					;jr			.drawChar
 79+  86A4 C5           .drawChar:			push		bc
 80+  86A5 E5           					push		hl
 81+  86A6 05           					dec			b
 82+  86A7 0D           					dec			c
 83+  86A8 21 00 00     					ld			hl, 0
 84+  86AB EB           					ex			de, hl
 85+  86AC CD 4E 82     					call		DrawChar
 86+  86AF E1           					pop			hl
 87+  86B0 C1           					pop			bc
 88+  86B1 C9           					ret
 89+  86B2
 90+  86B2              					; Input:
 91+  86B2              	                ;   C = X (знакоместо)
 92+  86B2                  	            ;   B = Y (знакоместо)
 93+  86B2                  	            ; Output:
 94+  86B2                  	            ;	A = предмет на карте
 95+  86B2                  	            ;   ZF=0 если ходить нельзя, ZF=1 если ходить можно
 96+  86B2
 97+  86B2 CD B9 86     CheckBlocked:		call		GetLevelAddr
 98+  86B5 7E           					ld			a, (hl)
 99+  86B6 FE 20        					cp			a, ' '
100+  86B8 C9           					ret
101+  86B9
102+  86B9              					; Input:
103+  86B9              	                ;   C = X (знакоместо)
104+  86B9                  	            ;   B = Y (знакоместо)
105+  86B9                  	            ; Output:
106+  86B9                  	            ;	HL => адрес внутри Level
107+  86B9
108+  86B9              GetLevelAddr:		; HL = B * 32 + C; 32 = LEVEL_WIDTH
109+  86B9 68           					ld			l, b
110+  86BA 26 00        					ld			h, 0
111+  86BC 59           					ld			e, c
112+  86BD 54           					ld			d, h
113+  86BE 29           					add			hl, hl			; *2
114+  86BF 29           					add			hl, hl			; *4
115+  86C0 29           					add			hl, hl			; *8
116+  86C1 29           					add			hl, hl			; *16
117+  86C2 29           					add			hl, hl			; *32
118+  86C3 19           					add			hl, de
119+  86C4 11 D2 83     					ld			de, Level
120+  86C7 19           					add			hl, de
121+  86C8 C9           					ret
122+  86C9
# file closed: level.asm
 45   86C9              					include		"player.asm"
# file opened: player.asm
  1+  86C9
  2+  86C9              PLAYER_IDLE			equ			0
  3+  86C9              PLAYER_GO_LEFT		equ			3
  4+  86C9              PLAYER_GO_RIGHT		equ			6
  5+  86C9              PLAYER_GO_UP		equ			9
  6+  86C9              PLAYER_GO_DOWN		equ			12
  7+  86C9              PLAYER_SHIFT_LEFT	equ			15
  8+  86C9              PLAYER_SHIFT_RIGHT	equ			18
  9+  86C9              PLAYER_SHIFT_UP		equ			21
 10+  86C9              PLAYER_SHIFT_DOWN	equ			24
 11+  86C9
 12+  86C9              ;PLAYER_MAX_X		equ 		31
 13+  86C9              ;PLAYER_MAX_Y		equ			23
 14+  86C9
 15+  86C9              PLAYER_MOVE_DELAY_BITS equ		1
 16+  86C9
 17+  86C9              PLAYER_ATTR			equ			FLOOR_ATTR
 18+  86C9
 19+  86C9              					struct 		SPLAYER
 20+  86C9 ~            x 					byte
 21+  86C9 ~            y 					byte
 22+  86C9 ~            state				byte
 23+  86C9 ~            time				byte
 24+  86C9              					ends
 25+  86C9
 26+  86C9 05 02 00 00  player1:			SPLAYER		5,2,PLAYER_IDLE,0
 27+  86CD
 28+  86CD DD 36 02 00  InitPlayer:			ld			(ix+SPLAYER.state), PLAYER_IDLE
 29+  86D1 C9           					ret
 30+  86D2
 31+  86D2 DD 4E 00     DrawPlayer:			ld			c, (ix+SPLAYER.x)
 32+  86D5 DD 46 01     					ld			b, (ix+SPLAYER.y)
 33+  86D8
 34+  86D8 DD 6E 02     					ld			l, (ix+SPLAYER.state)
 35+  86DB 26 00        					ld			h, 0
 36+  86DD 11 E2 86     					ld			de, .jumpTable
 37+  86E0 19           					add			hl, de
 38+  86E1 E9           					jp			(hl)
 39+  86E2 C3 FD 86     .jumpTable:			jp			.drawIdle
 40+  86E5 C3 D1 87     					jp			.drawLeft
 41+  86E8 C3 F8 87     					jp			.drawRight
 42+  86EB C3 34 88     					jp			.drawUp
 43+  86EE C3 1E 88     					jp			.drawDown
 44+  86F1 C3 07 87     					jp			.drawShiftLeft
 45+  86F4 C3 5A 87     					jp			.drawShiftRight
 46+  86F7 C3 B1 87     					jp			.drawShiftUp
 47+  86FA C3 C1 87     					jp			.drawShiftDown
 48+  86FD
 49+  86FD 21 00 00     .drawIdle:			ld			hl, 0x0000
 50+  8700 54           					ld			d, h
 51+  8701 5C           					ld			e, h
 52+  8702 3E 4F        					ld			a, PLAYER_ATTR
 53+  8704 C3 4E 82     					jp			DrawChar
 54+  8707
 55+  8707 DD 7E 03     .drawShiftLeft:		ld			a, (ix+SPLAYER.time)
 56+  870A              					dup			PLAYER_MOVE_DELAY_BITS
 57+  870A 0F          >					rrca
 58+  870B              					edup
 59+  870B E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
 60+  870D 3C           					inc			a
 61+  870E ED 44        					neg
 62+  8710 5F           					ld			e, a
 63+  8711
 64+  8711 E6 03        					and			3
 65+  8713 26 01        					ld			h, 0x01
 66+  8715 6F           					ld			l, a
 67+  8716 16 00        					ld			d, 0
 68+  8718
 69+  8718 F5           					push		af
 70+  8719
 71+  8719 C5           					push		bc
 72+  871A D5           					push		de
 73+  871B E5           					push		hl
 74+  871C 3E 4E        					ld			a, SPHERE_ATTR
 75+  871E CD 4E 82     					call		DrawChar
 76+  8721 E1           					pop			hl
 77+  8722 D1           					pop			de
 78+  8723 C1           					pop			bc
 79+  8724
 80+  8724 C5           					push		bc
 81+  8725 D5           					push		de
 82+  8726 0D           					dec			c
 83+  8727 3E 08        					ld			a, 8
 84+  8729 83           					add			a, e
 85+  872A 5F           					ld			e, a
 86+  872B 3E 4E        					ld			a, SPHERE_ATTR
 87+  872D CD 4E 82     					call		DrawChar
 88+  8730 D1           					pop			de
 89+  8731 C1           					pop			bc
 90+  8732
 91+  8732 F1           					pop			af
 92+  8733
 93+  8733 0F           					rrca
 94+  8734 E6 01        					and			1
 95+  8736 3C           					inc			a
 96+  8737 6F           					ld			l, a
 97+  8738 26 00        					ld			h, 0
 98+  873A 54           					ld			d, h
 99+  873B
100+  873B E5           					push		hl
101+  873C D5           					push		de
102+  873D C5           					push		bc
103+  873E 3E 4F        					ld			a, PLAYER_ATTR
104+  8740 0C           					inc			c
105+  8741 CD 4E 82     					call		DrawChar
106+  8744 C1           					pop			bc
107+  8745 D1           					pop			de
108+  8746 E1           					pop			hl
109+  8747
110+  8747 3E B6        					ld			a, DRAW_OR
111+  8749 CD 1D 82     					call		SetDrawCharMode
112+  874C
113+  874C 3E 08        					ld			a, 8
114+  874E 83           					add			a, e
115+  874F 5F           					ld			e, a
116+  8750 3E 4F        					ld			a, PLAYER_ATTR
117+  8752 CD 4E 82     					call		DrawChar
118+  8755
119+  8755 3E 00        					ld			a, DRAW_REPLACE
120+  8757 C3 1D 82     					jp			SetDrawCharMode
121+  875A
122+  875A              .drawShiftRight:	;push		bc
123+  875A              					;inc			c
124+  875A              					;ld			hl, 0x0100
125+  875A              					;ld			de, 0
126+  875A              					;ld			a, SPHERE_ATTR
127+  875A              					;call		DrawChar
128+  875A              					;pop			bc
129+  875A
130+  875A DD 7E 03     					ld			a, (ix+SPLAYER.time)
131+  875D              					dup			PLAYER_MOVE_DELAY_BITS
132+  875D 0F          >					rrca
133+  875E              					edup
134+  875E E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
135+  8760 3C           					inc			a
136+  8761 5F           					ld			e, a
137+  8762
138+  8762 E6 03        					and			3
139+  8764 26 01        					ld			h, 0x01
140+  8766 6F           					ld			l, a
141+  8767 16 00        					ld			d, 0
142+  8769
143+  8769 F5           					push		af
144+  876A
145+  876A C5           					push		bc
146+  876B D5           					push		de
147+  876C E5           					push		hl
148+  876D 3E 4E        					ld			a, SPHERE_ATTR
149+  876F CD 4E 82     					call		DrawChar
150+  8772 E1           					pop			hl
151+  8773 D1           					pop			de
152+  8774 C1           					pop			bc
153+  8775
154+  8775 C5           					push		bc
155+  8776 D5           					push		de
156+  8777 0C           					inc			c
157+  8778 7B           					ld			a, e
158+  8779 D6 08        					sub			8
159+  877B 5F           					ld			e, a
160+  877C 3E 4E        					ld			a, SPHERE_ATTR
161+  877E CD 4E 82     					call		DrawChar
162+  8781 D1           					pop			de
163+  8782 C1           					pop			bc
164+  8783
165+  8783 F1           					pop			af
166+  8784
167+  8784 0F           					rrca
168+  8785 E6 01        					and			1
169+  8787 C6 03        					add			a, 3
170+  8789 6F           					ld			l, a
171+  878A 26 00        					ld			h, 0
172+  878C 54           					ld			d, h
173+  878D
174+  878D 3E 00        					ld			a, DRAW_REPLACE
175+  878F CD 1D 82     					call		SetDrawCharMode
176+  8792
177+  8792 E5           					push		hl
178+  8793 D5           					push		de
179+  8794 C5           					push		bc
180+  8795 3E 4F        					ld			a, PLAYER_ATTR
181+  8797 0D           					dec			c
182+  8798 CD 4E 82     					call		DrawChar
183+  879B C1           					pop			bc
184+  879C D1           					pop			de
185+  879D E1           					pop			hl
186+  879E
187+  879E 3E B6        					ld			a, DRAW_OR
188+  87A0 CD 1D 82     					call		SetDrawCharMode
189+  87A3
190+  87A3 7B           					ld			a, e
191+  87A4 D6 08        					sub			8
192+  87A6 5F           					ld			e, a
193+  87A7 3E 4F        					ld			a, PLAYER_ATTR
194+  87A9 CD 4E 82     					call		DrawChar
195+  87AC
196+  87AC 3E 00        					ld			a, DRAW_REPLACE
197+  87AE C3 1D 82     					jp			SetDrawCharMode
198+  87B1
199+  87B1 C5           .drawShiftUp:		push		bc
200+  87B2 05           					dec			b
201+  87B3 21 00 01     					ld			hl, 0x0100
202+  87B6 11 00 00     					ld			de, 0
203+  87B9 3E 4E        					ld			a, SPHERE_ATTR
204+  87BB CD 4E 82     					call		DrawChar
205+  87BE C1           					pop			bc
206+  87BF 18 73        					jr			.drawUp
207+  87C1
208+  87C1 C5           .drawShiftDown:		push		bc
209+  87C2 04           					inc			b
210+  87C3 21 00 01     					ld			hl, 0x0100
211+  87C6 11 00 00     					ld			de, 0
212+  87C9 3E 4E        					ld			a, SPHERE_ATTR
213+  87CB CD 4E 82     					call		DrawChar
214+  87CE C1           					pop			bc
215+  87CF 18 4D        					jr			.drawDown
216+  87D1
217+  87D1 DD 7E 03     .drawLeft:			ld			a, (ix+SPLAYER.time)
218+  87D4              					dup			PLAYER_MOVE_DELAY_BITS
219+  87D4 0F          >					rrca
220+  87D5              					edup
221+  87D5 E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
222+  87D7 3C           					inc			a
223+  87D8 ED 44        					neg
224+  87DA 5F           					ld			e, a
225+  87DB 0F           					rrca
226+  87DC E6 01        					and			1
227+  87DE 3C           					inc			a
228+  87DF 6F           					ld			l, a
229+  87E0 26 00        					ld			h, 0
230+  87E2 54           					ld			d, h
231+  87E3
232+  87E3 E5           					push		hl
233+  87E4 D5           					push		de
234+  87E5 C5           					push		bc
235+  87E6 3E 4F        					ld			a, PLAYER_ATTR
236+  87E8 0C           					inc			c
237+  87E9 CD 4E 82     					call		DrawChar
238+  87EC C1           					pop			bc
239+  87ED D1           					pop			de
240+  87EE E1           					pop			hl
241+  87EF
242+  87EF 3E 08        					ld			a, 8
243+  87F1 83           					add			a, e
244+  87F2 5F           					ld			e, a
245+  87F3 3E 4F        					ld			a, PLAYER_ATTR
246+  87F5 C3 4E 82     					jp			DrawChar
247+  87F8
248+  87F8 DD 7E 03     .drawRight:			ld			a, (ix+SPLAYER.time)
249+  87FB              					dup			PLAYER_MOVE_DELAY_BITS
250+  87FB 0F          >					rrca
251+  87FC              					edup
252+  87FC E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
253+  87FE 3C           					inc			a
254+  87FF 5F           					ld			e, a
255+  8800 0F           					rrca
256+  8801 E6 01        					and			1
257+  8803 C6 03        					add			a, 3
258+  8805 6F           					ld			l, a
259+  8806 26 00        					ld			h, 0
260+  8808 54           					ld			d, h
261+  8809
262+  8809 E5           					push		hl
263+  880A D5           					push		de
264+  880B C5           					push		bc
265+  880C 3E 4F        					ld			a, PLAYER_ATTR
266+  880E 0D           					dec			c
267+  880F CD 4E 82     					call		DrawChar
268+  8812 C1           					pop			bc
269+  8813 D1           					pop			de
270+  8814 E1           					pop			hl
271+  8815
272+  8815 7B           					ld			a, e
273+  8816 D6 08        					sub			8
274+  8818 5F           					ld			e, a
275+  8819 3E 4F        					ld			a, PLAYER_ATTR
276+  881B C3 4E 82     					jp			DrawChar
277+  881E
278+  881E DD 7E 03     .drawDown:			ld			a, (ix+SPLAYER.time)
279+  8821              					dup			PLAYER_MOVE_DELAY_BITS
280+  8821 0F          >					rrca
281+  8822              					edup
282+  8822 E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
283+  8824 3C           					inc			a
284+  8825 57           					ld			d, a
285+  8826 E6 03        					and			3
286+  8828 C6 05        					add			a, 5
287+  882A 6F           					ld			l, a
288+  882B 26 00        					ld			h, 0
289+  882D 5C           					ld			e, h
290+  882E
291+  882E 3E 4F        					ld			a, PLAYER_ATTR
292+  8830 05           					dec			b
293+  8831 C3 4E 82     					jp			DrawChar
294+  8834
295+  8834 DD 7E 03     .drawUp:			ld			a, (ix+SPLAYER.time)
296+  8837              					dup			PLAYER_MOVE_DELAY_BITS
297+  8837 0F          >					rrca
298+  8838              					edup
299+  8838 E6 7F        					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
300+  883A 3C           					inc			a
301+  883B ED 44        					neg
302+  883D 57           					ld			d, a
303+  883E E6 03        					and			3
304+  8840 C6 05        					add			a, 5
305+  8842 6F           					ld			l, a
306+  8843 26 00        					ld			h, 0
307+  8845 5C           					ld			e, h
308+  8846
309+  8846 3E 4F        					ld			a, PLAYER_ATTR
310+  8848 04           					inc			b
311+  8849 D5           					push		de
312+  884A C5           					push		bc
313+  884B CD 4E 82     					call		DrawChar
314+  884E C1           					pop			bc
315+  884F D1           					pop			de
316+  8850
317+  8850 3E 08        					ld			a, 8
318+  8852 82           					add			a, d
319+  8853 57           					ld			d, a
320+  8854 C3 0F 82     					jp			DrawEmptyByte
321+  8857
322+  8857              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
323+  8857
324+  8857              					macro 		PLAYERGO state, shift
325+  8857 ~
326+  8857 ~            					ld			c, (ix+SPLAYER.x)
327+  8857 ~            					ld			b, (ix+SPLAYER.y)
328+  8857 ~            				if state == PLAYER_GO_UP
329+  8857 ~            					dec			b
330+  8857 ~            				elseif state == PLAYER_GO_DOWN
331+  8857 ~            					inc			b
332+  8857 ~            				elseif state == PLAYER_GO_LEFT
333+  8857 ~            					dec			c
334+  8857 ~            				elseif state == PLAYER_GO_RIGHT
335+  8857 ~            					inc			c
336+  8857 ~            				endif
337+  8857 ~            					call		CheckBlocked
338+  8857 ~            					jr			nz, .tryShift
339+  8857 ~            					ld			a, state
340+  8857 ~            .doGo:			if state == PLAYER_GO_DOWN || state == PLAYER_GO_UP
341+  8857 ~            					ld			(ix+SPLAYER.y), b
342+  8857 ~            				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
343+  8857 ~            					ld			(ix+SPLAYER.x), c
344+  8857 ~            				endif
345+  8857 ~            					ld			(ix+SPLAYER.state), a
346+  8857 ~            					ld			(ix+SPLAYER.time), 0
347+  8857 ~            					ret
348+  8857 ~            .tryShift:			cp			'O'
349+  8857 ~            					ret			nz
350+  8857 ~            				if state == PLAYER_GO_UP
351+  8857 ~            					dec			b
352+  8857 ~            				elseif state == PLAYER_GO_DOWN
353+  8857 ~            					inc			b
354+  8857 ~            				elseif state == PLAYER_GO_LEFT
355+  8857 ~            					dec			c
356+  8857 ~            				elseif state == PLAYER_GO_RIGHT
357+  8857 ~            					inc			c
358+  8857 ~            				endif
359+  8857 ~            					call		CheckBlocked
360+  8857 ~            					ret			nz
361+  8857 ~            					ld			(hl), 'O'
362+  8857 ~            				if state == PLAYER_GO_UP
363+  8857 ~            					inc			b
364+  8857 ~            					ld			de, 32
365+  8857 ~            					add			hl, de
366+  8857 ~            				elseif state == PLAYER_GO_DOWN
367+  8857 ~            					dec			b
368+  8857 ~            					ld			de, -32
369+  8857 ~            					add			hl, de
370+  8857 ~            				elseif state == PLAYER_GO_LEFT
371+  8857 ~            					inc			c
372+  8857 ~            					inc			hl
373+  8857 ~            				elseif state == PLAYER_GO_RIGHT
374+  8857 ~            					dec			c
375+  8857 ~            					dec			hl
376+  8857 ~            				endif
377+  8857 ~            					ld			(hl), ' '
378+  8857 ~            					ld			a, shift
379+  8857 ~            					jr			.doGo
380+  8857 ~
381+  8857              					endm
382+  8857
383+  8857 DD 6E 02     HandlePlayer:		ld			l, (ix+SPLAYER.state)
384+  885A 26 00        					ld			h, 0
385+  885C 01 61 88     					ld			bc, .jumpTable
386+  885F 09           					add			hl, bc
387+  8860 E9           					jp			(hl)
388+  8861 C3 90 88     .jumpTable:			jp			.idle
389+  8864 C3 7C 88     					jp			.move
390+  8867 C3 7C 88     					jp			.move
391+  886A C3 7C 88     					jp			.move
392+  886D C3 7C 88     					jp			.move
393+  8870 C3 7C 88     					jp			.move
394+  8873 C3 7C 88     					jp			.move
395+  8876 C3 7C 88     					jp			.move
396+  8879 C3 7C 88     					jp			.move
397+  887C
398+  887C DD 7E 03     .move:				ld			a, (ix+SPLAYER.time)
399+  887F 3C           					inc			a
400+  8880 FE 10        					cp			(8<<PLAYER_MOVE_DELAY_BITS)
401+  8882 28 04        					jr			z, .moveDone
402+  8884 DD 77 03     					ld			(ix+SPLAYER.time), a
403+  8887 C9           					ret
404+  8888 DD 36 02 00  .moveDone:			ld			(ix+SPLAYER.state), PLAYER_IDLE
405+  888C DD 36 03 00  					ld			(ix+SPLAYER.time), 0
406+  8890              					;jr			.idle
407+  8890
408+  8890 21 CD 83     .idle:				ld			hl, Input.left
409+  8893 AF           					xor			a
410+  8894 BE           					cp			(hl)
411+  8895 28 0E        					jr			z, .goLeft
412+  8897
413+  8897 23           					inc			hl
414+  8898 BE           					cp			(hl)
415+  8899 28 35        					jr			z, .goRight
416+  889B
417+  889B 23           					inc			hl
418+  889C BE           					cp			(hl)
419+  889D 28 5C        					jr			z, .goUp
420+  889F
421+  889F 23           					inc			hl
422+  88A0 BE           					cp			(hl)
423+  88A1 CA 29 89     					jp			z, .goDown
424+  88A4
425+  88A4 C9           					ret
426+  88A5
427+  88A5              .goLeft:			PLAYERGO	PLAYER_GO_LEFT, PLAYER_SHIFT_LEFT
427+  88A5             >
427+  88A5 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
427+  88A8 DD 46 01    >					ld			b, (ix+SPLAYER.y)
427+  88AB             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
427+  88AB ~           >					dec			b
427+  88AB             >				elseif state == PLAYER_GO_DOWN
427+  88AB ~           >					inc			b
427+  88AB             >				elseif state == PLAYER_GO_LEFT
427+  88AB 0D          >					dec			c
427+  88AC             >				elseif state == PLAYER_GO_RIGHT
427+  88AC ~           >					inc			c
427+  88AC             >				endif
427+  88AC CD B2 86    >					call		CheckBlocked
427+  88AF 20 0D       >					jr			nz, .tryShift
427+  88B1 3E 03       >					ld			a, PLAYER_GO_LEFT
427+  88B3             >.doGo:			if PLAYER_GO_LEFT == PLAYER_GO_DOWN || PLAYER_GO_LEFT == PLAYER_GO_UP
427+  88B3 ~           >					ld			(ix+SPLAYER.y), b
427+  88B3             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
427+  88B3 DD 71 00    >					ld			(ix+SPLAYER.x), c
427+  88B6             >				endif
427+  88B6 DD 77 02    >					ld			(ix+SPLAYER.state), a
427+  88B9 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
427+  88BD C9          >					ret
427+  88BE FE 4F       >.tryShift:			cp			'O'
427+  88C0 C0          >					ret			nz
427+  88C1             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
427+  88C1 ~           >					dec			b
427+  88C1             >				elseif state == PLAYER_GO_DOWN
427+  88C1 ~           >					inc			b
427+  88C1             >				elseif state == PLAYER_GO_LEFT
427+  88C1 0D          >					dec			c
427+  88C2             >				elseif state == PLAYER_GO_RIGHT
427+  88C2 ~           >					inc			c
427+  88C2             >				endif
427+  88C2 CD B2 86    >					call		CheckBlocked
427+  88C5 C0          >					ret			nz
427+  88C6 36 4F       >					ld			(hl), 'O'
427+  88C8             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
427+  88C8 ~           >					inc			b
427+  88C8 ~           >					ld			de, 32
427+  88C8 ~           >					add			hl, de
427+  88C8             >				elseif state == PLAYER_GO_DOWN
427+  88C8 ~           >					dec			b
427+  88C8 ~           >					ld			de, -32
427+  88C8 ~           >					add			hl, de
427+  88C8             >				elseif state == PLAYER_GO_LEFT
427+  88C8 0C          >					inc			c
427+  88C9 23          >					inc			hl
427+  88CA             >				elseif state == PLAYER_GO_RIGHT
427+  88CA ~           >					dec			c
427+  88CA ~           >					dec			hl
427+  88CA             >				endif
427+  88CA 36 20       >					ld			(hl), ' '
427+  88CC 3E 0F       >					ld			a, PLAYER_SHIFT_LEFT
427+  88CE 18 E3       >					jr			.doGo
427+  88D0             >
428+  88D0              .goRight:			PLAYERGO	PLAYER_GO_RIGHT, PLAYER_SHIFT_RIGHT
428+  88D0             >
428+  88D0 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
428+  88D3 DD 46 01    >					ld			b, (ix+SPLAYER.y)
428+  88D6             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
428+  88D6 ~           >					dec			b
428+  88D6             >				elseif state == PLAYER_GO_DOWN
428+  88D6 ~           >					inc			b
428+  88D6             >				elseif state == PLAYER_GO_LEFT
428+  88D6 ~           >					dec			c
428+  88D6             >				elseif state == PLAYER_GO_RIGHT
428+  88D6 0C          >					inc			c
428+  88D7             >				endif
428+  88D7 CD B2 86    >					call		CheckBlocked
428+  88DA 20 0D       >					jr			nz, .tryShift
428+  88DC 3E 06       >					ld			a, PLAYER_GO_RIGHT
428+  88DE             >.doGo:			if PLAYER_GO_RIGHT == PLAYER_GO_DOWN || PLAYER_GO_RIGHT == PLAYER_GO_UP
428+  88DE ~           >					ld			(ix+SPLAYER.y), b
428+  88DE             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
428+  88DE DD 71 00    >					ld			(ix+SPLAYER.x), c
428+  88E1             >				endif
428+  88E1 DD 77 02    >					ld			(ix+SPLAYER.state), a
428+  88E4 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
428+  88E8 C9          >					ret
428+  88E9 FE 4F       >.tryShift:			cp			'O'
428+  88EB C0          >					ret			nz
428+  88EC             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
428+  88EC ~           >					dec			b
428+  88EC             >				elseif state == PLAYER_GO_DOWN
428+  88EC ~           >					inc			b
428+  88EC             >				elseif state == PLAYER_GO_LEFT
428+  88EC ~           >					dec			c
428+  88EC             >				elseif state == PLAYER_GO_RIGHT
428+  88EC 0C          >					inc			c
428+  88ED             >				endif
428+  88ED CD B2 86    >					call		CheckBlocked
428+  88F0 C0          >					ret			nz
428+  88F1 36 4F       >					ld			(hl), 'O'
428+  88F3             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
428+  88F3 ~           >					inc			b
428+  88F3 ~           >					ld			de, 32
428+  88F3 ~           >					add			hl, de
428+  88F3             >				elseif state == PLAYER_GO_DOWN
428+  88F3 ~           >					dec			b
428+  88F3 ~           >					ld			de, -32
428+  88F3 ~           >					add			hl, de
428+  88F3             >				elseif state == PLAYER_GO_LEFT
428+  88F3 ~           >					inc			c
428+  88F3 ~           >					inc			hl
428+  88F3             >				elseif state == PLAYER_GO_RIGHT
428+  88F3 0D          >					dec			c
428+  88F4 2B          >					dec			hl
428+  88F5             >				endif
428+  88F5 36 20       >					ld			(hl), ' '
428+  88F7 3E 12       >					ld			a, PLAYER_SHIFT_RIGHT
428+  88F9 18 E3       >					jr			.doGo
428+  88FB             >
429+  88FB              .goUp:				PLAYERGO	PLAYER_GO_UP, PLAYER_SHIFT_UP
429+  88FB             >
429+  88FB DD 4E 00    >					ld			c, (ix+SPLAYER.x)
429+  88FE DD 46 01    >					ld			b, (ix+SPLAYER.y)
429+  8901             >				if PLAYER_GO_UP == PLAYER_GO_UP
429+  8901 05          >					dec			b
429+  8902             >				elseif state == PLAYER_GO_DOWN
429+  8902 ~           >					inc			b
429+  8902             >				elseif state == PLAYER_GO_LEFT
429+  8902 ~           >					dec			c
429+  8902             >				elseif state == PLAYER_GO_RIGHT
429+  8902 ~           >					inc			c
429+  8902             >				endif
429+  8902 CD B2 86    >					call		CheckBlocked
429+  8905 20 0D       >					jr			nz, .tryShift
429+  8907 3E 09       >					ld			a, PLAYER_GO_UP
429+  8909             >.doGo:			if PLAYER_GO_UP == PLAYER_GO_DOWN || PLAYER_GO_UP == PLAYER_GO_UP
429+  8909 DD 70 01    >					ld			(ix+SPLAYER.y), b
429+  890C             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
429+  890C ~           >					ld			(ix+SPLAYER.x), c
429+  890C             >				endif
429+  890C DD 77 02    >					ld			(ix+SPLAYER.state), a
429+  890F DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
429+  8913 C9          >					ret
429+  8914 FE 4F       >.tryShift:			cp			'O'
429+  8916 C0          >					ret			nz
429+  8917             >				if PLAYER_GO_UP == PLAYER_GO_UP
429+  8917 05          >					dec			b
429+  8918             >				elseif state == PLAYER_GO_DOWN
429+  8918 ~           >					inc			b
429+  8918             >				elseif state == PLAYER_GO_LEFT
429+  8918 ~           >					dec			c
429+  8918             >				elseif state == PLAYER_GO_RIGHT
429+  8918 ~           >					inc			c
429+  8918             >				endif
429+  8918 CD B2 86    >					call		CheckBlocked
429+  891B C0          >					ret			nz
429+  891C 36 4F       >					ld			(hl), 'O'
429+  891E             >				if PLAYER_GO_UP == PLAYER_GO_UP
429+  891E 04          >					inc			b
429+  891F 11 20 00    >					ld			de, 32
429+  8922 19          >					add			hl, de
429+  8923             >				elseif state == PLAYER_GO_DOWN
429+  8923 ~           >					dec			b
429+  8923 ~           >					ld			de, -32
429+  8923 ~           >					add			hl, de
429+  8923             >				elseif state == PLAYER_GO_LEFT
429+  8923 ~           >					inc			c
429+  8923 ~           >					inc			hl
429+  8923             >				elseif state == PLAYER_GO_RIGHT
429+  8923 ~           >					dec			c
429+  8923 ~           >					dec			hl
429+  8923             >				endif
429+  8923 36 20       >					ld			(hl), ' '
429+  8925 3E 15       >					ld			a, PLAYER_SHIFT_UP
429+  8927 18 E0       >					jr			.doGo
429+  8929             >
430+  8929              .goDown:			PLAYERGO	PLAYER_GO_DOWN, PLAYER_SHIFT_DOWN
430+  8929             >
430+  8929 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
430+  892C DD 46 01    >					ld			b, (ix+SPLAYER.y)
430+  892F             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
430+  892F ~           >					dec			b
430+  892F             >				elseif state == PLAYER_GO_DOWN
430+  892F 04          >					inc			b
430+  8930             >				elseif state == PLAYER_GO_LEFT
430+  8930 ~           >					dec			c
430+  8930             >				elseif state == PLAYER_GO_RIGHT
430+  8930 ~           >					inc			c
430+  8930             >				endif
430+  8930 CD B2 86    >					call		CheckBlocked
430+  8933 20 0D       >					jr			nz, .tryShift
430+  8935 3E 0C       >					ld			a, PLAYER_GO_DOWN
430+  8937             >.doGo:			if PLAYER_GO_DOWN == PLAYER_GO_DOWN || PLAYER_GO_DOWN == PLAYER_GO_UP
430+  8937 DD 70 01    >					ld			(ix+SPLAYER.y), b
430+  893A             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
430+  893A ~           >					ld			(ix+SPLAYER.x), c
430+  893A             >				endif
430+  893A DD 77 02    >					ld			(ix+SPLAYER.state), a
430+  893D DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
430+  8941 C9          >					ret
430+  8942 FE 4F       >.tryShift:			cp			'O'
430+  8944 C0          >					ret			nz
430+  8945             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
430+  8945 ~           >					dec			b
430+  8945             >				elseif state == PLAYER_GO_DOWN
430+  8945 04          >					inc			b
430+  8946             >				elseif state == PLAYER_GO_LEFT
430+  8946 ~           >					dec			c
430+  8946             >				elseif state == PLAYER_GO_RIGHT
430+  8946 ~           >					inc			c
430+  8946             >				endif
430+  8946 CD B2 86    >					call		CheckBlocked
430+  8949 C0          >					ret			nz
430+  894A 36 4F       >					ld			(hl), 'O'
430+  894C             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
430+  894C ~           >					inc			b
430+  894C ~           >					ld			de, 32
430+  894C ~           >					add			hl, de
430+  894C             >				elseif state == PLAYER_GO_DOWN
430+  894C 05          >					dec			b
430+  894D 11 E0 FF    >					ld			de, -32
430+  8950 19          >					add			hl, de
430+  8951             >				elseif state == PLAYER_GO_LEFT
430+  8951 ~           >					inc			c
430+  8951 ~           >					inc			hl
430+  8951             >				elseif state == PLAYER_GO_RIGHT
430+  8951 ~           >					dec			c
430+  8951 ~           >					dec			hl
430+  8951             >				endif
430+  8951 36 20       >					ld			(hl), ' '
430+  8953 3E 18       >					ld			a, PLAYER_SHIFT_DOWN
430+  8955 18 E0       >					jr			.doGo
430+  8957             >
431+  8957
# file closed: player.asm
 46   8957
 47   8957 00 00 00...  					ds			0xa000-$
 48   A000              					org			0xa000
 49   A000
 50   A000              gfx:				incbin		"gfx/gfx.scr"
 51   BB00
 52   BB00              					savesna 	"game.sna", start
 53   BB00              					SLDOPT 		COMMENT WPMEM, LOGPOINT, ASSERTION
 54   BB00
# file closed: game.asm
