# file opened: game.asm
  1   0000
  2   0000              					device 		zxspectrum48
  3   0000
  4   0000              stack_top:
  5   0000
  6   0000              					include		"irq.asm"
# file opened: irq.asm
  1+  0000
  2+  0000              					org			8000h
  3+  8000
  4+  8000              INTERRUPT = 81h
  5+  8000
  6+  8000              irq_vectors:		dup			257
  7+  8000 81          >					db			INTERRUPT
  7+  8001 81          >					db			INTERRUPT
  7+  8002 81          >					db			INTERRUPT
  7+  8003 81          >					db			INTERRUPT
  7+  8004 81          >					db			INTERRUPT
  7+  8005 81          >					db			INTERRUPT
  7+  8006 81          >					db			INTERRUPT
  7+  8007 81          >					db			INTERRUPT
  7+  8008 81          >					db			INTERRUPT
  7+  8009 81          >					db			INTERRUPT
  7+  800A 81          >					db			INTERRUPT
  7+  800B 81          >					db			INTERRUPT
  7+  800C 81          >					db			INTERRUPT
  7+  800D 81          >					db			INTERRUPT
  7+  800E 81          >					db			INTERRUPT
  7+  800F 81          >					db			INTERRUPT
  7+  8010 81          >					db			INTERRUPT
  7+  8011 81          >					db			INTERRUPT
  7+  8012 81          >					db			INTERRUPT
  7+  8013 81          >					db			INTERRUPT
  7+  8014 81          >					db			INTERRUPT
  7+  8015 81          >					db			INTERRUPT
  7+  8016 81          >					db			INTERRUPT
  7+  8017 81          >					db			INTERRUPT
  7+  8018 81          >					db			INTERRUPT
  7+  8019 81          >					db			INTERRUPT
  7+  801A 81          >					db			INTERRUPT
  7+  801B 81          >					db			INTERRUPT
  7+  801C 81          >					db			INTERRUPT
  7+  801D 81          >					db			INTERRUPT
  7+  801E 81          >					db			INTERRUPT
  7+  801F 81          >					db			INTERRUPT
  7+  8020 81          >					db			INTERRUPT
  7+  8021 81          >					db			INTERRUPT
  7+  8022 81          >					db			INTERRUPT
  7+  8023 81          >					db			INTERRUPT
  7+  8024 81          >					db			INTERRUPT
  7+  8025 81          >					db			INTERRUPT
  7+  8026 81          >					db			INTERRUPT
  7+  8027 81          >					db			INTERRUPT
  7+  8028 81          >					db			INTERRUPT
  7+  8029 81          >					db			INTERRUPT
  7+  802A 81          >					db			INTERRUPT
  7+  802B 81          >					db			INTERRUPT
  7+  802C 81          >					db			INTERRUPT
  7+  802D 81          >					db			INTERRUPT
  7+  802E 81          >					db			INTERRUPT
  7+  802F 81          >					db			INTERRUPT
  7+  8030 81          >					db			INTERRUPT
  7+  8031 81          >					db			INTERRUPT
  7+  8032 81          >					db			INTERRUPT
  7+  8033 81          >					db			INTERRUPT
  7+  8034 81          >					db			INTERRUPT
  7+  8035 81          >					db			INTERRUPT
  7+  8036 81          >					db			INTERRUPT
  7+  8037 81          >					db			INTERRUPT
  7+  8038 81          >					db			INTERRUPT
  7+  8039 81          >					db			INTERRUPT
  7+  803A 81          >					db			INTERRUPT
  7+  803B 81          >					db			INTERRUPT
  7+  803C 81          >					db			INTERRUPT
  7+  803D 81          >					db			INTERRUPT
  7+  803E 81          >					db			INTERRUPT
  7+  803F 81          >					db			INTERRUPT
  7+  8040 81          >					db			INTERRUPT
  7+  8041 81          >					db			INTERRUPT
  7+  8042 81          >					db			INTERRUPT
  7+  8043 81          >					db			INTERRUPT
  7+  8044 81          >					db			INTERRUPT
  7+  8045 81          >					db			INTERRUPT
  7+  8046 81          >					db			INTERRUPT
  7+  8047 81          >					db			INTERRUPT
  7+  8048 81          >					db			INTERRUPT
  7+  8049 81          >					db			INTERRUPT
  7+  804A 81          >					db			INTERRUPT
  7+  804B 81          >					db			INTERRUPT
  7+  804C 81          >					db			INTERRUPT
  7+  804D 81          >					db			INTERRUPT
  7+  804E 81          >					db			INTERRUPT
  7+  804F 81          >					db			INTERRUPT
  7+  8050 81          >					db			INTERRUPT
  7+  8051 81          >					db			INTERRUPT
  7+  8052 81          >					db			INTERRUPT
  7+  8053 81          >					db			INTERRUPT
  7+  8054 81          >					db			INTERRUPT
  7+  8055 81          >					db			INTERRUPT
  7+  8056 81          >					db			INTERRUPT
  7+  8057 81          >					db			INTERRUPT
  7+  8058 81          >					db			INTERRUPT
  7+  8059 81          >					db			INTERRUPT
  7+  805A 81          >					db			INTERRUPT
  7+  805B 81          >					db			INTERRUPT
  7+  805C 81          >					db			INTERRUPT
  7+  805D 81          >					db			INTERRUPT
  7+  805E 81          >					db			INTERRUPT
  7+  805F 81          >					db			INTERRUPT
  7+  8060 81          >					db			INTERRUPT
  7+  8061 81          >					db			INTERRUPT
  7+  8062 81          >					db			INTERRUPT
  7+  8063 81          >					db			INTERRUPT
  7+  8064 81          >					db			INTERRUPT
  7+  8065 81          >					db			INTERRUPT
  7+  8066 81          >					db			INTERRUPT
  7+  8067 81          >					db			INTERRUPT
  7+  8068 81          >					db			INTERRUPT
  7+  8069 81          >					db			INTERRUPT
  7+  806A 81          >					db			INTERRUPT
  7+  806B 81          >					db			INTERRUPT
  7+  806C 81          >					db			INTERRUPT
  7+  806D 81          >					db			INTERRUPT
  7+  806E 81          >					db			INTERRUPT
  7+  806F 81          >					db			INTERRUPT
  7+  8070 81          >					db			INTERRUPT
  7+  8071 81          >					db			INTERRUPT
  7+  8072 81          >					db			INTERRUPT
  7+  8073 81          >					db			INTERRUPT
  7+  8074 81          >					db			INTERRUPT
  7+  8075 81          >					db			INTERRUPT
  7+  8076 81          >					db			INTERRUPT
  7+  8077 81          >					db			INTERRUPT
  7+  8078 81          >					db			INTERRUPT
  7+  8079 81          >					db			INTERRUPT
  7+  807A 81          >					db			INTERRUPT
  7+  807B 81          >					db			INTERRUPT
  7+  807C 81          >					db			INTERRUPT
  7+  807D 81          >					db			INTERRUPT
  7+  807E 81          >					db			INTERRUPT
  7+  807F 81          >					db			INTERRUPT
  7+  8080 81          >					db			INTERRUPT
  7+  8081 81          >					db			INTERRUPT
  7+  8082 81          >					db			INTERRUPT
  7+  8083 81          >					db			INTERRUPT
  7+  8084 81          >					db			INTERRUPT
  7+  8085 81          >					db			INTERRUPT
  7+  8086 81          >					db			INTERRUPT
  7+  8087 81          >					db			INTERRUPT
  7+  8088 81          >					db			INTERRUPT
  7+  8089 81          >					db			INTERRUPT
  7+  808A 81          >					db			INTERRUPT
  7+  808B 81          >					db			INTERRUPT
  7+  808C 81          >					db			INTERRUPT
  7+  808D 81          >					db			INTERRUPT
  7+  808E 81          >					db			INTERRUPT
  7+  808F 81          >					db			INTERRUPT
  7+  8090 81          >					db			INTERRUPT
  7+  8091 81          >					db			INTERRUPT
  7+  8092 81          >					db			INTERRUPT
  7+  8093 81          >					db			INTERRUPT
  7+  8094 81          >					db			INTERRUPT
  7+  8095 81          >					db			INTERRUPT
  7+  8096 81          >					db			INTERRUPT
  7+  8097 81          >					db			INTERRUPT
  7+  8098 81          >					db			INTERRUPT
  7+  8099 81          >					db			INTERRUPT
  7+  809A 81          >					db			INTERRUPT
  7+  809B 81          >					db			INTERRUPT
  7+  809C 81          >					db			INTERRUPT
  7+  809D 81          >					db			INTERRUPT
  7+  809E 81          >					db			INTERRUPT
  7+  809F 81          >					db			INTERRUPT
  7+  80A0 81          >					db			INTERRUPT
  7+  80A1 81          >					db			INTERRUPT
  7+  80A2 81          >					db			INTERRUPT
  7+  80A3 81          >					db			INTERRUPT
  7+  80A4 81          >					db			INTERRUPT
  7+  80A5 81          >					db			INTERRUPT
  7+  80A6 81          >					db			INTERRUPT
  7+  80A7 81          >					db			INTERRUPT
  7+  80A8 81          >					db			INTERRUPT
  7+  80A9 81          >					db			INTERRUPT
  7+  80AA 81          >					db			INTERRUPT
  7+  80AB 81          >					db			INTERRUPT
  7+  80AC 81          >					db			INTERRUPT
  7+  80AD 81          >					db			INTERRUPT
  7+  80AE 81          >					db			INTERRUPT
  7+  80AF 81          >					db			INTERRUPT
  7+  80B0 81          >					db			INTERRUPT
  7+  80B1 81          >					db			INTERRUPT
  7+  80B2 81          >					db			INTERRUPT
  7+  80B3 81          >					db			INTERRUPT
  7+  80B4 81          >					db			INTERRUPT
  7+  80B5 81          >					db			INTERRUPT
  7+  80B6 81          >					db			INTERRUPT
  7+  80B7 81          >					db			INTERRUPT
  7+  80B8 81          >					db			INTERRUPT
  7+  80B9 81          >					db			INTERRUPT
  7+  80BA 81          >					db			INTERRUPT
  7+  80BB 81          >					db			INTERRUPT
  7+  80BC 81          >					db			INTERRUPT
  7+  80BD 81          >					db			INTERRUPT
  7+  80BE 81          >					db			INTERRUPT
  7+  80BF 81          >					db			INTERRUPT
  7+  80C0 81          >					db			INTERRUPT
  7+  80C1 81          >					db			INTERRUPT
  7+  80C2 81          >					db			INTERRUPT
  7+  80C3 81          >					db			INTERRUPT
  7+  80C4 81          >					db			INTERRUPT
  7+  80C5 81          >					db			INTERRUPT
  7+  80C6 81          >					db			INTERRUPT
  7+  80C7 81          >					db			INTERRUPT
  7+  80C8 81          >					db			INTERRUPT
  7+  80C9 81          >					db			INTERRUPT
  7+  80CA 81          >					db			INTERRUPT
  7+  80CB 81          >					db			INTERRUPT
  7+  80CC 81          >					db			INTERRUPT
  7+  80CD 81          >					db			INTERRUPT
  7+  80CE 81          >					db			INTERRUPT
  7+  80CF 81          >					db			INTERRUPT
  7+  80D0 81          >					db			INTERRUPT
  7+  80D1 81          >					db			INTERRUPT
  7+  80D2 81          >					db			INTERRUPT
  7+  80D3 81          >					db			INTERRUPT
  7+  80D4 81          >					db			INTERRUPT
  7+  80D5 81          >					db			INTERRUPT
  7+  80D6 81          >					db			INTERRUPT
  7+  80D7 81          >					db			INTERRUPT
  7+  80D8 81          >					db			INTERRUPT
  7+  80D9 81          >					db			INTERRUPT
  7+  80DA 81          >					db			INTERRUPT
  7+  80DB 81          >					db			INTERRUPT
  7+  80DC 81          >					db			INTERRUPT
  7+  80DD 81          >					db			INTERRUPT
  7+  80DE 81          >					db			INTERRUPT
  7+  80DF 81          >					db			INTERRUPT
  7+  80E0 81          >					db			INTERRUPT
  7+  80E1 81          >					db			INTERRUPT
  7+  80E2 81          >					db			INTERRUPT
  7+  80E3 81          >					db			INTERRUPT
  7+  80E4 81          >					db			INTERRUPT
  7+  80E5 81          >					db			INTERRUPT
  7+  80E6 81          >					db			INTERRUPT
  7+  80E7 81          >					db			INTERRUPT
  7+  80E8 81          >					db			INTERRUPT
  7+  80E9 81          >					db			INTERRUPT
  7+  80EA 81          >					db			INTERRUPT
  7+  80EB 81          >					db			INTERRUPT
  7+  80EC 81          >					db			INTERRUPT
  7+  80ED 81          >					db			INTERRUPT
  7+  80EE 81          >					db			INTERRUPT
  7+  80EF 81          >					db			INTERRUPT
  7+  80F0 81          >					db			INTERRUPT
  7+  80F1 81          >					db			INTERRUPT
  7+  80F2 81          >					db			INTERRUPT
  7+  80F3 81          >					db			INTERRUPT
  7+  80F4 81          >					db			INTERRUPT
  7+  80F5 81          >					db			INTERRUPT
  7+  80F6 81          >					db			INTERRUPT
  7+  80F7 81          >					db			INTERRUPT
  7+  80F8 81          >					db			INTERRUPT
  7+  80F9 81          >					db			INTERRUPT
  7+  80FA 81          >					db			INTERRUPT
  7+  80FB 81          >					db			INTERRUPT
  7+  80FC 81          >					db			INTERRUPT
  7+  80FD 81          >					db			INTERRUPT
  7+  80FE 81          >					db			INTERRUPT
  7+  80FF 81          >					db			INTERRUPT
  7+  8100 81          >					db			INTERRUPT
  8+  8101              					edup
  9+  8101
 10+  8101 00 00 00...  					ds			(INTERRUPT*256+INTERRUPT)-$
 11+  8181
 12+  8181              					org			(INTERRUPT*256+INTERRUPT)
 13+  8181
 14+  8181 F5           interrupt:			push		af
 15+  8182 C5           					push		bc
 16+  8183 D5           					push		de
 17+  8184 E5           					push		hl
 18+  8185 08           					ex			af, af'
 19+  8186 D9           					exx
 20+  8187 F5           					push		af
 21+  8188 C5           					push		bc
 22+  8189 D5           					push		de
 23+  818A E5           					push		hl
 24+  818B DD E5        					push		ix
 25+  818D FD E5        					push		iy
 26+  818F
 27+  818F 21 92 82     					ld			hl, FramesPending
 28+  8192 34           					inc			(hl)
 29+  8193
 30+  8193 3E 00        .drawEnabled:		ld			a, 0
 31+  8195 B7           					or			a
 32+  8196 28 26        					jr			z, .skipDraw
 33+  8198
 34+  8198              					; рисуем спрайты
 35+  8198
 36+  8198 CD A2 85     					call		DrawTargets
 37+  819B 79           					ld			a, c
 38+  819C 32 01 C0     					ld			(NumCorrectTargets), a
 39+  819F
 40+  819F DD 21 B1 8B  					ld			ix, player1
 41+  81A3 CD BA 8B     					call		DrawPlayer
 42+  81A6
 43+  81A6              					; рисуем статус
 44+  81A6
 45+  81A6 3A 01 C0     					ld			a, (NumCorrectTargets)
 46+  81A9 01 02 15     					ld			bc, 0x1502
 47+  81AC 11 00 47     					ld			de, 0x4700
 48+  81AF CD 66 8B     					call		DrawNumber
 49+  81B2
 50+  81B2 3A 00 C0     					ld			a, (NumTargets)
 51+  81B5 01 06 15     					ld			bc, 0x1506
 52+  81B8 11 00 47     					ld			de, 0x4700
 53+  81BB CD 66 8B     					call		DrawNumber
 54+  81BE
 55+  81BE              .skipDraw:
 56+  81BE
 57+  81BE              					; готово
 58+  81BE
 59+  81BE FD E1        					pop			iy
 60+  81C0 DD E1        					pop			ix
 61+  81C2 E1           					pop			hl
 62+  81C3 D1           					pop			de
 63+  81C4 C1           					pop			bc
 64+  81C5 F1           					pop			af
 65+  81C6 08           					ex			af, af'
 66+  81C7 D9           					exx
 67+  81C8 E1           					pop			hl
 68+  81C9 D1           					pop			de
 69+  81CA C1           					pop			bc
 70+  81CB F1           					pop			af
 71+  81CC FB           					ei
 72+  81CD C9           					ret
 73+  81CE
 74+  81CE              DrawEnabled = .drawEnabled + 1
 75+  81CE
# file closed: irq.asm
  7   81CE
  8   81CE F3           start:				di
  9   81CF 31 00 00     					ld			sp, stack_top
 10   81D2 3E 80        					ld			a, 80h
 11   81D4 ED 47        					ld			i, a
 12   81D6 ED 5E        					im			2
 13   81D8 FB           					ei
 14   81D9
 15   81D9 AF           					xor			a
 16   81DA 32 D6 C2     					ld			(CurrentLevel), a
 17   81DD
 18   81DD CD 45 82     .gameLoop:			call		PlayLevel
 19   81E0 28 FB        					jr			z, .gameLoop
 20   81E2
 21   81E2 3A D6 C2     					ld			a, (CurrentLevel)
 22   81E5 3C           					inc			a
 23   81E6 FE 02        					cp			TOTAL_LEVELS
 24   81E8 28 08        					jr			z, .gameDone
 25   81EA 32 D6 C2     					ld			(CurrentLevel), a
 26   81ED
 27   81ED CD 0E 82     					call		IntermediateScreen
 28   81F0
 29   81F0 18 EB        					jr			.gameLoop
 30   81F2
 31   81F2 AF           .gameDone:			xor			a
 32   81F3 CD 93 82     					call		ClearScreen
 33   81F6 01 0C 0C     					ld			bc, 0x0C0C
 34   81F9 11 05 82     					ld			de, .winMessage
 35   81FC DD 26 C4     					ld			ixh, 0xC4
 36   81FF CD 77 84     					call		DrawString
 37   8202 76           .haltGameDone:		halt
 38   8203 18 FD        					jr			.haltGameDone
 39   8205
 40   8205 59 4F 55 20  .winMessage			db			'YOU WIN!',0
 40   8209 57 49 4E 21
 40   820D 00
 41   820E
 42   820E AF           IntermediateScreen:	xor			a
 43   820F CD 93 82     					call		ClearScreen
 44   8212
 45   8212 76           .waitNoAnyKey:		halt
 46   8213 CD 89 84     					call		ReadInput
 47   8216 3A E7 84     					ld			a, (AnyKey)
 48   8219 FE 1F        					cp			0x1f
 49   821B 20 F5        					jr			nz, .waitNoAnyKey
 50   821D
 51   821D 01 09 0C     					ld			bc, 0x0C09
 52   8220 11 35 82     					ld			de, .levelMessage
 53   8223 DD 26 C4     					ld			ixh, 0xC4
 54   8226 CD 77 84     					call		DrawString
 55   8229
 56   8229 76           .waitAnyKey:		halt
 57   822A CD 89 84     					call		ReadInput
 58   822D 3A E7 84     					ld			a, (AnyKey)
 59   8230 FE 1F        					cp			0x1f
 60   8232 28 F5        					jr			z, .waitAnyKey
 61   8234
 62   8234 C9           					ret
 63   8235
 64   8235 4C 45 56 45  .levelMessage		db			'LEVEL COMPLETE',0
 64   8239 4C 20 43 4F
 64   823D 4D 50 4C 45
 64   8241 54 45 00
 65   8244 C9           					ret
 66   8245
 67   8245 AF           PlayLevel:			xor			a
 68   8246 CD 93 82     					call		ClearScreen
 69   8249
 70   8249 CD E8 84     					call		InitLevel
 71   824C CD 4C 85     					call		DrawLevel
 72   824F
 73   824F DD 21 B1 8B  					ld			ix, player1
 74   8253 CD B5 8B     					call		InitPlayer
 75   8256
 76   8256 3E 01        					ld			a, 1
 77   8258 32 94 81     					ld			(DrawEnabled), a
 78   825B
 79   825B 21 92 82     .mainLoop:			ld			hl, FramesPending
 80   825E AF           					xor			a
 81   825F BE           					cp			(hl)
 82   8260 28 22        					jr			z, .halt
 83   8262 35           					dec			(hl)
 84   8263
 85   8263              					; Проверка конца уровня
 86   8263 2A 00 C0     					ld			hl, (NumTargets)		; NumTargets и NumCorrectTargets
 87   8266 7D           					ld			a, l
 88   8267 BC           					cp			h
 89   8268 20 07        					jr			nz, .notNextLevel
 90   826A 3A B3 8B     					ld			a, (player1.state)
 91   826D FE 00        					cp			PLAYER_IDLE
 92   826F 28 16        					jr			z, .nextLevel
 93   8271              .notNextLevel:
 94   8271
 95   8271 CD 89 84     					call		ReadInput
 96   8274
 97   8274              					; Проверка рестарта
 98   8274 21 E6 84     					ld			hl, Input.restart
 99   8277 AF           					xor			a
100   8278 BE           					cp			(hl)
101   8279 28 12        					jr			z, .restartLevel
102   827B
103   827B DD 21 B1 8B  					ld			ix, player1
104   827F CD B1 8D     					call		HandlePlayer
105   8282
106   8282 18 D7        					jr			.mainLoop
107   8284
108   8284 76           .halt:				halt
109   8285 18 D4        					jr			.mainLoop
110   8287
111   8287 AF           .nextLevel:			xor			a
112   8288 32 94 81     					ld			(DrawEnabled), a
113   828B 3C           					inc			a
114   828C C9           					ret
115   828D
116   828D AF           .restartLevel:		xor			a
117   828E 32 94 81     					ld			(DrawEnabled), a
118   8291 C9           					ret
119   8292
120   8292 00           FramesPending:		db			0
121   8293
122   8293              					include		"draw.asm"
# file opened: draw.asm
  1+  8293
  2+  8293              CHARS = 23606
  3+  8293
  4+  8293              				; Input:
  5+  8293              				;   A = attribute
  6+  8293
  7+  8293              ClearScreen:	; очищаем пиксели
  8+  8293 21 00 40     				ld		hl, 4000h
  9+  8296 5D           				ld      e, l
 10+  8297 54           				ld		d, h
 11+  8298 36 00        				ld		(hl), 0
 12+  829A 13           				inc		de
 13+  829B 01 00 18     				ld		bc, 1800h
 14+  829E ED B0        				ldir
 15+  82A0              				; очищаем атрибуты
 16+  82A0 77           				ld		(hl), a
 17+  82A1 01 FF 02     				ld		bc, 300h-1
 18+  82A4 ED B0        				ldir
 19+  82A6 C9           				ret
 20+  82A7
 21+  82A7                              ; Input:
 22+  82A7                              ;   C = X
 23+  82A7                              ;   B = Y (знакоместо)
 24+  82A7                              ;   IYH = старший байт адреса
 25+  82A7                              ; Output:
 26+  82A7                              ;   DE => screen addr
 27+  82A7
 28+  82A7              CalcScreenAddr: ; Преобразуем координату Y в пикселях в значение в знакоместах
 29+  82A7 78                           ld		a, b
 30+  82A8 17                           rla
 31+  82A9 17                           rla
 32+  82AA 17                           rla
 33+  82AB E6 F8                        and		0xf8
 34+  82AD              ; альтернативная точка входа, A = Y (пиксели)
 35+  82AD              CalcScreenAddrPix:
 36+  82AD 47                           ld		b, a
 37+  82AE                              ; Расчитываем адрес на экране
 38+  82AE 17                           rla                                 ; A = ? |Y5|Y4|Y3| ?| ?| ?| ?
 39+  82AF 17                           rla                                 ; A = Y5|Y4|Y3| ?| ?| ?| ?| ?
 40+  82B0 E6 E0                        and     0xe0            ; 1110 0000 ; A = Y5|Y4|Y3| 0| 0| 0| 0| 0
 41+  82B2 B1                           or      c               ;             A = Y5|Y4|Y3|X4|X3|X2|X1|X0
 42+  82B3 5F                           ld      e, a
 43+  82B4 78                           ld      a, b
 44+  82B5 1F                           rra
 45+  82B6 1F                           rra
 46+  82B7 1F                           rra                                 ; A =  ?| ?| ?|Y7|Y6| ?| ?| ?
 47+  82B8 E6 18                        and     0x18                        ; A =  0| 0| 0|Y7|Y6| 0| 0| 0
 48+  82BA 57                           ld      d, a
 49+  82BB 78                           ld      a, b
 50+  82BC E6 07                        and     0x07                        ; A =  0| 0| 0| 0| 0|Y2|Y1|Y0
 51+  82BE B2                           or      d                           ; A =  0| 0| 0|Y7|Y6|Y2|Y1|Y0
 52+  82BF FD B4                        or      iyh                         ; A =  0| 1| 0|Y7|Y6|Y2|Y1|Y0
 53+  82C1 57                           ld      d, a
 54+  82C2 C9                           ret
 55+  82C3
 56+  82C3                              ; Input:
 57+  82C3                              ;   C = X (знакоместо)
 58+  82C3                              ;   B = Y (знакоместо)
 59+  82C3                              ;   D = дополнительный сдвиг по Y (-7..7)
 60+  82C3
 61+  82C3              DrawEmptyByte:	; Расчитываем адрес назначения
 62+  82C3 FD 26 40                     ld		iyh, 0x40
 63+  82C6 78                           ld		a, b
 64+  82C7 87                           add		a, a		; *2
 65+  82C8 87                           add		a, a		; *4
 66+  82C9 87                           add		a, a		; *8
 67+  82CA 82                           add		a, d
 68+  82CB CD AD 82         			call    CalcScreenAddrPix
 69+  82CE                  			; Записываем нулевой байт
 70+  82CE AF               			xor		a
 71+  82CF 12               			ld		(de), a
 72+  82D0 C9               			ret
 73+  82D1
 74+  82D1              DRAW_REPLACE 	equ		0			; nop
 75+  82D1              DRAW_OR			equ		0xB6		; or (hl)
 76+  82D1
 77+  82D1                              ; Input:
 78+  82D1                              ;   A = mode (DRAW_OR или DRAW_REPLACE)
 79+  82D1
 80+  82D1              SetDrawSpriteMode:
 81+  82D1 32 3D 83     				ld		(DrawSprite.hotPatch1), a
 82+  82D4 32 4B 83     				ld		(DrawSprite.hotPatch2), a
 83+  82D7 32 5B 83     				ld		(DrawSprite.hotPatch3), a
 84+  82DA 32 6C 83     				ld		(DrawSprite.hotPatch4), a
 85+  82DD 32 7E 83     				ld		(DrawSprite.hotPatch5), a
 86+  82E0 32 8F 83     				ld		(DrawSprite.hotPatch6), a
 87+  82E3 32 9F 83     				ld		(DrawSprite.hotPatch7), a
 88+  82E6 32 AD 83     				ld		(DrawSprite.hotPatch8), a
 89+  82E9 32 B8 83     				ld		(DrawSprite.hotPatch9), a
 90+  82EC 32 C5 83     				ld		(DrawSprite.hotPatch10), a
 91+  82EF 32 D4 83     				ld		(DrawSprite.hotPatch11), a
 92+  82F2 32 E4 83     				ld		(DrawSprite.hotPatch12), a
 93+  82F5 32 F5 83     				ld		(DrawSprite.hotPatch13), a
 94+  82F8 32 05 84     				ld		(DrawSprite.hotPatch14), a
 95+  82FB 32 14 84     				ld		(DrawSprite.hotPatch15), a
 96+  82FE 32 22 84     				ld		(DrawSprite.hotPatch16), a
 97+  8301 C9           				ret
 98+  8302
 99+  8302                              ; Input:
100+  8302                              ;	A = атрибут
101+  8302                              ;   E = дополнительный сдвиг по X (-7..7)
102+  8302                              ;   D = дополнительный сдвиг по Y (-7..7)
103+  8302                              ;   L = X спрайта (знакоместо)
104+  8302                              ;   H = Y спрайта (знакоместо)
105+  8302                              ;   C = X (знакоместо)
106+  8302                              ;   B = Y (знакоместо)
107+  8302
108+  8302              DrawSprite:    	; Сохраняем А
109+  8302 08                           ex      af, af'
110+  8303                              ; Патчим код
111+  8303 7B                           ld		a, e
112+  8304 32 22 83                     ld		(.hotPatch+2), a
113+  8307              				; Расчитываем адрес назначения
114+  8307 FD 26 40                     ld		iyh, 0x40
115+  830A 78                           ld		a, b
116+  830B 87                           add		a, a		; *2
117+  830C 87                           add		a, a		; *4
118+  830D 87                           add		a, a		; *8
119+  830E 82                           add		a, d
120+  830F CD AD 82         			call    CalcScreenAddrPix
121+  8312 D5                           push	de
122+  8313                              ; Преобразуем координату Y спрайта в адрес в SCR
123+  8313 44                           ld		b, h
124+  8314 4D                           ld		c, l
125+  8315 EB                           ex		de, hl		; сохраню DE в HL
126+  8316                              ; Расчитываем адрес спрайта
127+  8316 FD 26 A0                     ld		iyh, high gfx
128+  8319 CD A7 82                     call	CalcScreenAddr
129+  831C
130+  831C FD 21 33 83  				ld		iy, .table
131+  8320 FD 4E 00     .hotPatch:		ld		c, (iy+0)
132+  8323 06 00        				ld		b, 0
133+  8325 FD 09        				add		iy, bc
134+  8327 06 08                        ld      b, 8		; счетчик для цикла
135+  8329 FD E9        				jp		(iy)
136+  832B
137+  832B 09           				db		.empty-.table
138+  832C 14           				db		.shiftM7-.table
139+  832D 23           				db		.shiftM6-.table
140+  832E 33           				db		.shiftM5-.table
141+  832F 44           				db		.shiftM4-.table
142+  8330 56           				db		.shiftM3-.table
143+  8331 67           				db		.shiftM2-.table
144+  8332 77           				db		.shiftM1-.table
145+  8333 84           .table:			db		.noShift-.table
146+  8334 8F           				db		.shift1-.table
147+  8335 9C           				db		.shift2-.table
148+  8336 AB           				db		.shift3-.table
149+  8337 BB           				db		.shift4-.table
150+  8338 CC           				db		.shift5-.table
151+  8339 DC           				db		.shift6-.table
152+  833A EB           				db		.shift7-.table
153+  833B 09           				db		.empty-.table
154+  833C
155+  833C AF           .empty:       	xor		a
156+  833D 00           .hotPatch1:		nop
157+  833E 77           				ld      (hl), a
158+  833F CD 42 84                     call	DownHL
159+  8342 10 F8                        djnz    .empty
160+  8344 C3 2A 84                     jp		.charDone
161+  8347
162+  8347 1A           .shiftM7:       ld      a, (de)
163+  8348 0F           				rrca
164+  8349 E6 80        				and		0x80
165+  834B 00           .hotPatch2:		nop
166+  834C 77                           ld      (hl), a
167+  834D 14                           inc     d
168+  834E CD 42 84                     call	DownHL
169+  8351 10 F4                        djnz    .shiftM7
170+  8353 C3 2A 84                     jp		.charDone
171+  8356
172+  8356 1A           .shiftM6:       ld      a, (de)
173+  8357 0F           				rrca
174+  8358 0F           				rrca
175+  8359 E6 C0        				and		0xc0
176+  835B 00           .hotPatch3:		nop
177+  835C 77                           ld      (hl), a
178+  835D 14                           inc     d
179+  835E CD 42 84                     call	DownHL
180+  8361 10 F3                        djnz    .shiftM6
181+  8363 C3 2A 84                     jp		.charDone
182+  8366
183+  8366 1A           .shiftM5:       ld      a, (de)
184+  8367              				dup		3
185+  8367 0F          >				rrca
185+  8368 0F          >				rrca
185+  8369 0F          >				rrca
186+  836A              				edup
187+  836A E6 E0        				and		0xe0
188+  836C 00           .hotPatch4:		nop
189+  836D 77                           ld      (hl), a
190+  836E 14                           inc     d
191+  836F CD 42 84                     call	DownHL
192+  8372 10 F2                        djnz    .shiftM5
193+  8374 C3 2A 84                     jp		.charDone
194+  8377
195+  8377 1A           .shiftM4:       ld      a, (de)
196+  8378              				dup		4
197+  8378 07          >				rlca
197+  8379 07          >				rlca
197+  837A 07          >				rlca
197+  837B 07          >				rlca
198+  837C              				edup
199+  837C E6 F0        				and		0xf0
200+  837E 00           .hotPatch5:		nop
201+  837F 77                           ld      (hl), a
202+  8380 14                           inc     d
203+  8381 CD 42 84                     call	DownHL
204+  8384 10 F1                        djnz    .shiftM4
205+  8386 C3 2A 84                     jp		.charDone
206+  8389
207+  8389 1A           .shiftM3:       ld      a, (de)
208+  838A              				dup		3
209+  838A 07          >				rlca
209+  838B 07          >				rlca
209+  838C 07          >				rlca
210+  838D              				edup
211+  838D E6 F8        				and		0xf8
212+  838F 00           .hotPatch6:		nop
213+  8390 77                           ld      (hl), a
214+  8391 14                           inc     d
215+  8392 CD 42 84                     call	DownHL
216+  8395 10 F2                        djnz    .shiftM3
217+  8397 C3 2A 84                     jp		.charDone
218+  839A
219+  839A 1A           .shiftM2:       ld      a, (de)
220+  839B 07           				rlca
221+  839C 07           				rlca
222+  839D E6 FC        				and		0xfc
223+  839F 00           .hotPatch7:		nop
224+  83A0 77                           ld      (hl), a
225+  83A1 14                           inc     d
226+  83A2 CD 42 84                     call	DownHL
227+  83A5 10 F3                        djnz    .shiftM2
228+  83A7 C3 2A 84                     jp		.charDone
229+  83AA
230+  83AA 1A           .shiftM1:       ld      a, (de)
231+  83AB CB 27        				sla		a
232+  83AD 00           .hotPatch8:		nop
233+  83AE 77                           ld      (hl), a
234+  83AF 14                           inc     d
235+  83B0 CD 42 84                     call	DownHL
236+  83B3 10 F5                        djnz    .shiftM1
237+  83B5 18 73                        jr		.charDone
238+  83B7
239+  83B7 1A           .noShift:       ld      a, (de)
240+  83B8 00           .hotPatch9:		nop
241+  83B9 77                           ld      (hl), a
242+  83BA 14                           inc     d
243+  83BB CD 42 84                     call	DownHL
244+  83BE 10 F7                        djnz    .noShift
245+  83C0 18 68                        jr		.charDone
246+  83C2
247+  83C2 1A           .shift1:       	ld      a, (de)
248+  83C3 CB 3F        				srl		a
249+  83C5 00           .hotPatch10:	nop
250+  83C6 77                           ld      (hl), a
251+  83C7 14                           inc     d
252+  83C8 CD 42 84                     call	DownHL
253+  83CB 10 F5                        djnz    .shift1
254+  83CD 18 5B                        jr		.charDone
255+  83CF
256+  83CF 1A           .shift2:       	ld      a, (de)
257+  83D0 0F           				rrca
258+  83D1 0F           				rrca
259+  83D2 E6 3F        				and		0x3f
260+  83D4 00           .hotPatch11:	nop
261+  83D5 77                           ld      (hl), a
262+  83D6 14                           inc     d
263+  83D7 CD 42 84                     call	DownHL
264+  83DA 10 F3                        djnz    .shift2
265+  83DC 18 4C                        jr		.charDone
266+  83DE
267+  83DE 1A           .shift3:       	ld      a, (de)
268+  83DF              				dup		3
269+  83DF 0F          >				rrca
269+  83E0 0F          >				rrca
269+  83E1 0F          >				rrca
270+  83E2              				edup
271+  83E2 E6 1F        				and		0x1f
272+  83E4 00           .hotPatch12:	nop
273+  83E5 77                           ld      (hl), a
274+  83E6 14                           inc     d
275+  83E7 CD 42 84                     call	DownHL
276+  83EA 10 F2                        djnz    .shift3
277+  83EC 18 3C                        jr		.charDone
278+  83EE
279+  83EE 1A           .shift4:       	ld      a, (de)
280+  83EF              				dup		4
281+  83EF 0F          >				rrca
281+  83F0 0F          >				rrca
281+  83F1 0F          >				rrca
281+  83F2 0F          >				rrca
282+  83F3              				edup
283+  83F3 E6 0F        				and		0x0f
284+  83F5 00           .hotPatch13:	nop
285+  83F6 77                           ld      (hl), a
286+  83F7 14                           inc     d
287+  83F8 CD 42 84                     call	DownHL
288+  83FB 10 F1                        djnz    .shift4
289+  83FD 18 2B                        jr		.charDone
290+  83FF
291+  83FF 1A           .shift5:       	ld      a, (de)
292+  8400              				dup		3
293+  8400 07          >				rlca
293+  8401 07          >				rlca
293+  8402 07          >				rlca
294+  8403              				edup
295+  8403 E6 07        				and		0x07
296+  8405 00           .hotPatch14:	nop
297+  8406 77                           ld      (hl), a
298+  8407 14                           inc     d
299+  8408 CD 42 84                     call	DownHL
300+  840B 10 F2                        djnz    .shift5
301+  840D 18 1B                        jr		.charDone
302+  840F
303+  840F 1A           .shift6:       	ld      a, (de)
304+  8410              				dup		2
305+  8410 07          >				rlca
305+  8411 07          >				rlca
306+  8412              				edup
307+  8412 E6 03        				and		0x03
308+  8414 00           .hotPatch15:	nop
309+  8415 77                           ld      (hl), a
310+  8416 14                           inc     d
311+  8417 CD 42 84                     call	DownHL
312+  841A 10 F3                        djnz    .shift6
313+  841C 18 0C                        jr		.charDone
314+  841E
315+  841E 1A           .shift7:       	ld      a, (de)
316+  841F 07           				rlca
317+  8420 E6 01        				and		0x01
318+  8422 00           .hotPatch16:	nop
319+  8423 77                           ld      (hl), a
320+  8424 14                           inc     d
321+  8425 CD 42 84                     call	DownHL
322+  8428 10 F4                        djnz    .shift7
323+  842A                              ;jr		.charDone
324+  842A
325+  842A              .charDone: 		; Получаем из стека начальный адрес на экране
326+  842A E1           				pop		hl
327+  842B 4C           				ld		c, h				; сохраняем старший байт в C для проверки внизу
328+  842C              				; Расчитываем адрес в области атрибутов
329+  842C 7C                           ld      a, h
330+  842D 1F                  			rra
331+  842E 1F                           rra
332+  842F 1F                           rra
333+  8430 E6 03                        and     0x03
334+  8432 F6 58                        or      0x58
335+  8434 67                           ld      h, a
336+  8435                              ; Восстанавливаем A
337+  8435 08                           ex      af, af'
338+  8436                              ; Записываем атрибут
339+  8436 77                           ld      (hl), a
340+  8437                              ; Сохраняем атрибут в B
341+  8437 47                           ld		b, a
342+  8438                              ; Проверяем, нужно ли рисовать второй атрибут
343+  8438 3E 07                        ld		a, 7
344+  843A A1                           and		c
345+  843B C8                           ret		z				; мы на границе знакоместа, второй атрибут не нужен
346+  843C              				; Переходим на следующую строку в атрибутах
347+  843C 11 20 00                     ld		de, 32
348+  843F 19                           add		hl, de
349+  8440              				; Записываем второй атрибут
350+  8440 70                           ld		(hl), b
351+  8441 C9                           ret
352+  8442
353+  8442                              ; Input:
354+  8442                              ;	HL => адрес байта (8 пикселей) на экране
355+  8442                              ; Output:
356+  8442                              ;   HL => адрес байта (8 пикселей) в следующей строке (Y = Y + 1)
357+  8442
358+  8442 24           DownHL:			inc		h
359+  8443 3E 07        				ld		a, 00000111b	; 7=8-1;  остаток от деления на 8
360+  8445 A4           				and		h
361+  8446 C0           				ret		nz
362+  8447 7D           				ld		a, l			; L = L + 32
363+  8448 D6 E0        				sub		-32
364+  844A 6F           				ld		l, a
365+  844B 9F           				sbc		a, a			; 0 = no carry, -1 (0xff 11111111) = was carry
366+  844C E6 F8        				and		-8				; 0 = no carry, -8 (0xf8 11111000) = was carry
367+  844E 84           				add		a, h
368+  844F 67           				ld		h, a
369+  8450 C9           				ret
370+  8451
371+  8451                              ; Input:
372+  8451                              ;   L = symbol
373+  8451                              ;   A = attribute
374+  8451                              ;   C = X (знакоместо)
375+  8451                              ;   B = Y (знакоместо)
376+  8451
377+  8451              DrawChar:       ; Сохраняем А
378+  8451 08                           ex      af, af'
379+  8452                              ; Расчитываем адрес назначения
380+  8452 FD 26 40                     ld		iyh, 0x40
381+  8455 CD A7 82                     call    CalcScreenAddr
382+  8458                              ; Расчитываем адрес символа
383+  8458 26 00                        ld      h, 0
384+  845A 29                           add     hl, hl          ; HL+HL = HL*2
385+  845B 29                           add     hl, hl          ; (HL*2)+(HL*2) = HL*4
386+  845C 29                           add     hl, hl          ; HL*8
387+  845D ED 4B 36 5C                  ld      bc, (CHARS)
388+  8461 09                           add     hl, bc          ; HL => адрес пикселей символа
389+  8462                              ; Рисуем
390+  8462 06 08                        ld      b, 8
391+  8464 7E           .loop:          ld      a, (hl)
392+  8465 12                           ld      (de), a
393+  8466 14                           inc     d
394+  8467 23                           inc     hl
395+  8468 10 FA                        djnz    .loop
396+  846A                              ; Расчитываем адрес в области атрибутов
397+  846A 15                           dec     d
398+  846B 7A                           ld      a, d
399+  846C 1F                           rra
400+  846D 1F                           rra
401+  846E 1F                           rra
402+  846F E6 03                        and     0x03
403+  8471 F6 58                        or      0x58
404+  8473 57                           ld      d, a
405+  8474                              ; Восстанавливаем A
406+  8474 08                           ex      af, af'
407+  8475                              ; Записываем атрибут
408+  8475 12                           ld      (de), a
409+  8476 C9                           ret
410+  8477
411+  8477                              ; Input:
412+  8477                              ;   DE = строка
413+  8477                              ;	IXH = атрибут
414+  8477                              ;   C = X (знакоместо)
415+  8477                              ;   B = Y (знакоместо)
416+  8477
417+  8477 1A           DrawString:		ld          a, (de)
418+  8478 B7                           or			a
419+  8479 C8                           ret         z
420+  847A D5                           push		de
421+  847B C5                           push		bc
422+  847C 6F                           ld			l, a
423+  847D DD 7C        				ld			a, ixh
424+  847F CD 51 84                     call		DrawChar
425+  8482 C1                           pop			bc
426+  8483 D1                           pop			de
427+  8484 0C                           inc			c			; увеличили X
428+  8485 13                           inc         de			; следующий символ в буфере
429+  8486 18 EF                        jr          DrawString
430+  8488 C9                           ret
431+  8489
# file closed: draw.asm
123   8489              					include		"input.asm"
# file opened: input.asm
  1+  8489
  2+  8489 21 E7 84     ReadInput:			ld			hl, AnyKey
  3+  848C 36 1F        					ld			(hl), 0x1f
  4+  848E
  5+  848E 01 FE A6     					ld			bc, 0xa6fe
  6+  8491 ED 78        					in			a, (c)
  7+  8493 A6           					and			(hl)				; обновляем AnyKey
  8+  8494 77           					ld			(hl), a
  9+  8495
 10+  8495 01 FE FB     					ld			bc, 0xfbfe
 11+  8498 ED 78        					in			a, (c)
 12+  849A 47           					ld			b, a
 13+  849B A6           					and			(hl)				; обновляем AnyKey
 14+  849C 77           					ld			(hl), a
 15+  849D
 16+  849D 78           					ld			a, b
 17+  849E E6 01        					and			1					; Q
 18+  84A0 32 E3 84     					ld			(Input.up), a
 19+  84A3
 20+  84A3 78           					ld			a, b
 21+  84A4 E6 08        					and			8					; R
 22+  84A6 32 E6 84     					ld			(Input.restart), a
 23+  84A9
 24+  84A9 01 FE FD     					ld			bc, 0xfdfe
 25+  84AC ED 78        					in			a, (c)
 26+  84AE 47           					ld			b, a
 27+  84AF A6           					and			(hl)				; обновляем AnyKey
 28+  84B0 77           					ld			(hl), a
 29+  84B1
 30+  84B1 78           					ld			a, b
 31+  84B2 E6 01        					and			1					; A
 32+  84B4 32 E4 84     					ld			(Input.down), a
 33+  84B7
 34+  84B7 01 FE DF     					ld			bc, 0xdffe
 35+  84BA ED 78        					in			a, (c)
 36+  84BC 47           					ld			b, a
 37+  84BD A6           					and			(hl)				; обновляем AnyKey
 38+  84BE 77           					ld			(hl), a
 39+  84BF
 40+  84BF 78           					ld			a, b
 41+  84C0 E6 02        					and			2					; O
 42+  84C2 32 E1 84     					ld			(Input.left), a
 43+  84C5
 44+  84C5 78           					ld			a, b
 45+  84C6 E6 01        					and			1					; P
 46+  84C8 32 E2 84     					ld			(Input.right), a
 47+  84CB
 48+  84CB 78           					ld			a, b
 49+  84CC E6 08        					and			8					; U
 50+  84CE 32 E0 84     					ld			(Input.undo), a
 51+  84D1
 52+  84D1 01 FE 7F     					ld			bc, 0x7ffe
 53+  84D4 ED 78        					in			a, (c)
 54+  84D6 47           					ld			b, a
 55+  84D7 A6           					and			(hl)				; обновляем AnyKey
 56+  84D8 77           					ld			(hl), a
 57+  84D9
 58+  84D9 78           					ld			a, b
 59+  84DA E6 01        					and			1					; Space
 60+  84DC 32 E5 84     					ld			(Input.fire), a
 61+  84DF
 62+  84DF C9           					ret
 63+  84E0
 64+  84E0              Input:
 65+  84E0 01           .undo:				db			1
 66+  84E1 01           .left:				db			1
 67+  84E2 01           .right:				db			1
 68+  84E3 01           .up:				db			1
 69+  84E4 01           .down:				db			1
 70+  84E5 01           .fire:				db			1
 71+  84E6 01           .restart:			db			1
 72+  84E7
 73+  84E7 1F           AnyKey				db			0x1f
 74+  84E8
# file closed: input.asm
124   84E8              					include		"level.asm"
# file opened: level.asm
  1+  84E8
  2+  84E8              LEVEL_WIDTH 		equ		 	32
  3+  84E8              LEVEL_HEIGHT 		equ 		20
  4+  84E8
  5+  84E8              FLOOR_ATTR 			equ 		01001111b
  6+  84E8              SPHERE_ATTR 		equ 		01001110b
  7+  84E8              WALL_ATTR  			equ 		00001101b
  8+  84E8              TARGET_ATTR			equ			01001010b
  9+  84E8
 10+  84E8 AF           InitLevel:			xor			a
 11+  84E9 32 00 C0     					ld			(NumTargets), a
 12+  84EC 32 01 C0     					ld			(NumCorrectTargets), a
 13+  84EF
 14+  84EF 67           					ld			h, a	; H = 0
 15+  84F0 3A D6 C2     					ld			a, (CurrentLevel)
 16+  84F3 87           					add			a, a
 17+  84F4 6F           					ld			l, a
 18+  84F5 01 DA 85     					ld			bc, Levels
 19+  84F8 09           					add			hl, bc
 20+  84F9 7E           					ld			a, (hl)	; читаем адрес данных уровня
 21+  84FA 23           					inc			hl
 22+  84FB 66           					ld			h, (hl)
 23+  84FC 6F           					ld			l, a	; HL => указывает на данные уровня
 24+  84FD
 25+  84FD              					; копируем данные уровня
 26+  84FD 11 56 C0     					ld			de, Level
 27+  8500 01 80 02     					ld			bc, LEVEL_WIDTH * LEVEL_HEIGHT
 28+  8503 ED B0        					ldir
 29+  8505
 30+  8505 21 D6 C2     					ld			hl, LevelEnd
 31+  8508 0E 14        					ld			c, LEVEL_HEIGHT
 32+  850A 06 20        .rowLoop:			ld			b, LEVEL_WIDTH
 33+  850C 2B           .colLoop:			dec			hl
 34+  850D 7E           					ld			a, (hl)
 35+  850E FE 31        					cp			a, '1'
 36+  8510 CC 27 85     					call		z, .handlePlayerStart
 37+  8513 FE 2A        					cp			a, '*'
 38+  8515 CC 34 85     					call		z, .handleTarget
 39+  8518 10 F2        					djnz		.colLoop
 40+  851A 0D           					dec			c
 41+  851B 20 ED        					jr			nz, .rowLoop
 42+  851D 21 16 C0     					ld			hl, UndoBuffer
 43+  8520 22 12 C0     					ld			(UndoHead), hl
 44+  8523 22 14 C0     					ld			(UndoTail), hl
 45+  8526 C9           					ret
 46+  8527 36 20        .handlePlayerStart:	ld			(hl), ' '
 47+  8529 78           					ld			a, b
 48+  852A 3D           					dec			a
 49+  852B 32 B1 8B     					ld			(player1.x), a
 50+  852E 79           					ld			a, c
 51+  852F 3D           					dec			a
 52+  8530 32 B2 8B     					ld			(player1.y), a
 53+  8533 C9           					ret
 54+  8534 36 20        .handleTarget:		ld			(hl), ' '
 55+  8536 3A 00 C0     					ld			a, (NumTargets)
 56+  8539 FE 08        					cp			MAX_TARGETS
 57+  853B C8           					ret			z
 58+  853C 3C           					inc			a
 59+  853D 32 00 C0     					ld			(NumTargets), a
 60+  8540 87           					add			a, a
 61+  8541 5F           					ld			e, a
 62+  8542 16 C0        					ld			d, high Targets
 63+  8544 78           					ld			a, b
 64+  8545 3D           					dec			a
 65+  8546 12           					ld			(de), a			; target X
 66+  8547 13           					inc			de
 67+  8548 79           					ld			a, c
 68+  8549 3D           					dec			a
 69+  854A 12           					ld			(de), a			; target Y
 70+  854B C9           					ret
 71+  854C
 72+  854C 21 D6 C2     DrawLevel:			ld			hl, LevelEnd
 73+  854F 06 14        					ld			b, LEVEL_HEIGHT
 74+  8551 0E 20        .rowLoop:			ld			c, LEVEL_WIDTH
 75+  8553 2B           .colLoop:			dec			hl
 76+  8554 7E           					ld			a, (hl)
 77+  8555 FE 20        					cp			a, ' '
 78+  8557 CC 6A 85     					call		z, .drawFloor
 79+  855A FE 58        					cp			a, 'X'
 80+  855C CC 78 85     					call		z, .drawWall
 81+  855F FE 4F        					cp			a, 'O'
 82+  8561 CC 71 85     					call		z, .drawSphere
 83+  8564 0D           					dec			c
 84+  8565 20 EC        					jr			nz, .colLoop
 85+  8567 10 E8        					djnz		.rowLoop
 86+  8569 C9           					ret
 87+  856A 3E 4F        .drawFloor:			ld			a, FLOOR_ATTR
 88+  856C 11 01 02     					ld			de, 0x201
 89+  856F 18 0C        					jr			.drawSprite
 90+  8571 3E 4E        .drawSphere:		ld			a, SPHERE_ATTR
 91+  8573 11 00 01     					ld			de, 0x100
 92+  8576 18 05        					jr			.drawSprite
 93+  8578 3E 0D        .drawWall:			ld			a, WALL_ATTR
 94+  857A 11 00 02     					ld			de, 0x200
 95+  857D              					;jr			.drawSprite
 96+  857D C5           .drawSprite:		push		bc
 97+  857E E5           					push		hl
 98+  857F 05           					dec			b
 99+  8580 0D           					dec			c
100+  8581 21 00 00     					ld			hl, 0
101+  8584 EB           					ex			de, hl
102+  8585 CD 02 83     					call		DrawSprite
103+  8588 E1           					pop			hl
104+  8589 C1           					pop			bc
105+  858A C9           					ret
106+  858B
107+  858B              					; Input:
108+  858B              	                ;   C = X (знакоместо)
109+  858B                  	            ;   B = Y (знакоместо)
110+  858B                  	            ; Output:
111+  858B                  	            ;	A = предмет на карте
112+  858B                  	            ;   ZF=0 если ходить нельзя, ZF=1 если ходить можно
113+  858B
114+  858B CD 92 85     CheckBlocked:		call		GetLevelAddr
115+  858E 7E           					ld			a, (hl)
116+  858F FE 20        					cp			a, ' '
117+  8591 C9           					ret
118+  8592
119+  8592              					; Input:
120+  8592              	                ;   C = X (знакоместо)
121+  8592                  	            ;   B = Y (знакоместо)
122+  8592                  	            ; Output:
123+  8592                  	            ;	HL => адрес внутри Level
124+  8592
125+  8592              GetLevelAddr:		; HL = B * 32 + C; 32 = LEVEL_WIDTH
126+  8592 68           					ld			l, b
127+  8593 26 00        					ld			h, 0
128+  8595 59           					ld			e, c
129+  8596 54           					ld			d, h
130+  8597 29           					add			hl, hl			; *2
131+  8598 29           					add			hl, hl			; *4
132+  8599 29           					add			hl, hl			; *8
133+  859A 29           					add			hl, hl			; *16
134+  859B 29           					add			hl, hl			; *32
135+  859C 19           					add			hl, de
136+  859D 11 56 C0     					ld			de, Level
137+  85A0 19           					add			hl, de
138+  85A1 C9           					ret
139+  85A2
140+  85A2              					; Returns:
141+  85A2              					;   C = количество точек, где уже есть шар
142+  85A2
143+  85A2 3A 00 C0     DrawTargets:		ld			a, (NumTargets)
144+  85A5 B7           					or			a
145+  85A6 C8           					ret			z
146+  85A7 47           					ld			b, a
147+  85A8 0E 00        					ld			c, 0			; количество точек, на которых уже стоит шар
148+  85AA DD 21 02 C0  					ld			ix, Targets
149+  85AE 11 02 00     					ld			de, 2
150+  85B1 D9           .loop:				exx
151+  85B2 DD 4E 00     					ld			c, (ix+0)
152+  85B5 DD 46 01     					ld			b, (ix+1)
153+  85B8 CD 8B 85     					call		CheckBlocked
154+  85BB 20 11        					jr			nz, .blocked
155+  85BD 21 02 02     					ld			hl, 0x202
156+  85C0 3E 4A        .draw:				ld			a, TARGET_ATTR
157+  85C2 11 00 00     					ld			de, 0
158+  85C5 CD 02 83     					call		DrawSprite
159+  85C8 D9           .skip:				exx
160+  85C9 DD 19        					add			ix, de
161+  85CB 10 E4        					djnz		.loop
162+  85CD C9           					ret
163+  85CE FE 4F        .blocked:			cp			'O'
164+  85D0 20 F6        					jr			nz, .skip
165+  85D2 D9           					exx
166+  85D3 0C           					inc			c
167+  85D4 D9           					exx
168+  85D5 21 00 01     					ld			hl, 0x100
169+  85D8 18 E6        					jr			.draw
170+  85DA
# file closed: level.asm
125   85DA              					include		"levels.asm"
# file opened: levels.asm
  1+  85DA
  2+  85DA DE 85        Levels:				dw			Level1
  3+  85DC 5E 88        					dw			Level2
  4+  85DE              LevelsEnd:
  5+  85DE              TOTAL_LEVELS = (LevelsEnd - Levels) / 2
  6+  85DE
  7+  85DE              					; пробел - пустое место
  8+  85DE              					; X - стена
  9+  85DE              					; 1 - точка старта
 10+  85DE              					; O - шарик (ящик)
 11+  85DE              					; * - куда привезти шарик, чтобы выиграть
 12+  85DE
 13+  85DE 58 58 58 58  Level1:				db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 13+  85E2 58 58 58 58
 13+  85E6 58 58 58 58
 13+  85EA 58 58 58 58
 13+  85EE 58 58 58 58
 13+  85F2 58 58 58 58
 13+  85F6 58 58 58 58
 13+  85FA 58 58 58 58
 14+  85FE 58 20 20 20  					db			"X                              X"
 14+  8602 20 20 20 20
 14+  8606 20 20 20 20
 14+  860A 20 20 20 20
 14+  860E 20 20 20 20
 14+  8612 20 20 20 20
 14+  8616 20 20 20 20
 14+  861A 20 20 20 58
 15+  861E 58 20 20 20  					db			"X                              X"
 15+  8622 20 20 20 20
 15+  8626 20 20 20 20
 15+  862A 20 20 20 20
 15+  862E 20 20 20 20
 15+  8632 20 20 20 20
 15+  8636 20 20 20 20
 15+  863A 20 20 20 58
 16+  863E 58 20 20 20  					db			"X                              X"
 16+  8642 20 20 20 20
 16+  8646 20 20 20 20
 16+  864A 20 20 20 20
 16+  864E 20 20 20 20
 16+  8652 20 20 20 20
 16+  8656 20 20 20 20
 16+  865A 20 20 20 58
 17+  865E 58 20 20 20  					db			"X                              X"
 17+  8662 20 20 20 20
 17+  8666 20 20 20 20
 17+  866A 20 20 20 20
 17+  866E 20 20 20 20
 17+  8672 20 20 20 20
 17+  8676 20 20 20 20
 17+  867A 20 20 20 58
 18+  867E 58 20 20 20  					db			"X                              X"
 18+  8682 20 20 20 20
 18+  8686 20 20 20 20
 18+  868A 20 20 20 20
 18+  868E 20 20 20 20
 18+  8692 20 20 20 20
 18+  8696 20 20 20 20
 18+  869A 20 20 20 58
 19+  869E 58 20 20 20  					db			"X                              X"
 19+  86A2 20 20 20 20
 19+  86A6 20 20 20 20
 19+  86AA 20 20 20 20
 19+  86AE 20 20 20 20
 19+  86B2 20 20 20 20
 19+  86B6 20 20 20 20
 19+  86BA 20 20 20 58
 20+  86BE 58 20 20 20  					db			"X                              X"
 20+  86C2 20 20 20 20
 20+  86C6 20 20 20 20
 20+  86CA 20 20 20 20
 20+  86CE 20 20 20 20
 20+  86D2 20 20 20 20
 20+  86D6 20 20 20 20
 20+  86DA 20 20 20 58
 21+  86DE 58 20 20 20  					db			"X        *  O1                 X"
 21+  86E2 20 20 20 20
 21+  86E6 20 2A 20 20
 21+  86EA 4F 31 20 20
 21+  86EE 20 20 20 20
 21+  86F2 20 20 20 20
 21+  86F6 20 20 20 20
 21+  86FA 20 20 20 58
 22+  86FE 58 20 20 20  					db			"X                              X"
 22+  8702 20 20 20 20
 22+  8706 20 20 20 20
 22+  870A 20 20 20 20
 22+  870E 20 20 20 20
 22+  8712 20 20 20 20
 22+  8716 20 20 20 20
 22+  871A 20 20 20 58
 23+  871E 58 20 20 20  					db			"X           *  O               X"
 23+  8722 20 20 20 20
 23+  8726 20 20 20 20
 23+  872A 2A 20 20 4F
 23+  872E 20 20 20 20
 23+  8732 20 20 20 20
 23+  8736 20 20 20 20
 23+  873A 20 20 20 58
 24+  873E 58 20 20 20  					db			"X                              X"
 24+  8742 20 20 20 20
 24+  8746 20 20 20 20
 24+  874A 20 20 20 20
 24+  874E 20 20 20 20
 24+  8752 20 20 20 20
 24+  8756 20 20 20 20
 24+  875A 20 20 20 58
 25+  875E 58 20 20 20  					db			"X                              X"
 25+  8762 20 20 20 20
 25+  8766 20 20 20 20
 25+  876A 20 20 20 20
 25+  876E 20 20 20 20
 25+  8772 20 20 20 20
 25+  8776 20 20 20 20
 25+  877A 20 20 20 58
 26+  877E 58 20 58 58  					db			"X XXX XXX X X XXX XXX  X  XX X X"
 26+  8782 58 20 58 58
 26+  8786 58 20 58 20
 26+  878A 58 20 58 58
 26+  878E 58 20 58 58
 26+  8792 58 20 20 58
 26+  8796 20 20 58 58
 26+  879A 20 58 20 58
 27+  879E 58 20 58 20  					db			"X X   X X X X X X X X X X XX X X"
 27+  87A2 20 20 58 20
 27+  87A6 58 20 58 20
 27+  87AA 58 20 58 20
 27+  87AE 58 20 58 20
 27+  87B2 58 20 58 20
 27+  87B6 58 20 58 58
 27+  87BA 20 58 20 58
 28+  87BE 58 20 58 58  					db			"X XXX X X XX  X X XX  XXX X XX X"
 28+  87C2 58 20 58 20
 28+  87C6 58 20 58 58
 28+  87CA 20 20 58 20
 28+  87CE 58 20 58 58
 28+  87D2 20 20 58 58
 28+  87D6 58 20 58 20
 28+  87DA 58 58 20 58
 29+  87DE 58 20 20 20  					db			"X   X X X X X X X X X X X X XX X"
 29+  87E2 58 20 58 20
 29+  87E6 58 20 58 20
 29+  87EA 58 20 58 20
 29+  87EE 58 20 58 20
 29+  87F2 58 20 58 20
 29+  87F6 58 20 58 20
 29+  87FA 58 58 20 58
 30+  87FE 58 20 58 58  					db			"X XXX XXX X X XXX XXX X X X  X X"
 30+  8802 58 20 58 58
 30+  8806 58 20 58 20
 30+  880A 58 20 58 58
 30+  880E 58 20 58 58
 30+  8812 58 20 58 20
 30+  8816 58 20 58 20
 30+  881A 20 58 20 58
 31+  881E 58 20 20 20  					db			"X                              X"
 31+  8822 20 20 20 20
 31+  8826 20 20 20 20
 31+  882A 20 20 20 20
 31+  882E 20 20 20 20
 31+  8832 20 20 20 20
 31+  8836 20 20 20 20
 31+  883A 20 20 20 58
 32+  883E 58 58 58 58  					db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 32+  8842 58 58 58 58
 32+  8846 58 58 58 58
 32+  884A 58 58 58 58
 32+  884E 58 58 58 58
 32+  8852 58 58 58 58
 32+  8856 58 58 58 58
 32+  885A 58 58 58 58
 33+  885E
 34+  885E 58 58 58 58  Level2:				db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 34+  8862 58 58 58 58
 34+  8866 58 58 58 58
 34+  886A 58 58 58 58
 34+  886E 58 58 58 58
 34+  8872 58 58 58 58
 34+  8876 58 58 58 58
 34+  887A 58 58 58 58
 35+  887E 58 20 20 20  					db			"X                              X"
 35+  8882 20 20 20 20
 35+  8886 20 20 20 20
 35+  888A 20 20 20 20
 35+  888E 20 20 20 20
 35+  8892 20 20 20 20
 35+  8896 20 20 20 20
 35+  889A 20 20 20 58
 36+  889E 58 20 20 20  					db			"X                              X"
 36+  88A2 20 20 20 20
 36+  88A6 20 20 20 20
 36+  88AA 20 20 20 20
 36+  88AE 20 20 20 20
 36+  88B2 20 20 20 20
 36+  88B6 20 20 20 20
 36+  88BA 20 20 20 58
 37+  88BE 58 20 20 20  					db			"X                              X"
 37+  88C2 20 20 20 20
 37+  88C6 20 20 20 20
 37+  88CA 20 20 20 20
 37+  88CE 20 20 20 20
 37+  88D2 20 20 20 20
 37+  88D6 20 20 20 20
 37+  88DA 20 20 20 58
 38+  88DE 58 20 20 20  					db			"X                              X"
 38+  88E2 20 20 20 20
 38+  88E6 20 20 20 20
 38+  88EA 20 20 20 20
 38+  88EE 20 20 20 20
 38+  88F2 20 20 20 20
 38+  88F6 20 20 20 20
 38+  88FA 20 20 20 58
 39+  88FE 58 20 20 20  					db			"X          1                   X"
 39+  8902 20 20 20 20
 39+  8906 20 20 20 31
 39+  890A 20 20 20 20
 39+  890E 20 20 20 20
 39+  8912 20 20 20 20
 39+  8916 20 20 20 20
 39+  891A 20 20 20 58
 40+  891E 58 20 20 20  					db			"X      XX              XX      X"
 40+  8922 20 20 20 58
 40+  8926 58 20 20 20
 40+  892A 20 20 20 20
 40+  892E 20 20 20 20
 40+  8932 20 20 20 58
 40+  8936 58 20 20 20
 40+  893A 20 20 20 58
 41+  893E 58 20 20 20  					db			"X      XX      *  O    XX      X"
 41+  8942 20 20 20 58
 41+  8946 58 20 20 20
 41+  894A 20 20 20 2A
 41+  894E 20 20 4F 20
 41+  8952 20 20 20 58
 41+  8956 58 20 20 20
 41+  895A 20 20 20 58
 42+  895E 58 20 20 20  					db			"X                              X"
 42+  8962 20 20 20 20
 42+  8966 20 20 20 20
 42+  896A 20 20 20 20
 42+  896E 20 20 20 20
 42+  8972 20 20 20 20
 42+  8976 20 20 20 20
 42+  897A 20 20 20 58
 43+  897E 58 20 20 20  					db			"X              O  *            X"
 43+  8982 20 20 20 20
 43+  8986 20 20 20 20
 43+  898A 20 20 20 4F
 43+  898E 20 20 2A 20
 43+  8992 20 20 20 20
 43+  8996 20 20 20 20
 43+  899A 20 20 20 58
 44+  899E 58 20 20 20  					db			"X                              X"
 44+  89A2 20 20 20 20
 44+  89A6 20 20 20 20
 44+  89AA 20 20 20 20
 44+  89AE 20 20 20 20
 44+  89B2 20 20 20 20
 44+  89B6 20 20 20 20
 44+  89BA 20 20 20 58
 45+  89BE 58 20 20 20  					db			"X     XX                XX     X"
 45+  89C2 20 20 58 58
 45+  89C6 20 20 20 20
 45+  89CA 20 20 20 20
 45+  89CE 20 20 20 20
 45+  89D2 20 20 20 20
 45+  89D6 58 58 20 20
 45+  89DA 20 20 20 58
 46+  89DE 58 20 20 20  					db			"X      XX              XX      X"
 46+  89E2 20 20 20 58
 46+  89E6 58 20 20 20
 46+  89EA 20 20 20 20
 46+  89EE 20 20 20 20
 46+  89F2 20 20 20 58
 46+  89F6 58 20 20 20
 46+  89FA 20 20 20 58
 47+  89FE 58 20 20 20  					db			"X        XXXXXXXXXXXXXX        X"
 47+  8A02 20 20 20 20
 47+  8A06 20 58 58 58
 47+  8A0A 58 58 58 58
 47+  8A0E 58 58 58 58
 47+  8A12 58 58 58 20
 47+  8A16 20 20 20 20
 47+  8A1A 20 20 20 58
 48+  8A1E 58 20 20 20  					db			"X                              X"
 48+  8A22 20 20 20 20
 48+  8A26 20 20 20 20
 48+  8A2A 20 20 20 20
 48+  8A2E 20 20 20 20
 48+  8A32 20 20 20 20
 48+  8A36 20 20 20 20
 48+  8A3A 20 20 20 58
 49+  8A3E 58 20 20 20  					db			"X                              X"
 49+  8A42 20 20 20 20
 49+  8A46 20 20 20 20
 49+  8A4A 20 20 20 20
 49+  8A4E 20 20 20 20
 49+  8A52 20 20 20 20
 49+  8A56 20 20 20 20
 49+  8A5A 20 20 20 58
 50+  8A5E 58 20 20 20  					db			"X                              X"
 50+  8A62 20 20 20 20
 50+  8A66 20 20 20 20
 50+  8A6A 20 20 20 20
 50+  8A6E 20 20 20 20
 50+  8A72 20 20 20 20
 50+  8A76 20 20 20 20
 50+  8A7A 20 20 20 58
 51+  8A7E 58 20 20 20  					db			"X                              X"
 51+  8A82 20 20 20 20
 51+  8A86 20 20 20 20
 51+  8A8A 20 20 20 20
 51+  8A8E 20 20 20 20
 51+  8A92 20 20 20 20
 51+  8A96 20 20 20 20
 51+  8A9A 20 20 20 58
 52+  8A9E 58 20 20 20  					db			"X                              X"
 52+  8AA2 20 20 20 20
 52+  8AA6 20 20 20 20
 52+  8AAA 20 20 20 20
 52+  8AAE 20 20 20 20
 52+  8AB2 20 20 20 20
 52+  8AB6 20 20 20 20
 52+  8ABA 20 20 20 58
 53+  8ABE 58 58 58 58  					db			"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
 53+  8AC2 58 58 58 58
 53+  8AC6 58 58 58 58
 53+  8ACA 58 58 58 58
 53+  8ACE 58 58 58 58
 53+  8AD2 58 58 58 58
 53+  8AD6 58 58 58 58
 53+  8ADA 58 58 58 58
 54+  8ADE
# file closed: levels.asm
126   8ADE              					include		"undo.asm"
# file opened: undo.asm
  1+  8ADE
  2+  8ADE              MAX_UNDO 			equ			16
  3+  8ADE
  4+  8ADE              					struct 		UNDO
  5+  8ADE ~            x 					byte
  6+  8ADE ~            y 					byte
  7+  8ADE ~            proc				word
  8+  8ADE              					ends
  9+  8ADE
 10+  8ADE              					; Input:
 11+  8ADE              					;   HL => undo buffer address
 12+  8ADE              					; Output:
 13+  8ADE              					;   HL => wrapped buffer address
 14+  8ADE
 15+  8ADE 3E 56        WrapUndo:			ld			a, low UndoBufferEnd
 16+  8AE0 BD           					cp			l
 17+  8AE1 C0           					ret			nz
 18+  8AE2 3E C0        					ld			a, high UndoBufferEnd
 19+  8AE4 BC           					cp			h
 20+  8AE5 C0           					ret			nz
 21+  8AE6 21 16 C0     					ld			hl, UndoBuffer
 22+  8AE9 C9           					ret
 23+  8AEA
 24+  8AEA              					; Input:
 25+  8AEA              					;   HL => undo buffer address
 26+  8AEA              					; Output:
 27+  8AEA              					;   HL => wrapped buffer address
 28+  8AEA
 29+  8AEA 3E 16        WrapUndoBackwards:	ld			a, low UndoBuffer
 30+  8AEC BD           					cp			l
 31+  8AED C0           					ret			nz
 32+  8AEE 3E C0        					ld			a, high UndoBuffer
 33+  8AF0 BC           					cp			h
 34+  8AF1 C0           					ret			nz
 35+  8AF2 21 56 C0     					ld			hl, UndoBufferEnd
 36+  8AF5 C9           					ret
 37+  8AF6
 38+  8AF6              					; Input:
 39+  8AF6              					;   C = X
 40+  8AF6              					;   B = Y
 41+  8AF6              					;   DE => undo procedure
 42+  8AF6
 43+  8AF6 2A 12 C0     AddUndo:			ld			hl, (UndoHead)
 44+  8AF9 71           					ld			(hl), c
 45+  8AFA 23           					inc			hl
 46+  8AFB 70           					ld			(hl), b
 47+  8AFC 23           					inc			hl
 48+  8AFD 73           					ld			(hl), e
 49+  8AFE 23           					inc			hl
 50+  8AFF 72           					ld			(hl), d
 51+  8B00 23           					inc			hl
 52+  8B01 CD DE 8A     					call		WrapUndo
 53+  8B04 22 12 C0     					ld			(UndoHead), hl
 54+  8B07 ED 5B 14 C0  					ld			de, (UndoTail)
 55+  8B0B 7B           					ld			a, e
 56+  8B0C BD           					cp			l
 57+  8B0D C0           					ret			nz
 58+  8B0E 7A           					ld			a, d
 59+  8B0F BC           					cp			h
 60+  8B10 C0           					ret			nz
 61+  8B11 11 04 00     					ld			de, 4
 62+  8B14 19           					add			hl, de
 63+  8B15 CD DE 8A     					call		WrapUndo
 64+  8B18 22 14 C0     					ld			(UndoTail), hl
 65+  8B1B C9           					ret
 66+  8B1C
 67+  8B1C 3E 27        UndoPlayerShiftLeft:ld			a, PLAYER_UNDO_SHIFT_LEFT
 68+  8B1E 18 1A        					jr			UndoPlayerMove
 69+  8B20 3E 2A        UndoPlayerShiftRight:ld			a, PLAYER_UNDO_SHIFT_RIGHT
 70+  8B22 18 16        					jr			UndoPlayerMove
 71+  8B24 3E 2D        UndoPlayerShiftUp:	ld			a, PLAYER_UNDO_SHIFT_UP
 72+  8B26 18 12        					jr			UndoPlayerMove
 73+  8B28 3E 30        UndoPlayerShiftDown:ld			a, PLAYER_UNDO_SHIFT_DOWN
 74+  8B2A 18 0E        					jr			UndoPlayerMove
 75+  8B2C 3E 1B        UndoPlayerMoveLeft:	ld			a, PLAYER_UNDO_GO_LEFT
 76+  8B2E 18 0A        					jr			UndoPlayerMove
 77+  8B30 3E 1E        UndoPlayerMoveRight:ld			a, PLAYER_UNDO_GO_RIGHT
 78+  8B32 18 06        					jr			UndoPlayerMove
 79+  8B34 3E 21        UndoPlayerMoveUp:	ld			a, PLAYER_UNDO_GO_UP
 80+  8B36 18 02        					jr			UndoPlayerMove
 81+  8B38 3E 24        UndoPlayerMoveDown:	ld			a, PLAYER_UNDO_GO_DOWN
 82+  8B3A              					;jr			UndoPlayerMove
 83+  8B3A DD 70 01     UndoPlayerMove:		ld			(ix+SPLAYER.y), b
 84+  8B3D DD 71 00     					ld			(ix+SPLAYER.x), c
 85+  8B40 DD 77 02     					ld			(ix+SPLAYER.state), a
 86+  8B43 DD 36 03 0F  					ld			(ix+SPLAYER.time), (8<<PLAYER_MOVE_DELAY_BITS)-1
 87+  8B47 C9           					ret
 88+  8B48
 89+  8B48              					; Input
 90+  8B48              					;   IX => Player
 91+  8B48
 92+  8B48 ED 5B 14 C0  UndoLastMove:		ld			de, (UndoTail)
 93+  8B4C 2A 12 C0     					ld			hl, (UndoHead)
 94+  8B4F 7B           					ld			a, e
 95+  8B50 BD           					cp			l
 96+  8B51 20 03        					jr			nz, .notEmpty
 97+  8B53 7A           					ld			a, d
 98+  8B54 BC           					cp			h
 99+  8B55 C8           					ret			z
100+  8B56 CD EA 8A     .notEmpty:			call		WrapUndoBackwards
101+  8B59 2B           					dec			hl
102+  8B5A 56           					ld			d, (hl)
103+  8B5B 2B           					dec			hl
104+  8B5C 5E           					ld			e, (hl)
105+  8B5D 2B           					dec			hl
106+  8B5E 46           					ld			b, (hl)
107+  8B5F 2B           					dec			hl
108+  8B60 4E           					ld			c, (hl)
109+  8B61 22 12 C0     					ld			(UndoHead), hl
110+  8B64 EB           					ex			de, hl
111+  8B65 E9           					jp			(hl)
112+  8B66
# file closed: undo.asm
127   8B66              					include		"util.asm"
# file opened: util.asm
  1+  8B66
  2+  8B66                              ; Input:
  3+  8B66                              ;   A = number to convert
  4+  8B66                              ;   C = X координата
  5+  8B66                              ;   B = Y координата
  6+  8B66                              ;   D = атрибут
  7+  8B66                              ;   E = 1=пропустить незначащие нули, 0=не пропускать
  8+  8B66
  9+  8B66 21 98 8B     DrawNumber: 	ld			hl, .attr+1
 10+  8B69 72           				ld			(hl), d
 11+  8B6A              				; преобразование число->строка
 12+  8B6A D9           				exx
 13+  8B6B 21 AD 8B     				ld          hl, .buffer
 14+  8B6E 0E 9C                        ld          c, -100
 15+  8B70 CD A3 8B                     call        .divide
 16+  8B73 0E F6                        ld          c, -10
 17+  8B75 CD A3 8B                     call        .divide
 18+  8B78 0E FF                        ld          c, -1
 19+  8B7A CD A3 8B                     call        .divide
 20+  8B7D D9                           exx
 21+  8B7E              				; пропускаем незначащие нули
 22+  8B7E 21 AD 8B                     ld          hl, .buffer
 23+  8B81 AF                           xor         a
 24+  8B82 BB                           cp			e
 25+  8B83 28 08                        jr			z, .draw
 26+  8B85                              ; пропускаем ли первый символ?
 27+  8B85 B6                           or          (hl)
 28+  8B86 20 05                        jr          nz, .draw
 29+  8B88 23                           inc         hl
 30+  8B89                              ; пропускаем ли второй символ?
 31+  8B89 B6                           or          (hl)
 32+  8B8A 20 01                        jr          nz, .draw
 33+  8B8C 23                           inc         hl
 34+  8B8D EB           .draw:        	ex			de, hl
 35+  8B8E 1A           .drawLoop:		ld          a, (de)
 36+  8B8F FE FF                        cp          0xff
 37+  8B91 C8                           ret         z
 38+  8B92 D5                           push		de
 39+  8B93 C5                           push		bc
 40+  8B94 C6 30        				add			a, '0'
 41+  8B96 6F                           ld			l, a
 42+  8B97 3E 00        .attr:			ld			a, 0
 43+  8B99 CD 51 84                     call		DrawChar
 44+  8B9C C1                           pop			bc
 45+  8B9D D1                           pop			de
 46+  8B9E 0C                           inc			c			; увеличили X
 47+  8B9F 13                           inc         de			; следующий символ в буфере
 48+  8BA0 18 EC                        jr          .drawLoop
 49+  8BA2 C9                           ret
 50+  8BA3
 51+  8BA3              				; деление циклом
 52+  8BA3              				; вход: A - делимое, С - делитель
 53+  8BA3              				; результат: B - частное, A - остаток
 54+  8BA3 06 FF        .divide:        ld          b, -1
 55+  8BA5 04           .divideLoop:    inc         b
 56+  8BA6 81                           add         a, c
 57+  8BA7 38 FC                        jr          c, .divideLoop
 58+  8BA9 91                           sub         c
 59+  8BAA              				; записываем результат в буфер
 60+  8BAA 70                           ld          (hl), b
 61+  8BAB 23                           inc         hl
 62+  8BAC C9                           ret
 63+  8BAD
 64+  8BAD 3F 3F 3F FF  .buffer:        db          '???',0xff
 65+  8BB1
# file closed: util.asm
128   8BB1              					include		"player.asm"
# file opened: player.asm
  1+  8BB1
  2+  8BB1              PLAYER_IDLE			equ			0
  3+  8BB1              PLAYER_GO_LEFT		equ			3
  4+  8BB1              PLAYER_GO_RIGHT		equ			6
  5+  8BB1              PLAYER_GO_UP		equ			9
  6+  8BB1              PLAYER_GO_DOWN		equ			12
  7+  8BB1              PLAYER_SHIFT_LEFT	equ			15
  8+  8BB1              PLAYER_SHIFT_RIGHT	equ			18
  9+  8BB1              PLAYER_SHIFT_UP		equ			21
 10+  8BB1              PLAYER_SHIFT_DOWN	equ			24
 11+  8BB1              PLAYER_UNDO_GO_LEFT	equ			27
 12+  8BB1              PLAYER_UNDO_GO_RIGHT equ		30
 13+  8BB1              PLAYER_UNDO_GO_UP	equ			33
 14+  8BB1              PLAYER_UNDO_GO_DOWN equ			36
 15+  8BB1              PLAYER_UNDO_SHIFT_LEFT	equ		39
 16+  8BB1              PLAYER_UNDO_SHIFT_RIGHT equ		42
 17+  8BB1              PLAYER_UNDO_SHIFT_UP	equ		45
 18+  8BB1              PLAYER_UNDO_SHIFT_DOWN equ		48
 19+  8BB1
 20+  8BB1              ;PLAYER_MAX_X		equ 		31
 21+  8BB1              ;PLAYER_MAX_Y		equ			23
 22+  8BB1
 23+  8BB1              PLAYER_MOVE_DELAY_BITS equ		1
 24+  8BB1
 25+  8BB1              PLAYER_ATTR			equ			FLOOR_ATTR
 26+  8BB1
 27+  8BB1              					struct 		SPLAYER
 28+  8BB1 ~            x 					byte
 29+  8BB1 ~            y 					byte
 30+  8BB1 ~            state				byte
 31+  8BB1 ~            time				byte
 32+  8BB1              					ends
 33+  8BB1
 34+  8BB1 05 02 00 00  player1:			SPLAYER		5,2,PLAYER_IDLE,0
 35+  8BB5
 36+  8BB5 DD 36 02 00  InitPlayer:			ld			(ix+SPLAYER.state), PLAYER_IDLE
 37+  8BB9 C9           					ret
 38+  8BBA
 39+  8BBA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 40+  8BBA
 41+  8BBA              					macro		DRAWHORZ left, shift
 42+  8BBA ~
 43+  8BBA ~            					ld			a, (ix+SPLAYER.time)
 44+  8BBA ~            					dup			PLAYER_MOVE_DELAY_BITS
 45+  8BBA ~            					rrca
 46+  8BBA ~            					edup
 47+  8BBA ~            					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
 48+  8BBA ~            					inc			a
 49+  8BBA ~            				if left
 50+  8BBA ~            					neg
 51+  8BBA ~            				endif
 52+  8BBA ~            					ld			e, a
 53+  8BBA ~
 54+  8BBA ~            				if shift
 55+  8BBA ~            					and			3
 56+  8BBA ~            					ld			h, 0x01
 57+  8BBA ~            					ld			l, a
 58+  8BBA ~            					ld			d, 0
 59+  8BBA ~
 60+  8BBA ~            					push		af
 61+  8BBA ~
 62+  8BBA ~            					push		bc
 63+  8BBA ~            					push		de
 64+  8BBA ~            					push		hl
 65+  8BBA ~            					ld			a, SPHERE_ATTR
 66+  8BBA ~            					call		DrawSprite
 67+  8BBA ~            					pop			hl
 68+  8BBA ~            					pop			de
 69+  8BBA ~            					pop			bc
 70+  8BBA ~
 71+  8BBA ~            					push		bc
 72+  8BBA ~            					push		de
 73+  8BBA ~            				  if left
 74+  8BBA ~            					dec			c
 75+  8BBA ~            					ld			a, 8
 76+  8BBA ~            					add			a, e
 77+  8BBA ~            				  else
 78+  8BBA ~            					inc			c
 79+  8BBA ~            					ld			a, e
 80+  8BBA ~            					sub			8
 81+  8BBA ~            				  endif
 82+  8BBA ~            					ld			e, a
 83+  8BBA ~            					ld			a, SPHERE_ATTR
 84+  8BBA ~            					call		DrawSprite
 85+  8BBA ~            					pop			de
 86+  8BBA ~            					pop			bc
 87+  8BBA ~
 88+  8BBA ~            					pop			af
 89+  8BBA ~            				endif ; shift
 90+  8BBA ~
 91+  8BBA ~            					rrca
 92+  8BBA ~            					and			1
 93+  8BBA ~            				if left
 94+  8BBA ~            					inc			a
 95+  8BBA ~            				else
 96+  8BBA ~            					add			a, 3
 97+  8BBA ~            				endif
 98+  8BBA ~            					ld			l, a
 99+  8BBA ~            					ld			h, 0
100+  8BBA ~            					ld			d, h
101+  8BBA ~
102+  8BBA ~            					push		hl
103+  8BBA ~            					push		de
104+  8BBA ~            					push		bc
105+  8BBA ~            					ld			a, PLAYER_ATTR
106+  8BBA ~            				if left
107+  8BBA ~            					inc			c
108+  8BBA ~            				else
109+  8BBA ~            					dec			c
110+  8BBA ~            				endif
111+  8BBA ~            					call		DrawSprite
112+  8BBA ~            					pop			bc
113+  8BBA ~            					pop			de
114+  8BBA ~            					pop			hl
115+  8BBA ~
116+  8BBA ~            				if shift
117+  8BBA ~            					ld			a, DRAW_OR
118+  8BBA ~            					call		SetDrawSpriteMode
119+  8BBA ~            				endif
120+  8BBA ~
121+  8BBA ~            					ld			a, e
122+  8BBA ~            				if left
123+  8BBA ~            					add			a, 8
124+  8BBA ~            				else
125+  8BBA ~            					sub			8
126+  8BBA ~            				endif
127+  8BBA ~            					ld			e, a
128+  8BBA ~            					ld			a, PLAYER_ATTR
129+  8BBA ~            				if shift
130+  8BBA ~            					call		DrawSprite
131+  8BBA ~            					ld			a, DRAW_REPLACE
132+  8BBA ~            					jp			SetDrawSpriteMode
133+  8BBA ~            				else
134+  8BBA ~            					jp			DrawSprite
135+  8BBA ~            				endif
136+  8BBA ~
137+  8BBA              					endm
138+  8BBA
139+  8BBA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
140+  8BBA
141+  8BBA              					macro		DRAWVERT up, shift
142+  8BBA ~
143+  8BBA ~            					ld			a, (ix+SPLAYER.time)
144+  8BBA ~            					dup			PLAYER_MOVE_DELAY_BITS
145+  8BBA ~            					rrca
146+  8BBA ~            					edup
147+  8BBA ~            					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
148+  8BBA ~            					inc			a
149+  8BBA ~            				if up
150+  8BBA ~            					neg
151+  8BBA ~            				endif
152+  8BBA ~            					ld			d, a
153+  8BBA ~            					ld			e, 0
154+  8BBA ~
155+  8BBA ~            					and			3
156+  8BBA ~
157+  8BBA ~            				if shift
158+  8BBA ~            					push		af
159+  8BBA ~            					push		de
160+  8BBA ~            					push		bc
161+  8BBA ~            					ld			h, 1
162+  8BBA ~            					ld			l, a
163+  8BBA ~            					ld			a, SPHERE_ATTR
164+  8BBA ~            					call		DrawSprite
165+  8BBA ~            					pop			bc
166+  8BBA ~            					pop			de
167+  8BBA ~            					pop			af
168+  8BBA ~            			 	endif ; shift
169+  8BBA ~
170+  8BBA ~            					add			a, 5
171+  8BBA ~            					ld			l, a
172+  8BBA ~            					ld			h, e
173+  8BBA ~
174+  8BBA ~            					ld			a, PLAYER_ATTR
175+  8BBA ~            				if up
176+  8BBA ~            					inc			b
177+  8BBA ~            				else
178+  8BBA ~            					dec			b
179+  8BBA ~            				endif
180+  8BBA ~            					push		de
181+  8BBA ~            					push		bc
182+  8BBA ~            					call		DrawSprite
183+  8BBA ~            					pop			bc
184+  8BBA ~            					pop			de
185+  8BBA ~
186+  8BBA ~            ;				if shift
187+  8BBA ~            ;					ld			a, (ix+SPLAYER.state)
188+  8BBA ~            ;					cp			PLAYER_UNDO_SHIFT_DOWN
189+  8BBA ~            ;					jr			z, .goDown
190+  8BBA ~            ;					cp			PLAYER_UNDO_SHIFT_UP
191+  8BBA ~            ;					ret			nz
192+  8BBA ~            ;.goUp:
193+  8BBA ~            ;					ld			a, d
194+  8BBA ~            ;					jr			.doneGo
195+  8BBA ~            ;.goDown:
196+  8BBA ~            ;					ld			a, d
197+  8BBA ~            ;					sub			8
198+  8BBA ~            ;.doneGo:
199+  8BBA ~            ;				else
200+  8BBA ~            				if !up
201+  8BBA ~            					ld			a, (ix+SPLAYER.state)
202+  8BBA ~            					cp			PLAYER_UNDO_GO_DOWN
203+  8BBA ~            					ret			nz
204+  8BBA ~            					ld			a, d
205+  8BBA ~            					and			7
206+  8BBA ~            					ret			z
207+  8BBA ~            				endif
208+  8BBA ~
209+  8BBA ~            					ld			a, d
210+  8BBA ~            					add			a, 8
211+  8BBA ~            					ld			d, a
212+  8BBA ~            					jp			DrawEmptyByte
213+  8BBA ~
214+  8BBA              					endm
215+  8BBA
216+  8BBA              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
217+  8BBA
218+  8BBA DD 4E 00     DrawPlayer:			ld			c, (ix+SPLAYER.x)
219+  8BBD DD 46 01     					ld			b, (ix+SPLAYER.y)
220+  8BC0
221+  8BC0 DD 6E 02     					ld			l, (ix+SPLAYER.state)
222+  8BC3 26 00        					ld			h, 0
223+  8BC5 11 CA 8B     					ld			de, .jumpTable
224+  8BC8 19           					add			hl, de
225+  8BC9 E9           					jp			(hl)
226+  8BCA C3 FD 8B     .jumpTable:			jp			.drawIdle
227+  8BCD C3 3C 8D     					jp			.drawLeft
228+  8BD0 C3 16 8D     					jp			.drawRight
229+  8BD3 C3 8E 8D     					jp			.drawUp
230+  8BD6 C3 63 8D     					jp			.drawDown
231+  8BD9 C3 07 8C     					jp			.drawShiftLeft
232+  8BDC C3 5A 8C     					jp			.drawShiftRight
233+  8BDF C3 AC 8C     					jp			.drawShiftUp
234+  8BE2 C3 DD 8C     					jp			.drawShiftDown
235+  8BE5 C3 3C 8D     					jp			.drawLeft
236+  8BE8 C3 16 8D     					jp			.drawRight
237+  8BEB C3 8E 8D     					jp			.drawUp
238+  8BEE C3 63 8D     					jp			.drawDown
239+  8BF1 C3 07 8C     					jp			.drawShiftLeft
240+  8BF4 C3 5A 8C     					jp			.drawShiftRight
241+  8BF7 C3 AC 8C     					jp			.drawShiftUp
242+  8BFA C3 DD 8C     					jp			.drawShiftDown
243+  8BFD
244+  8BFD 21 00 00     .drawIdle:			ld			hl, 0x0000
245+  8C00 54           					ld			d, h
246+  8C01 5C           					ld			e, h
247+  8C02 3E 4F        					ld			a, PLAYER_ATTR
248+  8C04 C3 02 83     					jp			DrawSprite
249+  8C07
250+  8C07              .drawShiftLeft:		DRAWHORZ 	1, 1
250+  8C07             >
250+  8C07 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
250+  8C0A             >					dup			PLAYER_MOVE_DELAY_BITS
250+  8C0A 0F          >					rrca
250+  8C0B             >					edup
250+  8C0B E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
250+  8C0D 3C          >					inc			a
250+  8C0E             >				if 1
250+  8C0E ED 44       >					neg
250+  8C10             >				endif
250+  8C10 5F          >					ld			e, a
250+  8C11             >
250+  8C11             >				if 1
250+  8C11 E6 03       >					and			3
250+  8C13 26 01       >					ld			h, 0x01
250+  8C15 6F          >					ld			l, a
250+  8C16 16 00       >					ld			d, 0
250+  8C18             >
250+  8C18 F5          >					push		af
250+  8C19             >
250+  8C19 C5          >					push		bc
250+  8C1A D5          >					push		de
250+  8C1B E5          >					push		hl
250+  8C1C 3E 4E       >					ld			a, SPHERE_ATTR
250+  8C1E CD 02 83    >					call		DrawSprite
250+  8C21 E1          >					pop			hl
250+  8C22 D1          >					pop			de
250+  8C23 C1          >					pop			bc
250+  8C24             >
250+  8C24 C5          >					push		bc
250+  8C25 D5          >					push		de
250+  8C26             >				  if 1
250+  8C26 0D          >					dec			c
250+  8C27 3E 08       >					ld			a, 8
250+  8C29 83          >					add			a, e
250+  8C2A             >				  else
250+  8C2A ~           >					inc			c
250+  8C2A ~           >					ld			a, e
250+  8C2A ~           >					sub			8
250+  8C2A             >				  endif
250+  8C2A 5F          >					ld			e, a
250+  8C2B 3E 4E       >					ld			a, SPHERE_ATTR
250+  8C2D CD 02 83    >					call		DrawSprite
250+  8C30 D1          >					pop			de
250+  8C31 C1          >					pop			bc
250+  8C32             >
250+  8C32 F1          >					pop			af
250+  8C33             >				endif ; shift
250+  8C33             >
250+  8C33 0F          >					rrca
250+  8C34 E6 01       >					and			1
250+  8C36             >				if 1
250+  8C36 3C          >					inc			a
250+  8C37             >				else
250+  8C37 ~           >					add			a, 3
250+  8C37             >				endif
250+  8C37 6F          >					ld			l, a
250+  8C38 26 00       >					ld			h, 0
250+  8C3A 54          >					ld			d, h
250+  8C3B             >
250+  8C3B E5          >					push		hl
250+  8C3C D5          >					push		de
250+  8C3D C5          >					push		bc
250+  8C3E 3E 4F       >					ld			a, PLAYER_ATTR
250+  8C40             >				if 1
250+  8C40 0C          >					inc			c
250+  8C41             >				else
250+  8C41 ~           >					dec			c
250+  8C41             >				endif
250+  8C41 CD 02 83    >					call		DrawSprite
250+  8C44 C1          >					pop			bc
250+  8C45 D1          >					pop			de
250+  8C46 E1          >					pop			hl
250+  8C47             >
250+  8C47             >				if 1
250+  8C47 3E B6       >					ld			a, DRAW_OR
250+  8C49 CD D1 82    >					call		SetDrawSpriteMode
250+  8C4C             >				endif
250+  8C4C             >
250+  8C4C 7B          >					ld			a, e
250+  8C4D             >				if 1
250+  8C4D C6 08       >					add			a, 8
250+  8C4F             >				else
250+  8C4F ~           >					sub			8
250+  8C4F             >				endif
250+  8C4F 5F          >					ld			e, a
250+  8C50 3E 4F       >					ld			a, PLAYER_ATTR
250+  8C52             >				if 1
250+  8C52 CD 02 83    >					call		DrawSprite
250+  8C55 3E 00       >					ld			a, DRAW_REPLACE
250+  8C57 C3 D1 82    >					jp			SetDrawSpriteMode
250+  8C5A             >				else
250+  8C5A ~           >					jp			DrawSprite
250+  8C5A             >				endif
250+  8C5A             >
251+  8C5A              .drawShiftRight:	DRAWHORZ 	0, 1
251+  8C5A             >
251+  8C5A DD 7E 03    >					ld			a, (ix+SPLAYER.time)
251+  8C5D             >					dup			PLAYER_MOVE_DELAY_BITS
251+  8C5D 0F          >					rrca
251+  8C5E             >					edup
251+  8C5E E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
251+  8C60 3C          >					inc			a
251+  8C61             >				if 0
251+  8C61 ~           >					neg
251+  8C61             >				endif
251+  8C61 5F          >					ld			e, a
251+  8C62             >
251+  8C62             >				if 1
251+  8C62 E6 03       >					and			3
251+  8C64 26 01       >					ld			h, 0x01
251+  8C66 6F          >					ld			l, a
251+  8C67 16 00       >					ld			d, 0
251+  8C69             >
251+  8C69 F5          >					push		af
251+  8C6A             >
251+  8C6A C5          >					push		bc
251+  8C6B D5          >					push		de
251+  8C6C E5          >					push		hl
251+  8C6D 3E 4E       >					ld			a, SPHERE_ATTR
251+  8C6F CD 02 83    >					call		DrawSprite
251+  8C72 E1          >					pop			hl
251+  8C73 D1          >					pop			de
251+  8C74 C1          >					pop			bc
251+  8C75             >
251+  8C75 C5          >					push		bc
251+  8C76 D5          >					push		de
251+  8C77             >				  if 0
251+  8C77 ~           >					dec			c
251+  8C77 ~           >					ld			a, 8
251+  8C77 ~           >					add			a, e
251+  8C77             >				  else
251+  8C77 0C          >					inc			c
251+  8C78 7B          >					ld			a, e
251+  8C79 D6 08       >					sub			8
251+  8C7B             >				  endif
251+  8C7B 5F          >					ld			e, a
251+  8C7C 3E 4E       >					ld			a, SPHERE_ATTR
251+  8C7E CD 02 83    >					call		DrawSprite
251+  8C81 D1          >					pop			de
251+  8C82 C1          >					pop			bc
251+  8C83             >
251+  8C83 F1          >					pop			af
251+  8C84             >				endif ; shift
251+  8C84             >
251+  8C84 0F          >					rrca
251+  8C85 E6 01       >					and			1
251+  8C87             >				if 0
251+  8C87 ~           >					inc			a
251+  8C87             >				else
251+  8C87 C6 03       >					add			a, 3
251+  8C89             >				endif
251+  8C89 6F          >					ld			l, a
251+  8C8A 26 00       >					ld			h, 0
251+  8C8C 54          >					ld			d, h
251+  8C8D             >
251+  8C8D E5          >					push		hl
251+  8C8E D5          >					push		de
251+  8C8F C5          >					push		bc
251+  8C90 3E 4F       >					ld			a, PLAYER_ATTR
251+  8C92             >				if 0
251+  8C92 ~           >					inc			c
251+  8C92             >				else
251+  8C92 0D          >					dec			c
251+  8C93             >				endif
251+  8C93 CD 02 83    >					call		DrawSprite
251+  8C96 C1          >					pop			bc
251+  8C97 D1          >					pop			de
251+  8C98 E1          >					pop			hl
251+  8C99             >
251+  8C99             >				if 1
251+  8C99 3E B6       >					ld			a, DRAW_OR
251+  8C9B CD D1 82    >					call		SetDrawSpriteMode
251+  8C9E             >				endif
251+  8C9E             >
251+  8C9E 7B          >					ld			a, e
251+  8C9F             >				if 0
251+  8C9F ~           >					add			a, 8
251+  8C9F             >				else
251+  8C9F D6 08       >					sub			8
251+  8CA1             >				endif
251+  8CA1 5F          >					ld			e, a
251+  8CA2 3E 4F       >					ld			a, PLAYER_ATTR
251+  8CA4             >				if 1
251+  8CA4 CD 02 83    >					call		DrawSprite
251+  8CA7 3E 00       >					ld			a, DRAW_REPLACE
251+  8CA9 C3 D1 82    >					jp			SetDrawSpriteMode
251+  8CAC             >				else
251+  8CAC ~           >					jp			DrawSprite
251+  8CAC             >				endif
251+  8CAC             >
252+  8CAC              .drawShiftUp:		DRAWVERT	1, 1
252+  8CAC             >
252+  8CAC DD 7E 03    >					ld			a, (ix+SPLAYER.time)
252+  8CAF             >					dup			PLAYER_MOVE_DELAY_BITS
252+  8CAF 0F          >					rrca
252+  8CB0             >					edup
252+  8CB0 E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
252+  8CB2 3C          >					inc			a
252+  8CB3             >				if 1
252+  8CB3 ED 44       >					neg
252+  8CB5             >				endif
252+  8CB5 57          >					ld			d, a
252+  8CB6 1E 00       >					ld			e, 0
252+  8CB8             >
252+  8CB8 E6 03       >					and			3
252+  8CBA             >
252+  8CBA             >				if 1
252+  8CBA F5          >					push		af
252+  8CBB D5          >					push		de
252+  8CBC C5          >					push		bc
252+  8CBD 26 01       >					ld			h, 1
252+  8CBF 6F          >					ld			l, a
252+  8CC0 3E 4E       >					ld			a, SPHERE_ATTR
252+  8CC2 CD 02 83    >					call		DrawSprite
252+  8CC5 C1          >					pop			bc
252+  8CC6 D1          >					pop			de
252+  8CC7 F1          >					pop			af
252+  8CC8             >			 	endif ; shift
252+  8CC8             >
252+  8CC8 C6 05       >					add			a, 5
252+  8CCA 6F          >					ld			l, a
252+  8CCB 63          >					ld			h, e
252+  8CCC             >
252+  8CCC 3E 4F       >					ld			a, PLAYER_ATTR
252+  8CCE             >				if 1
252+  8CCE 04          >					inc			b
252+  8CCF             >				else
252+  8CCF ~           >					dec			b
252+  8CCF             >				endif
252+  8CCF D5          >					push		de
252+  8CD0 C5          >					push		bc
252+  8CD1 CD 02 83    >					call		DrawSprite
252+  8CD4 C1          >					pop			bc
252+  8CD5 D1          >					pop			de
252+  8CD6             >
252+  8CD6             >;				if shift
252+  8CD6             >;					ld			a, (ix+SPLAYER.state)
252+  8CD6             >;					cp			PLAYER_UNDO_SHIFT_DOWN
252+  8CD6             >;					jr			z, .goDown
252+  8CD6             >;					cp			PLAYER_UNDO_SHIFT_UP
252+  8CD6             >;					ret			nz
252+  8CD6             >;.goUp:
252+  8CD6             >;					ld			a, d
252+  8CD6             >;					jr			.doneGo
252+  8CD6             >;.goDown:
252+  8CD6             >;					ld			a, d
252+  8CD6             >;					sub			8
252+  8CD6             >;.doneGo:
252+  8CD6             >;				else
252+  8CD6             >				if !1
252+  8CD6 ~           >					ld			a, (ix+SPLAYER.state)
252+  8CD6 ~           >					cp			PLAYER_UNDO_GO_DOWN
252+  8CD6 ~           >					ret			nz
252+  8CD6 ~           >					ld			a, d
252+  8CD6 ~           >					and			7
252+  8CD6 ~           >					ret			z
252+  8CD6             >				endif
252+  8CD6             >
252+  8CD6 7A          >					ld			a, d
252+  8CD7 C6 08       >					add			a, 8
252+  8CD9 57          >					ld			d, a
252+  8CDA C3 C3 82    >					jp			DrawEmptyByte
252+  8CDD             >
253+  8CDD              .drawShiftDown:		DRAWVERT	0, 1
253+  8CDD             >
253+  8CDD DD 7E 03    >					ld			a, (ix+SPLAYER.time)
253+  8CE0             >					dup			PLAYER_MOVE_DELAY_BITS
253+  8CE0 0F          >					rrca
253+  8CE1             >					edup
253+  8CE1 E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
253+  8CE3 3C          >					inc			a
253+  8CE4             >				if 0
253+  8CE4 ~           >					neg
253+  8CE4             >				endif
253+  8CE4 57          >					ld			d, a
253+  8CE5 1E 00       >					ld			e, 0
253+  8CE7             >
253+  8CE7 E6 03       >					and			3
253+  8CE9             >
253+  8CE9             >				if 1
253+  8CE9 F5          >					push		af
253+  8CEA D5          >					push		de
253+  8CEB C5          >					push		bc
253+  8CEC 26 01       >					ld			h, 1
253+  8CEE 6F          >					ld			l, a
253+  8CEF 3E 4E       >					ld			a, SPHERE_ATTR
253+  8CF1 CD 02 83    >					call		DrawSprite
253+  8CF4 C1          >					pop			bc
253+  8CF5 D1          >					pop			de
253+  8CF6 F1          >					pop			af
253+  8CF7             >			 	endif ; shift
253+  8CF7             >
253+  8CF7 C6 05       >					add			a, 5
253+  8CF9 6F          >					ld			l, a
253+  8CFA 63          >					ld			h, e
253+  8CFB             >
253+  8CFB 3E 4F       >					ld			a, PLAYER_ATTR
253+  8CFD             >				if 0
253+  8CFD ~           >					inc			b
253+  8CFD             >				else
253+  8CFD 05          >					dec			b
253+  8CFE             >				endif
253+  8CFE D5          >					push		de
253+  8CFF C5          >					push		bc
253+  8D00 CD 02 83    >					call		DrawSprite
253+  8D03 C1          >					pop			bc
253+  8D04 D1          >					pop			de
253+  8D05             >
253+  8D05             >;				if shift
253+  8D05             >;					ld			a, (ix+SPLAYER.state)
253+  8D05             >;					cp			PLAYER_UNDO_SHIFT_DOWN
253+  8D05             >;					jr			z, .goDown
253+  8D05             >;					cp			PLAYER_UNDO_SHIFT_UP
253+  8D05             >;					ret			nz
253+  8D05             >;.goUp:
253+  8D05             >;					ld			a, d
253+  8D05             >;					jr			.doneGo
253+  8D05             >;.goDown:
253+  8D05             >;					ld			a, d
253+  8D05             >;					sub			8
253+  8D05             >;.doneGo:
253+  8D05             >;				else
253+  8D05             >				if !0
253+  8D05 DD 7E 02    >					ld			a, (ix+SPLAYER.state)
253+  8D08 FE 24       >					cp			PLAYER_UNDO_GO_DOWN
253+  8D0A C0          >					ret			nz
253+  8D0B 7A          >					ld			a, d
253+  8D0C E6 07       >					and			7
253+  8D0E C8          >					ret			z
253+  8D0F             >				endif
253+  8D0F             >
253+  8D0F 7A          >					ld			a, d
253+  8D10 C6 08       >					add			a, 8
253+  8D12 57          >					ld			d, a
253+  8D13 C3 C3 82    >					jp			DrawEmptyByte
253+  8D16             >
254+  8D16
255+  8D16              .drawRight:			DRAWHORZ	0, 0
255+  8D16             >
255+  8D16 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
255+  8D19             >					dup			PLAYER_MOVE_DELAY_BITS
255+  8D19 0F          >					rrca
255+  8D1A             >					edup
255+  8D1A E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
255+  8D1C 3C          >					inc			a
255+  8D1D             >				if 0
255+  8D1D ~           >					neg
255+  8D1D             >				endif
255+  8D1D 5F          >					ld			e, a
255+  8D1E             >
255+  8D1E             >				if 0
255+  8D1E ~           >					and			3
255+  8D1E ~           >					ld			h, 0x01
255+  8D1E ~           >					ld			l, a
255+  8D1E ~           >					ld			d, 0
255+  8D1E ~           >
255+  8D1E ~           >					push		af
255+  8D1E ~           >
255+  8D1E ~           >					push		bc
255+  8D1E ~           >					push		de
255+  8D1E ~           >					push		hl
255+  8D1E ~           >					ld			a, SPHERE_ATTR
255+  8D1E ~           >					call		DrawSprite
255+  8D1E ~           >					pop			hl
255+  8D1E ~           >					pop			de
255+  8D1E ~           >					pop			bc
255+  8D1E ~           >
255+  8D1E ~           >					push		bc
255+  8D1E ~           >					push		de
255+  8D1E ~           >				  if left
255+  8D1E ~           >					dec			c
255+  8D1E ~           >					ld			a, 8
255+  8D1E ~           >					add			a, e
255+  8D1E ~           >				  else
255+  8D1E ~           >					inc			c
255+  8D1E ~           >					ld			a, e
255+  8D1E ~           >					sub			8
255+  8D1E ~           >				  endif
255+  8D1E ~           >					ld			e, a
255+  8D1E ~           >					ld			a, SPHERE_ATTR
255+  8D1E ~           >					call		DrawSprite
255+  8D1E ~           >					pop			de
255+  8D1E ~           >					pop			bc
255+  8D1E ~           >
255+  8D1E ~           >					pop			af
255+  8D1E             >				endif ; shift
255+  8D1E             >
255+  8D1E 0F          >					rrca
255+  8D1F E6 01       >					and			1
255+  8D21             >				if 0
255+  8D21 ~           >					inc			a
255+  8D21             >				else
255+  8D21 C6 03       >					add			a, 3
255+  8D23             >				endif
255+  8D23 6F          >					ld			l, a
255+  8D24 26 00       >					ld			h, 0
255+  8D26 54          >					ld			d, h
255+  8D27             >
255+  8D27 E5          >					push		hl
255+  8D28 D5          >					push		de
255+  8D29 C5          >					push		bc
255+  8D2A 3E 4F       >					ld			a, PLAYER_ATTR
255+  8D2C             >				if 0
255+  8D2C ~           >					inc			c
255+  8D2C             >				else
255+  8D2C 0D          >					dec			c
255+  8D2D             >				endif
255+  8D2D CD 02 83    >					call		DrawSprite
255+  8D30 C1          >					pop			bc
255+  8D31 D1          >					pop			de
255+  8D32 E1          >					pop			hl
255+  8D33             >
255+  8D33             >				if 0
255+  8D33 ~           >					ld			a, DRAW_OR
255+  8D33 ~           >					call		SetDrawSpriteMode
255+  8D33             >				endif
255+  8D33             >
255+  8D33 7B          >					ld			a, e
255+  8D34             >				if 0
255+  8D34 ~           >					add			a, 8
255+  8D34             >				else
255+  8D34 D6 08       >					sub			8
255+  8D36             >				endif
255+  8D36 5F          >					ld			e, a
255+  8D37 3E 4F       >					ld			a, PLAYER_ATTR
255+  8D39             >				if 0
255+  8D39 ~           >					call		DrawSprite
255+  8D39 ~           >					ld			a, DRAW_REPLACE
255+  8D39 ~           >					jp			SetDrawSpriteMode
255+  8D39             >				else
255+  8D39 C3 02 83    >					jp			DrawSprite
255+  8D3C             >				endif
255+  8D3C             >
256+  8D3C              .drawLeft:			DRAWHORZ	1, 0
256+  8D3C             >
256+  8D3C DD 7E 03    >					ld			a, (ix+SPLAYER.time)
256+  8D3F             >					dup			PLAYER_MOVE_DELAY_BITS
256+  8D3F 0F          >					rrca
256+  8D40             >					edup
256+  8D40 E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
256+  8D42 3C          >					inc			a
256+  8D43             >				if 1
256+  8D43 ED 44       >					neg
256+  8D45             >				endif
256+  8D45 5F          >					ld			e, a
256+  8D46             >
256+  8D46             >				if 0
256+  8D46 ~           >					and			3
256+  8D46 ~           >					ld			h, 0x01
256+  8D46 ~           >					ld			l, a
256+  8D46 ~           >					ld			d, 0
256+  8D46 ~           >
256+  8D46 ~           >					push		af
256+  8D46 ~           >
256+  8D46 ~           >					push		bc
256+  8D46 ~           >					push		de
256+  8D46 ~           >					push		hl
256+  8D46 ~           >					ld			a, SPHERE_ATTR
256+  8D46 ~           >					call		DrawSprite
256+  8D46 ~           >					pop			hl
256+  8D46 ~           >					pop			de
256+  8D46 ~           >					pop			bc
256+  8D46 ~           >
256+  8D46 ~           >					push		bc
256+  8D46 ~           >					push		de
256+  8D46 ~           >				  if left
256+  8D46 ~           >					dec			c
256+  8D46 ~           >					ld			a, 8
256+  8D46 ~           >					add			a, e
256+  8D46 ~           >				  else
256+  8D46 ~           >					inc			c
256+  8D46 ~           >					ld			a, e
256+  8D46 ~           >					sub			8
256+  8D46 ~           >				  endif
256+  8D46 ~           >					ld			e, a
256+  8D46 ~           >					ld			a, SPHERE_ATTR
256+  8D46 ~           >					call		DrawSprite
256+  8D46 ~           >					pop			de
256+  8D46 ~           >					pop			bc
256+  8D46 ~           >
256+  8D46 ~           >					pop			af
256+  8D46             >				endif ; shift
256+  8D46             >
256+  8D46 0F          >					rrca
256+  8D47 E6 01       >					and			1
256+  8D49             >				if 1
256+  8D49 3C          >					inc			a
256+  8D4A             >				else
256+  8D4A ~           >					add			a, 3
256+  8D4A             >				endif
256+  8D4A 6F          >					ld			l, a
256+  8D4B 26 00       >					ld			h, 0
256+  8D4D 54          >					ld			d, h
256+  8D4E             >
256+  8D4E E5          >					push		hl
256+  8D4F D5          >					push		de
256+  8D50 C5          >					push		bc
256+  8D51 3E 4F       >					ld			a, PLAYER_ATTR
256+  8D53             >				if 1
256+  8D53 0C          >					inc			c
256+  8D54             >				else
256+  8D54 ~           >					dec			c
256+  8D54             >				endif
256+  8D54 CD 02 83    >					call		DrawSprite
256+  8D57 C1          >					pop			bc
256+  8D58 D1          >					pop			de
256+  8D59 E1          >					pop			hl
256+  8D5A             >
256+  8D5A             >				if 0
256+  8D5A ~           >					ld			a, DRAW_OR
256+  8D5A ~           >					call		SetDrawSpriteMode
256+  8D5A             >				endif
256+  8D5A             >
256+  8D5A 7B          >					ld			a, e
256+  8D5B             >				if 1
256+  8D5B C6 08       >					add			a, 8
256+  8D5D             >				else
256+  8D5D ~           >					sub			8
256+  8D5D             >				endif
256+  8D5D 5F          >					ld			e, a
256+  8D5E 3E 4F       >					ld			a, PLAYER_ATTR
256+  8D60             >				if 0
256+  8D60 ~           >					call		DrawSprite
256+  8D60 ~           >					ld			a, DRAW_REPLACE
256+  8D60 ~           >					jp			SetDrawSpriteMode
256+  8D60             >				else
256+  8D60 C3 02 83    >					jp			DrawSprite
256+  8D63             >				endif
256+  8D63             >
257+  8D63              .drawDown:			DRAWVERT	0, 0
257+  8D63             >
257+  8D63 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
257+  8D66             >					dup			PLAYER_MOVE_DELAY_BITS
257+  8D66 0F          >					rrca
257+  8D67             >					edup
257+  8D67 E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
257+  8D69 3C          >					inc			a
257+  8D6A             >				if 0
257+  8D6A ~           >					neg
257+  8D6A             >				endif
257+  8D6A 57          >					ld			d, a
257+  8D6B 1E 00       >					ld			e, 0
257+  8D6D             >
257+  8D6D E6 03       >					and			3
257+  8D6F             >
257+  8D6F             >				if 0
257+  8D6F ~           >					push		af
257+  8D6F ~           >					push		de
257+  8D6F ~           >					push		bc
257+  8D6F ~           >					ld			h, 1
257+  8D6F ~           >					ld			l, a
257+  8D6F ~           >					ld			a, SPHERE_ATTR
257+  8D6F ~           >					call		DrawSprite
257+  8D6F ~           >					pop			bc
257+  8D6F ~           >					pop			de
257+  8D6F ~           >					pop			af
257+  8D6F             >			 	endif ; shift
257+  8D6F             >
257+  8D6F C6 05       >					add			a, 5
257+  8D71 6F          >					ld			l, a
257+  8D72 63          >					ld			h, e
257+  8D73             >
257+  8D73 3E 4F       >					ld			a, PLAYER_ATTR
257+  8D75             >				if 0
257+  8D75 ~           >					inc			b
257+  8D75             >				else
257+  8D75 05          >					dec			b
257+  8D76             >				endif
257+  8D76 D5          >					push		de
257+  8D77 C5          >					push		bc
257+  8D78 CD 02 83    >					call		DrawSprite
257+  8D7B C1          >					pop			bc
257+  8D7C D1          >					pop			de
257+  8D7D             >
257+  8D7D             >;				if shift
257+  8D7D             >;					ld			a, (ix+SPLAYER.state)
257+  8D7D             >;					cp			PLAYER_UNDO_SHIFT_DOWN
257+  8D7D             >;					jr			z, .goDown
257+  8D7D             >;					cp			PLAYER_UNDO_SHIFT_UP
257+  8D7D             >;					ret			nz
257+  8D7D             >;.goUp:
257+  8D7D             >;					ld			a, d
257+  8D7D             >;					jr			.doneGo
257+  8D7D             >;.goDown:
257+  8D7D             >;					ld			a, d
257+  8D7D             >;					sub			8
257+  8D7D             >;.doneGo:
257+  8D7D             >;				else
257+  8D7D             >				if !0
257+  8D7D DD 7E 02    >					ld			a, (ix+SPLAYER.state)
257+  8D80 FE 24       >					cp			PLAYER_UNDO_GO_DOWN
257+  8D82 C0          >					ret			nz
257+  8D83 7A          >					ld			a, d
257+  8D84 E6 07       >					and			7
257+  8D86 C8          >					ret			z
257+  8D87             >				endif
257+  8D87             >
257+  8D87 7A          >					ld			a, d
257+  8D88 C6 08       >					add			a, 8
257+  8D8A 57          >					ld			d, a
257+  8D8B C3 C3 82    >					jp			DrawEmptyByte
257+  8D8E             >
258+  8D8E              .drawUp:			DRAWVERT	1, 0
258+  8D8E             >
258+  8D8E DD 7E 03    >					ld			a, (ix+SPLAYER.time)
258+  8D91             >					dup			PLAYER_MOVE_DELAY_BITS
258+  8D91 0F          >					rrca
258+  8D92             >					edup
258+  8D92 E6 7F       >					and			(1<<(8-PLAYER_MOVE_DELAY_BITS))-1
258+  8D94 3C          >					inc			a
258+  8D95             >				if 1
258+  8D95 ED 44       >					neg
258+  8D97             >				endif
258+  8D97 57          >					ld			d, a
258+  8D98 1E 00       >					ld			e, 0
258+  8D9A             >
258+  8D9A E6 03       >					and			3
258+  8D9C             >
258+  8D9C             >				if 0
258+  8D9C ~           >					push		af
258+  8D9C ~           >					push		de
258+  8D9C ~           >					push		bc
258+  8D9C ~           >					ld			h, 1
258+  8D9C ~           >					ld			l, a
258+  8D9C ~           >					ld			a, SPHERE_ATTR
258+  8D9C ~           >					call		DrawSprite
258+  8D9C ~           >					pop			bc
258+  8D9C ~           >					pop			de
258+  8D9C ~           >					pop			af
258+  8D9C             >			 	endif ; shift
258+  8D9C             >
258+  8D9C C6 05       >					add			a, 5
258+  8D9E 6F          >					ld			l, a
258+  8D9F 63          >					ld			h, e
258+  8DA0             >
258+  8DA0 3E 4F       >					ld			a, PLAYER_ATTR
258+  8DA2             >				if 1
258+  8DA2 04          >					inc			b
258+  8DA3             >				else
258+  8DA3 ~           >					dec			b
258+  8DA3             >				endif
258+  8DA3 D5          >					push		de
258+  8DA4 C5          >					push		bc
258+  8DA5 CD 02 83    >					call		DrawSprite
258+  8DA8 C1          >					pop			bc
258+  8DA9 D1          >					pop			de
258+  8DAA             >
258+  8DAA             >;				if shift
258+  8DAA             >;					ld			a, (ix+SPLAYER.state)
258+  8DAA             >;					cp			PLAYER_UNDO_SHIFT_DOWN
258+  8DAA             >;					jr			z, .goDown
258+  8DAA             >;					cp			PLAYER_UNDO_SHIFT_UP
258+  8DAA             >;					ret			nz
258+  8DAA             >;.goUp:
258+  8DAA             >;					ld			a, d
258+  8DAA             >;					jr			.doneGo
258+  8DAA             >;.goDown:
258+  8DAA             >;					ld			a, d
258+  8DAA             >;					sub			8
258+  8DAA             >;.doneGo:
258+  8DAA             >;				else
258+  8DAA             >				if !1
258+  8DAA ~           >					ld			a, (ix+SPLAYER.state)
258+  8DAA ~           >					cp			PLAYER_UNDO_GO_DOWN
258+  8DAA ~           >					ret			nz
258+  8DAA ~           >					ld			a, d
258+  8DAA ~           >					and			7
258+  8DAA ~           >					ret			z
258+  8DAA             >				endif
258+  8DAA             >
258+  8DAA 7A          >					ld			a, d
258+  8DAB C6 08       >					add			a, 8
258+  8DAD 57          >					ld			d, a
258+  8DAE C3 C3 82    >					jp			DrawEmptyByte
258+  8DB1             >
259+  8DB1
260+  8DB1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
261+  8DB1
262+  8DB1              					macro 		PLAYERGO state, shift
263+  8DB1 ~
264+  8DB1 ~            					ld			c, (ix+SPLAYER.x)
265+  8DB1 ~            					ld			b, (ix+SPLAYER.y)
266+  8DB1 ~            				if state == PLAYER_GO_UP
267+  8DB1 ~            					dec			b
268+  8DB1 ~            				elseif state == PLAYER_GO_DOWN
269+  8DB1 ~            					inc			b
270+  8DB1 ~            				elseif state == PLAYER_GO_LEFT
271+  8DB1 ~            					dec			c
272+  8DB1 ~            				elseif state == PLAYER_GO_RIGHT
273+  8DB1 ~            					inc			c
274+  8DB1 ~            				endif
275+  8DB1 ~            					call		CheckBlocked
276+  8DB1 ~            					jr			nz, .tryShift
277+  8DB1 ~            				if state == PLAYER_GO_UP
278+  8DB1 ~            					ld			de, UndoPlayerMoveUp
279+  8DB1 ~            				elseif state == PLAYER_GO_DOWN
280+  8DB1 ~            					ld			de, UndoPlayerMoveDown
281+  8DB1 ~            				elseif state == PLAYER_GO_LEFT
282+  8DB1 ~            					ld			de, UndoPlayerMoveLeft
283+  8DB1 ~            				elseif state == PLAYER_GO_RIGHT
284+  8DB1 ~            					ld			de, UndoPlayerMoveRight
285+  8DB1 ~            				endif
286+  8DB1 ~            					call		AddUndo
287+  8DB1 ~            					ld			a, state
288+  8DB1 ~            .doGo:			if state == PLAYER_GO_DOWN || state == PLAYER_GO_UP
289+  8DB1 ~            					ld			(ix+SPLAYER.y), b
290+  8DB1 ~            				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
291+  8DB1 ~            					ld			(ix+SPLAYER.x), c
292+  8DB1 ~            				endif
293+  8DB1 ~            					ld			(ix+SPLAYER.state), a
294+  8DB1 ~            					ld			(ix+SPLAYER.time), 0
295+  8DB1 ~            					ret
296+  8DB1 ~            .tryShift:			cp			'O'
297+  8DB1 ~            					ret			nz
298+  8DB1 ~            				if state == PLAYER_GO_UP
299+  8DB1 ~            					dec			b
300+  8DB1 ~            				elseif state == PLAYER_GO_DOWN
301+  8DB1 ~            					inc			b
302+  8DB1 ~            				elseif state == PLAYER_GO_LEFT
303+  8DB1 ~            					dec			c
304+  8DB1 ~            				elseif state == PLAYER_GO_RIGHT
305+  8DB1 ~            					inc			c
306+  8DB1 ~            				endif
307+  8DB1 ~            					call		CheckBlocked
308+  8DB1 ~            					ret			nz
309+  8DB1 ~            					ld			(hl), 'O'
310+  8DB1 ~            				if state == PLAYER_GO_UP
311+  8DB1 ~            					inc			b
312+  8DB1 ~            					ld			de, 32
313+  8DB1 ~            					add			hl, de
314+  8DB1 ~            					ld			de, UndoPlayerShiftUp
315+  8DB1 ~            				elseif state == PLAYER_GO_DOWN
316+  8DB1 ~            					dec			b
317+  8DB1 ~            					ld			de, -32
318+  8DB1 ~            					add			hl, de
319+  8DB1 ~            					ld			de, UndoPlayerShiftDown
320+  8DB1 ~            				elseif state == PLAYER_GO_LEFT
321+  8DB1 ~            					inc			c
322+  8DB1 ~            					inc			hl
323+  8DB1 ~            					ld			de, UndoPlayerShiftLeft
324+  8DB1 ~            				elseif state == PLAYER_GO_RIGHT
325+  8DB1 ~            					dec			c
326+  8DB1 ~            					dec			hl
327+  8DB1 ~            					ld			de, UndoPlayerShiftRight
328+  8DB1 ~            				endif
329+  8DB1 ~            					ld			(hl), ' '
330+  8DB1 ~            					call		AddUndo
331+  8DB1 ~            					ld			a, shift
332+  8DB1 ~            					jr			.doGo
333+  8DB1 ~
334+  8DB1              					endm
335+  8DB1
336+  8DB1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
337+  8DB1
338+  8DB1              					macro		UNDOMOVE state
339+  8DB1 ~
340+  8DB1 ~            					ld			a, (ix+SPLAYER.time)
341+  8DB1 ~            					dec			a
342+  8DB1 ~            					cp			0xff
343+  8DB1 ~            					jr			z, .undoMoveDone
344+  8DB1 ~            					ld			(ix+SPLAYER.time), a
345+  8DB1 ~            					ret
346+  8DB1 ~            .undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
347+  8DB1 ~            					ld			(ix+SPLAYER.time), 0
348+  8DB1 ~            				if state == PLAYER_UNDO_GO_LEFT
349+  8DB1 ~            					inc			(ix+SPLAYER.x)
350+  8DB1 ~            					jp			.idle
351+  8DB1 ~            				elseif state == PLAYER_UNDO_GO_RIGHT
352+  8DB1 ~            					dec			(ix+SPLAYER.x)
353+  8DB1 ~            					jp			.idle
354+  8DB1 ~            				elseif state == PLAYER_UNDO_GO_UP
355+  8DB1 ~            					inc			(ix+SPLAYER.y)
356+  8DB1 ~            					jp			.idle
357+  8DB1 ~            				elseif state == PLAYER_UNDO_GO_DOWN
358+  8DB1 ~            					ld			c, (ix+SPLAYER.x)
359+  8DB1 ~            					ld			b, (ix+SPLAYER.y)
360+  8DB1 ~            					dec			b
361+  8DB1 ~            					ld			(ix+SPLAYER.y), b
362+  8DB1 ~            					ld			d, 8
363+  8DB1 ~            					jp			DrawEmptyByte
364+  8DB1 ~            				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
365+  8DB1 ~            					ld			c, (ix+SPLAYER.x)
366+  8DB1 ~            					ld			b, (ix+SPLAYER.y)
367+  8DB1 ~            					push		bc
368+  8DB1 ~            					ld			a, SPHERE_ATTR
369+  8DB1 ~            					ld			de, 0
370+  8DB1 ~            					ld			hl, 0x100
371+  8DB1 ~            					call		DrawSprite
372+  8DB1 ~            					pop			bc
373+  8DB1 ~            				  if state == PLAYER_UNDO_SHIFT_LEFT
374+  8DB1 ~            					inc			c
375+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
376+  8DB1 ~            					dec			c
377+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_UP
378+  8DB1 ~            					inc			b
379+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_DOWN
380+  8DB1 ~            					dec			b
381+  8DB1 ~            				  endif
382+  8DB1 ~            					ld			(ix+SPLAYER.x), c
383+  8DB1 ~            				  if state == PLAYER_UNDO_SHIFT_LEFT
384+  8DB1 ~            					dec			c
385+  8DB1 ~            					dec			c
386+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
387+  8DB1 ~            					inc			c
388+  8DB1 ~            					inc			c
389+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_UP
390+  8DB1 ~            					dec			b
391+  8DB1 ~            					dec			b
392+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_DOWN
393+  8DB1 ~            					inc			b
394+  8DB1 ~            					inc			b
395+  8DB1 ~            				  endif
396+  8DB1 ~            					call		GetLevelAddr
397+  8DB1 ~            					ld			(hl), ' '
398+  8DB1 ~            				  if state == PLAYER_UNDO_SHIFT_LEFT
399+  8DB1 ~            					inc			hl
400+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
401+  8DB1 ~            				  	dec			hl
402+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_UP
403+  8DB1 ~            				  	ld			de, 32
404+  8DB1 ~            					add			hl, de
405+  8DB1 ~            				  elseif state == PLAYER_UNDO_SHIFT_DOWN
406+  8DB1 ~            				  	ld			de, -32
407+  8DB1 ~            					add			hl, de
408+  8DB1 ~            				  endif
409+  8DB1 ~            					ld			(hl), 'O'
410+  8DB1 ~            					ld			a, FLOOR_ATTR
411+  8DB1 ~            					ld			de, 0
412+  8DB1 ~            					ld			hl, 0x201
413+  8DB1 ~            					call		DrawSprite
414+  8DB1 ~            					jp			.idle
415+  8DB1 ~            				endif
416+  8DB1 ~
417+  8DB1              					endm
418+  8DB1
419+  8DB1              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
420+  8DB1
421+  8DB1 DD 6E 02     HandlePlayer:		ld			l, (ix+SPLAYER.state)
422+  8DB4 26 00        					ld			h, 0
423+  8DB6 01 BB 8D     					ld			bc, .jumpTable
424+  8DB9 09           					add			hl, bc
425+  8DBA E9           					jp			(hl)
426+  8DBB C3 85 8F     .jumpTable:			jp			.idle
427+  8DBE C3 71 8F     					jp			.move
428+  8DC1 C3 71 8F     					jp			.move
429+  8DC4 C3 71 8F     					jp			.move
430+  8DC7 C3 71 8F     					jp			.move
431+  8DCA C3 71 8F     					jp			.move
432+  8DCD C3 71 8F     					jp			.move
433+  8DD0 C3 71 8F     					jp			.move
434+  8DD3 C3 71 8F     					jp			.move
435+  8DD6 C3 EE 8D     					jp			.undoMoveLeft
436+  8DD9 C3 08 8E     					jp			.undoMoveRight
437+  8DDC C3 22 8E     					jp			.undoMoveUp
438+  8DDF C3 3C 8E     					jp			.undoMoveDown
439+  8DE2 C3 5F 8E     					jp			.undoShiftLeft
440+  8DE5 C3 A2 8E     					jp			.undoShiftRight
441+  8DE8 C3 E5 8E     					jp			.undoShiftUp
442+  8DEB C3 2B 8F     					jp			.undoShiftDown
443+  8DEE
444+  8DEE              .undoMoveLeft:		UNDOMOVE	PLAYER_UNDO_GO_LEFT
444+  8DEE             >
444+  8DEE DD 7E 03    >					ld			a, (ix+SPLAYER.time)
444+  8DF1 3D          >					dec			a
444+  8DF2 FE FF       >					cp			0xff
444+  8DF4 28 04       >					jr			z, .undoMoveDone
444+  8DF6 DD 77 03    >					ld			(ix+SPLAYER.time), a
444+  8DF9 C9          >					ret
444+  8DFA DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
444+  8DFE DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
444+  8E02             >				if PLAYER_UNDO_GO_LEFT == PLAYER_UNDO_GO_LEFT
444+  8E02 DD 34 00    >					inc			(ix+SPLAYER.x)
444+  8E05 C3 85 8F    >					jp			.idle
444+  8E08             >				elseif state == PLAYER_UNDO_GO_RIGHT
444+  8E08 ~           >					dec			(ix+SPLAYER.x)
444+  8E08 ~           >					jp			.idle
444+  8E08             >				elseif state == PLAYER_UNDO_GO_UP
444+  8E08 ~           >					inc			(ix+SPLAYER.y)
444+  8E08 ~           >					jp			.idle
444+  8E08             >				elseif state == PLAYER_UNDO_GO_DOWN
444+  8E08 ~           >					ld			c, (ix+SPLAYER.x)
444+  8E08 ~           >					ld			b, (ix+SPLAYER.y)
444+  8E08 ~           >					dec			b
444+  8E08 ~           >					ld			(ix+SPLAYER.y), b
444+  8E08 ~           >					ld			d, 8
444+  8E08 ~           >					jp			DrawEmptyByte
444+  8E08             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
444+  8E08 ~           >					ld			c, (ix+SPLAYER.x)
444+  8E08 ~           >					ld			b, (ix+SPLAYER.y)
444+  8E08 ~           >					push		bc
444+  8E08 ~           >					ld			a, SPHERE_ATTR
444+  8E08 ~           >					ld			de, 0
444+  8E08 ~           >					ld			hl, 0x100
444+  8E08 ~           >					call		DrawSprite
444+  8E08 ~           >					pop			bc
444+  8E08 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
444+  8E08 ~           >					inc			c
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
444+  8E08 ~           >					dec			c
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
444+  8E08 ~           >					inc			b
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
444+  8E08 ~           >					dec			b
444+  8E08 ~           >				  endif
444+  8E08 ~           >					ld			(ix+SPLAYER.x), c
444+  8E08 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
444+  8E08 ~           >					dec			c
444+  8E08 ~           >					dec			c
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
444+  8E08 ~           >					inc			c
444+  8E08 ~           >					inc			c
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
444+  8E08 ~           >					dec			b
444+  8E08 ~           >					dec			b
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
444+  8E08 ~           >					inc			b
444+  8E08 ~           >					inc			b
444+  8E08 ~           >				  endif
444+  8E08 ~           >					call		GetLevelAddr
444+  8E08 ~           >					ld			(hl), ' '
444+  8E08 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
444+  8E08 ~           >					inc			hl
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
444+  8E08 ~           >				  	dec			hl
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
444+  8E08 ~           >				  	ld			de, 32
444+  8E08 ~           >					add			hl, de
444+  8E08 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
444+  8E08 ~           >				  	ld			de, -32
444+  8E08 ~           >					add			hl, de
444+  8E08 ~           >				  endif
444+  8E08 ~           >					ld			(hl), 'O'
444+  8E08 ~           >					ld			a, FLOOR_ATTR
444+  8E08 ~           >					ld			de, 0
444+  8E08 ~           >					ld			hl, 0x201
444+  8E08 ~           >					call		DrawSprite
444+  8E08 ~           >					jp			.idle
444+  8E08             >				endif
444+  8E08             >
445+  8E08              .undoMoveRight:		UNDOMOVE	PLAYER_UNDO_GO_RIGHT
445+  8E08             >
445+  8E08 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
445+  8E0B 3D          >					dec			a
445+  8E0C FE FF       >					cp			0xff
445+  8E0E 28 04       >					jr			z, .undoMoveDone
445+  8E10 DD 77 03    >					ld			(ix+SPLAYER.time), a
445+  8E13 C9          >					ret
445+  8E14 DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
445+  8E18 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
445+  8E1C             >				if PLAYER_UNDO_GO_RIGHT == PLAYER_UNDO_GO_LEFT
445+  8E1C ~           >					inc			(ix+SPLAYER.x)
445+  8E1C ~           >					jp			.idle
445+  8E1C             >				elseif state == PLAYER_UNDO_GO_RIGHT
445+  8E1C DD 35 00    >					dec			(ix+SPLAYER.x)
445+  8E1F C3 85 8F    >					jp			.idle
445+  8E22             >				elseif state == PLAYER_UNDO_GO_UP
445+  8E22 ~           >					inc			(ix+SPLAYER.y)
445+  8E22 ~           >					jp			.idle
445+  8E22             >				elseif state == PLAYER_UNDO_GO_DOWN
445+  8E22 ~           >					ld			c, (ix+SPLAYER.x)
445+  8E22 ~           >					ld			b, (ix+SPLAYER.y)
445+  8E22 ~           >					dec			b
445+  8E22 ~           >					ld			(ix+SPLAYER.y), b
445+  8E22 ~           >					ld			d, 8
445+  8E22 ~           >					jp			DrawEmptyByte
445+  8E22             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
445+  8E22 ~           >					ld			c, (ix+SPLAYER.x)
445+  8E22 ~           >					ld			b, (ix+SPLAYER.y)
445+  8E22 ~           >					push		bc
445+  8E22 ~           >					ld			a, SPHERE_ATTR
445+  8E22 ~           >					ld			de, 0
445+  8E22 ~           >					ld			hl, 0x100
445+  8E22 ~           >					call		DrawSprite
445+  8E22 ~           >					pop			bc
445+  8E22 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
445+  8E22 ~           >					inc			c
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
445+  8E22 ~           >					dec			c
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
445+  8E22 ~           >					inc			b
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
445+  8E22 ~           >					dec			b
445+  8E22 ~           >				  endif
445+  8E22 ~           >					ld			(ix+SPLAYER.x), c
445+  8E22 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
445+  8E22 ~           >					dec			c
445+  8E22 ~           >					dec			c
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
445+  8E22 ~           >					inc			c
445+  8E22 ~           >					inc			c
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
445+  8E22 ~           >					dec			b
445+  8E22 ~           >					dec			b
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
445+  8E22 ~           >					inc			b
445+  8E22 ~           >					inc			b
445+  8E22 ~           >				  endif
445+  8E22 ~           >					call		GetLevelAddr
445+  8E22 ~           >					ld			(hl), ' '
445+  8E22 ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
445+  8E22 ~           >					inc			hl
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
445+  8E22 ~           >				  	dec			hl
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
445+  8E22 ~           >				  	ld			de, 32
445+  8E22 ~           >					add			hl, de
445+  8E22 ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
445+  8E22 ~           >				  	ld			de, -32
445+  8E22 ~           >					add			hl, de
445+  8E22 ~           >				  endif
445+  8E22 ~           >					ld			(hl), 'O'
445+  8E22 ~           >					ld			a, FLOOR_ATTR
445+  8E22 ~           >					ld			de, 0
445+  8E22 ~           >					ld			hl, 0x201
445+  8E22 ~           >					call		DrawSprite
445+  8E22 ~           >					jp			.idle
445+  8E22             >				endif
445+  8E22             >
446+  8E22              .undoMoveUp:		UNDOMOVE	PLAYER_UNDO_GO_UP
446+  8E22             >
446+  8E22 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
446+  8E25 3D          >					dec			a
446+  8E26 FE FF       >					cp			0xff
446+  8E28 28 04       >					jr			z, .undoMoveDone
446+  8E2A DD 77 03    >					ld			(ix+SPLAYER.time), a
446+  8E2D C9          >					ret
446+  8E2E DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
446+  8E32 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
446+  8E36             >				if PLAYER_UNDO_GO_UP == PLAYER_UNDO_GO_LEFT
446+  8E36 ~           >					inc			(ix+SPLAYER.x)
446+  8E36 ~           >					jp			.idle
446+  8E36             >				elseif state == PLAYER_UNDO_GO_RIGHT
446+  8E36 ~           >					dec			(ix+SPLAYER.x)
446+  8E36 ~           >					jp			.idle
446+  8E36             >				elseif state == PLAYER_UNDO_GO_UP
446+  8E36 DD 34 01    >					inc			(ix+SPLAYER.y)
446+  8E39 C3 85 8F    >					jp			.idle
446+  8E3C             >				elseif state == PLAYER_UNDO_GO_DOWN
446+  8E3C ~           >					ld			c, (ix+SPLAYER.x)
446+  8E3C ~           >					ld			b, (ix+SPLAYER.y)
446+  8E3C ~           >					dec			b
446+  8E3C ~           >					ld			(ix+SPLAYER.y), b
446+  8E3C ~           >					ld			d, 8
446+  8E3C ~           >					jp			DrawEmptyByte
446+  8E3C             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
446+  8E3C ~           >					ld			c, (ix+SPLAYER.x)
446+  8E3C ~           >					ld			b, (ix+SPLAYER.y)
446+  8E3C ~           >					push		bc
446+  8E3C ~           >					ld			a, SPHERE_ATTR
446+  8E3C ~           >					ld			de, 0
446+  8E3C ~           >					ld			hl, 0x100
446+  8E3C ~           >					call		DrawSprite
446+  8E3C ~           >					pop			bc
446+  8E3C ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
446+  8E3C ~           >					inc			c
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
446+  8E3C ~           >					dec			c
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
446+  8E3C ~           >					inc			b
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
446+  8E3C ~           >					dec			b
446+  8E3C ~           >				  endif
446+  8E3C ~           >					ld			(ix+SPLAYER.x), c
446+  8E3C ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
446+  8E3C ~           >					dec			c
446+  8E3C ~           >					dec			c
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
446+  8E3C ~           >					inc			c
446+  8E3C ~           >					inc			c
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
446+  8E3C ~           >					dec			b
446+  8E3C ~           >					dec			b
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
446+  8E3C ~           >					inc			b
446+  8E3C ~           >					inc			b
446+  8E3C ~           >				  endif
446+  8E3C ~           >					call		GetLevelAddr
446+  8E3C ~           >					ld			(hl), ' '
446+  8E3C ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
446+  8E3C ~           >					inc			hl
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
446+  8E3C ~           >				  	dec			hl
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
446+  8E3C ~           >				  	ld			de, 32
446+  8E3C ~           >					add			hl, de
446+  8E3C ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
446+  8E3C ~           >				  	ld			de, -32
446+  8E3C ~           >					add			hl, de
446+  8E3C ~           >				  endif
446+  8E3C ~           >					ld			(hl), 'O'
446+  8E3C ~           >					ld			a, FLOOR_ATTR
446+  8E3C ~           >					ld			de, 0
446+  8E3C ~           >					ld			hl, 0x201
446+  8E3C ~           >					call		DrawSprite
446+  8E3C ~           >					jp			.idle
446+  8E3C             >				endif
446+  8E3C             >
447+  8E3C              .undoMoveDown:		UNDOMOVE	PLAYER_UNDO_GO_DOWN
447+  8E3C             >
447+  8E3C DD 7E 03    >					ld			a, (ix+SPLAYER.time)
447+  8E3F 3D          >					dec			a
447+  8E40 FE FF       >					cp			0xff
447+  8E42 28 04       >					jr			z, .undoMoveDone
447+  8E44 DD 77 03    >					ld			(ix+SPLAYER.time), a
447+  8E47 C9          >					ret
447+  8E48 DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
447+  8E4C DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
447+  8E50             >				if PLAYER_UNDO_GO_DOWN == PLAYER_UNDO_GO_LEFT
447+  8E50 ~           >					inc			(ix+SPLAYER.x)
447+  8E50 ~           >					jp			.idle
447+  8E50             >				elseif state == PLAYER_UNDO_GO_RIGHT
447+  8E50 ~           >					dec			(ix+SPLAYER.x)
447+  8E50 ~           >					jp			.idle
447+  8E50             >				elseif state == PLAYER_UNDO_GO_UP
447+  8E50 ~           >					inc			(ix+SPLAYER.y)
447+  8E50 ~           >					jp			.idle
447+  8E50             >				elseif state == PLAYER_UNDO_GO_DOWN
447+  8E50 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
447+  8E53 DD 46 01    >					ld			b, (ix+SPLAYER.y)
447+  8E56 05          >					dec			b
447+  8E57 DD 70 01    >					ld			(ix+SPLAYER.y), b
447+  8E5A 16 08       >					ld			d, 8
447+  8E5C C3 C3 82    >					jp			DrawEmptyByte
447+  8E5F             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
447+  8E5F ~           >					ld			c, (ix+SPLAYER.x)
447+  8E5F ~           >					ld			b, (ix+SPLAYER.y)
447+  8E5F ~           >					push		bc
447+  8E5F ~           >					ld			a, SPHERE_ATTR
447+  8E5F ~           >					ld			de, 0
447+  8E5F ~           >					ld			hl, 0x100
447+  8E5F ~           >					call		DrawSprite
447+  8E5F ~           >					pop			bc
447+  8E5F ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
447+  8E5F ~           >					inc			c
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
447+  8E5F ~           >					dec			c
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
447+  8E5F ~           >					inc			b
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
447+  8E5F ~           >					dec			b
447+  8E5F ~           >				  endif
447+  8E5F ~           >					ld			(ix+SPLAYER.x), c
447+  8E5F ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
447+  8E5F ~           >					dec			c
447+  8E5F ~           >					dec			c
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
447+  8E5F ~           >					inc			c
447+  8E5F ~           >					inc			c
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
447+  8E5F ~           >					dec			b
447+  8E5F ~           >					dec			b
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
447+  8E5F ~           >					inc			b
447+  8E5F ~           >					inc			b
447+  8E5F ~           >				  endif
447+  8E5F ~           >					call		GetLevelAddr
447+  8E5F ~           >					ld			(hl), ' '
447+  8E5F ~           >				  if state == PLAYER_UNDO_SHIFT_LEFT
447+  8E5F ~           >					inc			hl
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
447+  8E5F ~           >				  	dec			hl
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_UP
447+  8E5F ~           >				  	ld			de, 32
447+  8E5F ~           >					add			hl, de
447+  8E5F ~           >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
447+  8E5F ~           >				  	ld			de, -32
447+  8E5F ~           >					add			hl, de
447+  8E5F ~           >				  endif
447+  8E5F ~           >					ld			(hl), 'O'
447+  8E5F ~           >					ld			a, FLOOR_ATTR
447+  8E5F ~           >					ld			de, 0
447+  8E5F ~           >					ld			hl, 0x201
447+  8E5F ~           >					call		DrawSprite
447+  8E5F ~           >					jp			.idle
447+  8E5F             >				endif
447+  8E5F             >
448+  8E5F
449+  8E5F              .undoShiftLeft:		UNDOMOVE	PLAYER_UNDO_SHIFT_LEFT
449+  8E5F             >
449+  8E5F DD 7E 03    >					ld			a, (ix+SPLAYER.time)
449+  8E62 3D          >					dec			a
449+  8E63 FE FF       >					cp			0xff
449+  8E65 28 04       >					jr			z, .undoMoveDone
449+  8E67 DD 77 03    >					ld			(ix+SPLAYER.time), a
449+  8E6A C9          >					ret
449+  8E6B DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
449+  8E6F DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
449+  8E73             >				if PLAYER_UNDO_SHIFT_LEFT == PLAYER_UNDO_GO_LEFT
449+  8E73 ~           >					inc			(ix+SPLAYER.x)
449+  8E73 ~           >					jp			.idle
449+  8E73             >				elseif state == PLAYER_UNDO_GO_RIGHT
449+  8E73 ~           >					dec			(ix+SPLAYER.x)
449+  8E73 ~           >					jp			.idle
449+  8E73             >				elseif state == PLAYER_UNDO_GO_UP
449+  8E73 ~           >					inc			(ix+SPLAYER.y)
449+  8E73 ~           >					jp			.idle
449+  8E73             >				elseif state == PLAYER_UNDO_GO_DOWN
449+  8E73 ~           >					ld			c, (ix+SPLAYER.x)
449+  8E73 ~           >					ld			b, (ix+SPLAYER.y)
449+  8E73 ~           >					dec			b
449+  8E73 ~           >					ld			(ix+SPLAYER.y), b
449+  8E73 ~           >					ld			d, 8
449+  8E73 ~           >					jp			DrawEmptyByte
449+  8E73             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
449+  8E73 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
449+  8E76 DD 46 01    >					ld			b, (ix+SPLAYER.y)
449+  8E79 C5          >					push		bc
449+  8E7A 3E 4E       >					ld			a, SPHERE_ATTR
449+  8E7C 11 00 00    >					ld			de, 0
449+  8E7F 21 00 01    >					ld			hl, 0x100
449+  8E82 CD 02 83    >					call		DrawSprite
449+  8E85 C1          >					pop			bc
449+  8E86             >				  if PLAYER_UNDO_SHIFT_LEFT == PLAYER_UNDO_SHIFT_LEFT
449+  8E86 0C          >					inc			c
449+  8E87             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
449+  8E87 ~           >					dec			c
449+  8E87             >				  elseif state == PLAYER_UNDO_SHIFT_UP
449+  8E87 ~           >					inc			b
449+  8E87             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
449+  8E87 ~           >					dec			b
449+  8E87             >				  endif
449+  8E87 DD 71 00    >					ld			(ix+SPLAYER.x), c
449+  8E8A             >				  if PLAYER_UNDO_SHIFT_LEFT == PLAYER_UNDO_SHIFT_LEFT
449+  8E8A 0D          >					dec			c
449+  8E8B 0D          >					dec			c
449+  8E8C             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
449+  8E8C ~           >					inc			c
449+  8E8C ~           >					inc			c
449+  8E8C             >				  elseif state == PLAYER_UNDO_SHIFT_UP
449+  8E8C ~           >					dec			b
449+  8E8C ~           >					dec			b
449+  8E8C             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
449+  8E8C ~           >					inc			b
449+  8E8C ~           >					inc			b
449+  8E8C             >				  endif
449+  8E8C CD 92 85    >					call		GetLevelAddr
449+  8E8F 36 20       >					ld			(hl), ' '
449+  8E91             >				  if PLAYER_UNDO_SHIFT_LEFT == PLAYER_UNDO_SHIFT_LEFT
449+  8E91 23          >					inc			hl
449+  8E92             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
449+  8E92 ~           >				  	dec			hl
449+  8E92             >				  elseif state == PLAYER_UNDO_SHIFT_UP
449+  8E92 ~           >				  	ld			de, 32
449+  8E92 ~           >					add			hl, de
449+  8E92             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
449+  8E92 ~           >				  	ld			de, -32
449+  8E92 ~           >					add			hl, de
449+  8E92             >				  endif
449+  8E92 36 4F       >					ld			(hl), 'O'
449+  8E94 3E 4F       >					ld			a, FLOOR_ATTR
449+  8E96 11 00 00    >					ld			de, 0
449+  8E99 21 01 02    >					ld			hl, 0x201
449+  8E9C CD 02 83    >					call		DrawSprite
449+  8E9F C3 85 8F    >					jp			.idle
449+  8EA2             >				endif
449+  8EA2             >
450+  8EA2              .undoShiftRight:	UNDOMOVE	PLAYER_UNDO_SHIFT_RIGHT
450+  8EA2             >
450+  8EA2 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
450+  8EA5 3D          >					dec			a
450+  8EA6 FE FF       >					cp			0xff
450+  8EA8 28 04       >					jr			z, .undoMoveDone
450+  8EAA DD 77 03    >					ld			(ix+SPLAYER.time), a
450+  8EAD C9          >					ret
450+  8EAE DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
450+  8EB2 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
450+  8EB6             >				if PLAYER_UNDO_SHIFT_RIGHT == PLAYER_UNDO_GO_LEFT
450+  8EB6 ~           >					inc			(ix+SPLAYER.x)
450+  8EB6 ~           >					jp			.idle
450+  8EB6             >				elseif state == PLAYER_UNDO_GO_RIGHT
450+  8EB6 ~           >					dec			(ix+SPLAYER.x)
450+  8EB6 ~           >					jp			.idle
450+  8EB6             >				elseif state == PLAYER_UNDO_GO_UP
450+  8EB6 ~           >					inc			(ix+SPLAYER.y)
450+  8EB6 ~           >					jp			.idle
450+  8EB6             >				elseif state == PLAYER_UNDO_GO_DOWN
450+  8EB6 ~           >					ld			c, (ix+SPLAYER.x)
450+  8EB6 ~           >					ld			b, (ix+SPLAYER.y)
450+  8EB6 ~           >					dec			b
450+  8EB6 ~           >					ld			(ix+SPLAYER.y), b
450+  8EB6 ~           >					ld			d, 8
450+  8EB6 ~           >					jp			DrawEmptyByte
450+  8EB6             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
450+  8EB6 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
450+  8EB9 DD 46 01    >					ld			b, (ix+SPLAYER.y)
450+  8EBC C5          >					push		bc
450+  8EBD 3E 4E       >					ld			a, SPHERE_ATTR
450+  8EBF 11 00 00    >					ld			de, 0
450+  8EC2 21 00 01    >					ld			hl, 0x100
450+  8EC5 CD 02 83    >					call		DrawSprite
450+  8EC8 C1          >					pop			bc
450+  8EC9             >				  if PLAYER_UNDO_SHIFT_RIGHT == PLAYER_UNDO_SHIFT_LEFT
450+  8EC9 ~           >					inc			c
450+  8EC9             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
450+  8EC9 0D          >					dec			c
450+  8ECA             >				  elseif state == PLAYER_UNDO_SHIFT_UP
450+  8ECA ~           >					inc			b
450+  8ECA             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
450+  8ECA ~           >					dec			b
450+  8ECA             >				  endif
450+  8ECA DD 71 00    >					ld			(ix+SPLAYER.x), c
450+  8ECD             >				  if PLAYER_UNDO_SHIFT_RIGHT == PLAYER_UNDO_SHIFT_LEFT
450+  8ECD ~           >					dec			c
450+  8ECD ~           >					dec			c
450+  8ECD             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
450+  8ECD 0C          >					inc			c
450+  8ECE 0C          >					inc			c
450+  8ECF             >				  elseif state == PLAYER_UNDO_SHIFT_UP
450+  8ECF ~           >					dec			b
450+  8ECF ~           >					dec			b
450+  8ECF             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
450+  8ECF ~           >					inc			b
450+  8ECF ~           >					inc			b
450+  8ECF             >				  endif
450+  8ECF CD 92 85    >					call		GetLevelAddr
450+  8ED2 36 20       >					ld			(hl), ' '
450+  8ED4             >				  if PLAYER_UNDO_SHIFT_RIGHT == PLAYER_UNDO_SHIFT_LEFT
450+  8ED4 ~           >					inc			hl
450+  8ED4             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
450+  8ED4 2B          >				  	dec			hl
450+  8ED5             >				  elseif state == PLAYER_UNDO_SHIFT_UP
450+  8ED5 ~           >				  	ld			de, 32
450+  8ED5 ~           >					add			hl, de
450+  8ED5             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
450+  8ED5 ~           >				  	ld			de, -32
450+  8ED5 ~           >					add			hl, de
450+  8ED5             >				  endif
450+  8ED5 36 4F       >					ld			(hl), 'O'
450+  8ED7 3E 4F       >					ld			a, FLOOR_ATTR
450+  8ED9 11 00 00    >					ld			de, 0
450+  8EDC 21 01 02    >					ld			hl, 0x201
450+  8EDF CD 02 83    >					call		DrawSprite
450+  8EE2 C3 85 8F    >					jp			.idle
450+  8EE5             >				endif
450+  8EE5             >
451+  8EE5              .undoShiftUp:		UNDOMOVE	PLAYER_UNDO_SHIFT_UP
451+  8EE5             >
451+  8EE5 DD 7E 03    >					ld			a, (ix+SPLAYER.time)
451+  8EE8 3D          >					dec			a
451+  8EE9 FE FF       >					cp			0xff
451+  8EEB 28 04       >					jr			z, .undoMoveDone
451+  8EED DD 77 03    >					ld			(ix+SPLAYER.time), a
451+  8EF0 C9          >					ret
451+  8EF1 DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
451+  8EF5 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
451+  8EF9             >				if PLAYER_UNDO_SHIFT_UP == PLAYER_UNDO_GO_LEFT
451+  8EF9 ~           >					inc			(ix+SPLAYER.x)
451+  8EF9 ~           >					jp			.idle
451+  8EF9             >				elseif state == PLAYER_UNDO_GO_RIGHT
451+  8EF9 ~           >					dec			(ix+SPLAYER.x)
451+  8EF9 ~           >					jp			.idle
451+  8EF9             >				elseif state == PLAYER_UNDO_GO_UP
451+  8EF9 ~           >					inc			(ix+SPLAYER.y)
451+  8EF9 ~           >					jp			.idle
451+  8EF9             >				elseif state == PLAYER_UNDO_GO_DOWN
451+  8EF9 ~           >					ld			c, (ix+SPLAYER.x)
451+  8EF9 ~           >					ld			b, (ix+SPLAYER.y)
451+  8EF9 ~           >					dec			b
451+  8EF9 ~           >					ld			(ix+SPLAYER.y), b
451+  8EF9 ~           >					ld			d, 8
451+  8EF9 ~           >					jp			DrawEmptyByte
451+  8EF9             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
451+  8EF9 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
451+  8EFC DD 46 01    >					ld			b, (ix+SPLAYER.y)
451+  8EFF C5          >					push		bc
451+  8F00 3E 4E       >					ld			a, SPHERE_ATTR
451+  8F02 11 00 00    >					ld			de, 0
451+  8F05 21 00 01    >					ld			hl, 0x100
451+  8F08 CD 02 83    >					call		DrawSprite
451+  8F0B C1          >					pop			bc
451+  8F0C             >				  if PLAYER_UNDO_SHIFT_UP == PLAYER_UNDO_SHIFT_LEFT
451+  8F0C ~           >					inc			c
451+  8F0C             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
451+  8F0C ~           >					dec			c
451+  8F0C             >				  elseif state == PLAYER_UNDO_SHIFT_UP
451+  8F0C 04          >					inc			b
451+  8F0D             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
451+  8F0D ~           >					dec			b
451+  8F0D             >				  endif
451+  8F0D DD 71 00    >					ld			(ix+SPLAYER.x), c
451+  8F10             >				  if PLAYER_UNDO_SHIFT_UP == PLAYER_UNDO_SHIFT_LEFT
451+  8F10 ~           >					dec			c
451+  8F10 ~           >					dec			c
451+  8F10             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
451+  8F10 ~           >					inc			c
451+  8F10 ~           >					inc			c
451+  8F10             >				  elseif state == PLAYER_UNDO_SHIFT_UP
451+  8F10 05          >					dec			b
451+  8F11 05          >					dec			b
451+  8F12             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
451+  8F12 ~           >					inc			b
451+  8F12 ~           >					inc			b
451+  8F12             >				  endif
451+  8F12 CD 92 85    >					call		GetLevelAddr
451+  8F15 36 20       >					ld			(hl), ' '
451+  8F17             >				  if PLAYER_UNDO_SHIFT_UP == PLAYER_UNDO_SHIFT_LEFT
451+  8F17 ~           >					inc			hl
451+  8F17             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
451+  8F17 ~           >				  	dec			hl
451+  8F17             >				  elseif state == PLAYER_UNDO_SHIFT_UP
451+  8F17 11 20 00    >				  	ld			de, 32
451+  8F1A 19          >					add			hl, de
451+  8F1B             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
451+  8F1B ~           >				  	ld			de, -32
451+  8F1B ~           >					add			hl, de
451+  8F1B             >				  endif
451+  8F1B 36 4F       >					ld			(hl), 'O'
451+  8F1D 3E 4F       >					ld			a, FLOOR_ATTR
451+  8F1F 11 00 00    >					ld			de, 0
451+  8F22 21 01 02    >					ld			hl, 0x201
451+  8F25 CD 02 83    >					call		DrawSprite
451+  8F28 C3 85 8F    >					jp			.idle
451+  8F2B             >				endif
451+  8F2B             >
452+  8F2B              .undoShiftDown:		UNDOMOVE	PLAYER_UNDO_SHIFT_DOWN
452+  8F2B             >
452+  8F2B DD 7E 03    >					ld			a, (ix+SPLAYER.time)
452+  8F2E 3D          >					dec			a
452+  8F2F FE FF       >					cp			0xff
452+  8F31 28 04       >					jr			z, .undoMoveDone
452+  8F33 DD 77 03    >					ld			(ix+SPLAYER.time), a
452+  8F36 C9          >					ret
452+  8F37 DD 36 02 00 >.undoMoveDone:		ld			(ix+SPLAYER.state), PLAYER_IDLE
452+  8F3B DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
452+  8F3F             >				if PLAYER_UNDO_SHIFT_DOWN == PLAYER_UNDO_GO_LEFT
452+  8F3F ~           >					inc			(ix+SPLAYER.x)
452+  8F3F ~           >					jp			.idle
452+  8F3F             >				elseif state == PLAYER_UNDO_GO_RIGHT
452+  8F3F ~           >					dec			(ix+SPLAYER.x)
452+  8F3F ~           >					jp			.idle
452+  8F3F             >				elseif state == PLAYER_UNDO_GO_UP
452+  8F3F ~           >					inc			(ix+SPLAYER.y)
452+  8F3F ~           >					jp			.idle
452+  8F3F             >				elseif state == PLAYER_UNDO_GO_DOWN
452+  8F3F ~           >					ld			c, (ix+SPLAYER.x)
452+  8F3F ~           >					ld			b, (ix+SPLAYER.y)
452+  8F3F ~           >					dec			b
452+  8F3F ~           >					ld			(ix+SPLAYER.y), b
452+  8F3F ~           >					ld			d, 8
452+  8F3F ~           >					jp			DrawEmptyByte
452+  8F3F             >				elseif state == PLAYER_UNDO_SHIFT_LEFT || state == PLAYER_UNDO_SHIFT_RIGHT || state == PLAYER_UNDO_SHIFT_UP || state == PLAYER_UNDO_SHIFT_DOWN
452+  8F3F DD 4E 00    >					ld			c, (ix+SPLAYER.x)
452+  8F42 DD 46 01    >					ld			b, (ix+SPLAYER.y)
452+  8F45 C5          >					push		bc
452+  8F46 3E 4E       >					ld			a, SPHERE_ATTR
452+  8F48 11 00 00    >					ld			de, 0
452+  8F4B 21 00 01    >					ld			hl, 0x100
452+  8F4E CD 02 83    >					call		DrawSprite
452+  8F51 C1          >					pop			bc
452+  8F52             >				  if PLAYER_UNDO_SHIFT_DOWN == PLAYER_UNDO_SHIFT_LEFT
452+  8F52 ~           >					inc			c
452+  8F52             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
452+  8F52 ~           >					dec			c
452+  8F52             >				  elseif state == PLAYER_UNDO_SHIFT_UP
452+  8F52 ~           >					inc			b
452+  8F52             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
452+  8F52 05          >					dec			b
452+  8F53             >				  endif
452+  8F53 DD 71 00    >					ld			(ix+SPLAYER.x), c
452+  8F56             >				  if PLAYER_UNDO_SHIFT_DOWN == PLAYER_UNDO_SHIFT_LEFT
452+  8F56 ~           >					dec			c
452+  8F56 ~           >					dec			c
452+  8F56             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
452+  8F56 ~           >					inc			c
452+  8F56 ~           >					inc			c
452+  8F56             >				  elseif state == PLAYER_UNDO_SHIFT_UP
452+  8F56 ~           >					dec			b
452+  8F56 ~           >					dec			b
452+  8F56             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
452+  8F56 04          >					inc			b
452+  8F57 04          >					inc			b
452+  8F58             >				  endif
452+  8F58 CD 92 85    >					call		GetLevelAddr
452+  8F5B 36 20       >					ld			(hl), ' '
452+  8F5D             >				  if PLAYER_UNDO_SHIFT_DOWN == PLAYER_UNDO_SHIFT_LEFT
452+  8F5D ~           >					inc			hl
452+  8F5D             >				  elseif state == PLAYER_UNDO_SHIFT_RIGHT
452+  8F5D ~           >				  	dec			hl
452+  8F5D             >				  elseif state == PLAYER_UNDO_SHIFT_UP
452+  8F5D ~           >				  	ld			de, 32
452+  8F5D ~           >					add			hl, de
452+  8F5D             >				  elseif state == PLAYER_UNDO_SHIFT_DOWN
452+  8F5D 11 E0 FF    >				  	ld			de, -32
452+  8F60 19          >					add			hl, de
452+  8F61             >				  endif
452+  8F61 36 4F       >					ld			(hl), 'O'
452+  8F63 3E 4F       >					ld			a, FLOOR_ATTR
452+  8F65 11 00 00    >					ld			de, 0
452+  8F68 21 01 02    >					ld			hl, 0x201
452+  8F6B CD 02 83    >					call		DrawSprite
452+  8F6E C3 85 8F    >					jp			.idle
452+  8F71             >				endif
452+  8F71             >
453+  8F71
454+  8F71 DD 7E 03     .move:				ld			a, (ix+SPLAYER.time)
455+  8F74 3C           					inc			a
456+  8F75 FE 10        					cp			(8<<PLAYER_MOVE_DELAY_BITS)
457+  8F77 28 04        					jr			z, .moveDone
458+  8F79 DD 77 03     					ld			(ix+SPLAYER.time), a
459+  8F7C C9           					ret
460+  8F7D DD 36 02 00  .moveDone:			ld			(ix+SPLAYER.state), PLAYER_IDLE
461+  8F81 DD 36 03 00  					ld			(ix+SPLAYER.time), 0
462+  8F85              					;jr			.idle
463+  8F85
464+  8F85 21 E0 84     .idle:				ld			hl, Input.undo
465+  8F88 AF           					xor			a
466+  8F89 BE           					cp			(hl)
467+  8F8A CA 48 8B     					jp			z, UndoLastMove
468+  8F8D
469+  8F8D 23           					inc			hl
470+  8F8E BE           					cp			(hl)
471+  8F8F 28 0E        					jr			z, .goLeft
472+  8F91
473+  8F91 23           					inc			hl
474+  8F92 BE           					cp			(hl)
475+  8F93 28 41        					jr			z, .goRight
476+  8F95
477+  8F95 23           					inc			hl
478+  8F96 BE           					cp			(hl)
479+  8F97 28 74        					jr			z, .goUp
480+  8F99
481+  8F99 23           					inc			hl
482+  8F9A BE           					cp			(hl)
483+  8F9B CA 47 90     					jp			z, .goDown
484+  8F9E
485+  8F9E C9           					ret
486+  8F9F
487+  8F9F              .goLeft:			PLAYERGO	PLAYER_GO_LEFT, PLAYER_SHIFT_LEFT
487+  8F9F             >
487+  8F9F DD 4E 00    >					ld			c, (ix+SPLAYER.x)
487+  8FA2 DD 46 01    >					ld			b, (ix+SPLAYER.y)
487+  8FA5             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
487+  8FA5 ~           >					dec			b
487+  8FA5             >				elseif state == PLAYER_GO_DOWN
487+  8FA5 ~           >					inc			b
487+  8FA5             >				elseif state == PLAYER_GO_LEFT
487+  8FA5 0D          >					dec			c
487+  8FA6             >				elseif state == PLAYER_GO_RIGHT
487+  8FA6 ~           >					inc			c
487+  8FA6             >				endif
487+  8FA6 CD 8B 85    >					call		CheckBlocked
487+  8FA9 20 13       >					jr			nz, .tryShift
487+  8FAB             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
487+  8FAB ~           >					ld			de, UndoPlayerMoveUp
487+  8FAB             >				elseif state == PLAYER_GO_DOWN
487+  8FAB ~           >					ld			de, UndoPlayerMoveDown
487+  8FAB             >				elseif state == PLAYER_GO_LEFT
487+  8FAB 11 2C 8B    >					ld			de, UndoPlayerMoveLeft
487+  8FAE             >				elseif state == PLAYER_GO_RIGHT
487+  8FAE ~           >					ld			de, UndoPlayerMoveRight
487+  8FAE             >				endif
487+  8FAE CD F6 8A    >					call		AddUndo
487+  8FB1 3E 03       >					ld			a, PLAYER_GO_LEFT
487+  8FB3             >.doGo:			if PLAYER_GO_LEFT == PLAYER_GO_DOWN || PLAYER_GO_LEFT == PLAYER_GO_UP
487+  8FB3 ~           >					ld			(ix+SPLAYER.y), b
487+  8FB3             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
487+  8FB3 DD 71 00    >					ld			(ix+SPLAYER.x), c
487+  8FB6             >				endif
487+  8FB6 DD 77 02    >					ld			(ix+SPLAYER.state), a
487+  8FB9 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
487+  8FBD C9          >					ret
487+  8FBE FE 4F       >.tryShift:			cp			'O'
487+  8FC0 C0          >					ret			nz
487+  8FC1             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
487+  8FC1 ~           >					dec			b
487+  8FC1             >				elseif state == PLAYER_GO_DOWN
487+  8FC1 ~           >					inc			b
487+  8FC1             >				elseif state == PLAYER_GO_LEFT
487+  8FC1 0D          >					dec			c
487+  8FC2             >				elseif state == PLAYER_GO_RIGHT
487+  8FC2 ~           >					inc			c
487+  8FC2             >				endif
487+  8FC2 CD 8B 85    >					call		CheckBlocked
487+  8FC5 C0          >					ret			nz
487+  8FC6 36 4F       >					ld			(hl), 'O'
487+  8FC8             >				if PLAYER_GO_LEFT == PLAYER_GO_UP
487+  8FC8 ~           >					inc			b
487+  8FC8 ~           >					ld			de, 32
487+  8FC8 ~           >					add			hl, de
487+  8FC8 ~           >					ld			de, UndoPlayerShiftUp
487+  8FC8             >				elseif state == PLAYER_GO_DOWN
487+  8FC8 ~           >					dec			b
487+  8FC8 ~           >					ld			de, -32
487+  8FC8 ~           >					add			hl, de
487+  8FC8 ~           >					ld			de, UndoPlayerShiftDown
487+  8FC8             >				elseif state == PLAYER_GO_LEFT
487+  8FC8 0C          >					inc			c
487+  8FC9 23          >					inc			hl
487+  8FCA 11 1C 8B    >					ld			de, UndoPlayerShiftLeft
487+  8FCD             >				elseif state == PLAYER_GO_RIGHT
487+  8FCD ~           >					dec			c
487+  8FCD ~           >					dec			hl
487+  8FCD ~           >					ld			de, UndoPlayerShiftRight
487+  8FCD             >				endif
487+  8FCD 36 20       >					ld			(hl), ' '
487+  8FCF CD F6 8A    >					call		AddUndo
487+  8FD2 3E 0F       >					ld			a, PLAYER_SHIFT_LEFT
487+  8FD4 18 DD       >					jr			.doGo
487+  8FD6             >
488+  8FD6              .goRight:			PLAYERGO	PLAYER_GO_RIGHT, PLAYER_SHIFT_RIGHT
488+  8FD6             >
488+  8FD6 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
488+  8FD9 DD 46 01    >					ld			b, (ix+SPLAYER.y)
488+  8FDC             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
488+  8FDC ~           >					dec			b
488+  8FDC             >				elseif state == PLAYER_GO_DOWN
488+  8FDC ~           >					inc			b
488+  8FDC             >				elseif state == PLAYER_GO_LEFT
488+  8FDC ~           >					dec			c
488+  8FDC             >				elseif state == PLAYER_GO_RIGHT
488+  8FDC 0C          >					inc			c
488+  8FDD             >				endif
488+  8FDD CD 8B 85    >					call		CheckBlocked
488+  8FE0 20 13       >					jr			nz, .tryShift
488+  8FE2             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
488+  8FE2 ~           >					ld			de, UndoPlayerMoveUp
488+  8FE2             >				elseif state == PLAYER_GO_DOWN
488+  8FE2 ~           >					ld			de, UndoPlayerMoveDown
488+  8FE2             >				elseif state == PLAYER_GO_LEFT
488+  8FE2 ~           >					ld			de, UndoPlayerMoveLeft
488+  8FE2             >				elseif state == PLAYER_GO_RIGHT
488+  8FE2 11 30 8B    >					ld			de, UndoPlayerMoveRight
488+  8FE5             >				endif
488+  8FE5 CD F6 8A    >					call		AddUndo
488+  8FE8 3E 06       >					ld			a, PLAYER_GO_RIGHT
488+  8FEA             >.doGo:			if PLAYER_GO_RIGHT == PLAYER_GO_DOWN || PLAYER_GO_RIGHT == PLAYER_GO_UP
488+  8FEA ~           >					ld			(ix+SPLAYER.y), b
488+  8FEA             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
488+  8FEA DD 71 00    >					ld			(ix+SPLAYER.x), c
488+  8FED             >				endif
488+  8FED DD 77 02    >					ld			(ix+SPLAYER.state), a
488+  8FF0 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
488+  8FF4 C9          >					ret
488+  8FF5 FE 4F       >.tryShift:			cp			'O'
488+  8FF7 C0          >					ret			nz
488+  8FF8             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
488+  8FF8 ~           >					dec			b
488+  8FF8             >				elseif state == PLAYER_GO_DOWN
488+  8FF8 ~           >					inc			b
488+  8FF8             >				elseif state == PLAYER_GO_LEFT
488+  8FF8 ~           >					dec			c
488+  8FF8             >				elseif state == PLAYER_GO_RIGHT
488+  8FF8 0C          >					inc			c
488+  8FF9             >				endif
488+  8FF9 CD 8B 85    >					call		CheckBlocked
488+  8FFC C0          >					ret			nz
488+  8FFD 36 4F       >					ld			(hl), 'O'
488+  8FFF             >				if PLAYER_GO_RIGHT == PLAYER_GO_UP
488+  8FFF ~           >					inc			b
488+  8FFF ~           >					ld			de, 32
488+  8FFF ~           >					add			hl, de
488+  8FFF ~           >					ld			de, UndoPlayerShiftUp
488+  8FFF             >				elseif state == PLAYER_GO_DOWN
488+  8FFF ~           >					dec			b
488+  8FFF ~           >					ld			de, -32
488+  8FFF ~           >					add			hl, de
488+  8FFF ~           >					ld			de, UndoPlayerShiftDown
488+  8FFF             >				elseif state == PLAYER_GO_LEFT
488+  8FFF ~           >					inc			c
488+  8FFF ~           >					inc			hl
488+  8FFF ~           >					ld			de, UndoPlayerShiftLeft
488+  8FFF             >				elseif state == PLAYER_GO_RIGHT
488+  8FFF 0D          >					dec			c
488+  9000 2B          >					dec			hl
488+  9001 11 20 8B    >					ld			de, UndoPlayerShiftRight
488+  9004             >				endif
488+  9004 36 20       >					ld			(hl), ' '
488+  9006 CD F6 8A    >					call		AddUndo
488+  9009 3E 12       >					ld			a, PLAYER_SHIFT_RIGHT
488+  900B 18 DD       >					jr			.doGo
488+  900D             >
489+  900D              .goUp:				PLAYERGO	PLAYER_GO_UP, PLAYER_SHIFT_UP
489+  900D             >
489+  900D DD 4E 00    >					ld			c, (ix+SPLAYER.x)
489+  9010 DD 46 01    >					ld			b, (ix+SPLAYER.y)
489+  9013             >				if PLAYER_GO_UP == PLAYER_GO_UP
489+  9013 05          >					dec			b
489+  9014             >				elseif state == PLAYER_GO_DOWN
489+  9014 ~           >					inc			b
489+  9014             >				elseif state == PLAYER_GO_LEFT
489+  9014 ~           >					dec			c
489+  9014             >				elseif state == PLAYER_GO_RIGHT
489+  9014 ~           >					inc			c
489+  9014             >				endif
489+  9014 CD 8B 85    >					call		CheckBlocked
489+  9017 20 13       >					jr			nz, .tryShift
489+  9019             >				if PLAYER_GO_UP == PLAYER_GO_UP
489+  9019 11 34 8B    >					ld			de, UndoPlayerMoveUp
489+  901C             >				elseif state == PLAYER_GO_DOWN
489+  901C ~           >					ld			de, UndoPlayerMoveDown
489+  901C             >				elseif state == PLAYER_GO_LEFT
489+  901C ~           >					ld			de, UndoPlayerMoveLeft
489+  901C             >				elseif state == PLAYER_GO_RIGHT
489+  901C ~           >					ld			de, UndoPlayerMoveRight
489+  901C             >				endif
489+  901C CD F6 8A    >					call		AddUndo
489+  901F 3E 09       >					ld			a, PLAYER_GO_UP
489+  9021             >.doGo:			if PLAYER_GO_UP == PLAYER_GO_DOWN || PLAYER_GO_UP == PLAYER_GO_UP
489+  9021 DD 70 01    >					ld			(ix+SPLAYER.y), b
489+  9024             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
489+  9024 ~           >					ld			(ix+SPLAYER.x), c
489+  9024             >				endif
489+  9024 DD 77 02    >					ld			(ix+SPLAYER.state), a
489+  9027 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
489+  902B C9          >					ret
489+  902C FE 4F       >.tryShift:			cp			'O'
489+  902E C0          >					ret			nz
489+  902F             >				if PLAYER_GO_UP == PLAYER_GO_UP
489+  902F 05          >					dec			b
489+  9030             >				elseif state == PLAYER_GO_DOWN
489+  9030 ~           >					inc			b
489+  9030             >				elseif state == PLAYER_GO_LEFT
489+  9030 ~           >					dec			c
489+  9030             >				elseif state == PLAYER_GO_RIGHT
489+  9030 ~           >					inc			c
489+  9030             >				endif
489+  9030 CD 8B 85    >					call		CheckBlocked
489+  9033 C0          >					ret			nz
489+  9034 36 4F       >					ld			(hl), 'O'
489+  9036             >				if PLAYER_GO_UP == PLAYER_GO_UP
489+  9036 04          >					inc			b
489+  9037 11 20 00    >					ld			de, 32
489+  903A 19          >					add			hl, de
489+  903B 11 24 8B    >					ld			de, UndoPlayerShiftUp
489+  903E             >				elseif state == PLAYER_GO_DOWN
489+  903E ~           >					dec			b
489+  903E ~           >					ld			de, -32
489+  903E ~           >					add			hl, de
489+  903E ~           >					ld			de, UndoPlayerShiftDown
489+  903E             >				elseif state == PLAYER_GO_LEFT
489+  903E ~           >					inc			c
489+  903E ~           >					inc			hl
489+  903E ~           >					ld			de, UndoPlayerShiftLeft
489+  903E             >				elseif state == PLAYER_GO_RIGHT
489+  903E ~           >					dec			c
489+  903E ~           >					dec			hl
489+  903E ~           >					ld			de, UndoPlayerShiftRight
489+  903E             >				endif
489+  903E 36 20       >					ld			(hl), ' '
489+  9040 CD F6 8A    >					call		AddUndo
489+  9043 3E 15       >					ld			a, PLAYER_SHIFT_UP
489+  9045 18 DA       >					jr			.doGo
489+  9047             >
490+  9047              .goDown:			PLAYERGO	PLAYER_GO_DOWN, PLAYER_SHIFT_DOWN
490+  9047             >
490+  9047 DD 4E 00    >					ld			c, (ix+SPLAYER.x)
490+  904A DD 46 01    >					ld			b, (ix+SPLAYER.y)
490+  904D             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
490+  904D ~           >					dec			b
490+  904D             >				elseif state == PLAYER_GO_DOWN
490+  904D 04          >					inc			b
490+  904E             >				elseif state == PLAYER_GO_LEFT
490+  904E ~           >					dec			c
490+  904E             >				elseif state == PLAYER_GO_RIGHT
490+  904E ~           >					inc			c
490+  904E             >				endif
490+  904E CD 8B 85    >					call		CheckBlocked
490+  9051 20 13       >					jr			nz, .tryShift
490+  9053             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
490+  9053 ~           >					ld			de, UndoPlayerMoveUp
490+  9053             >				elseif state == PLAYER_GO_DOWN
490+  9053 11 38 8B    >					ld			de, UndoPlayerMoveDown
490+  9056             >				elseif state == PLAYER_GO_LEFT
490+  9056 ~           >					ld			de, UndoPlayerMoveLeft
490+  9056             >				elseif state == PLAYER_GO_RIGHT
490+  9056 ~           >					ld			de, UndoPlayerMoveRight
490+  9056             >				endif
490+  9056 CD F6 8A    >					call		AddUndo
490+  9059 3E 0C       >					ld			a, PLAYER_GO_DOWN
490+  905B             >.doGo:			if PLAYER_GO_DOWN == PLAYER_GO_DOWN || PLAYER_GO_DOWN == PLAYER_GO_UP
490+  905B DD 70 01    >					ld			(ix+SPLAYER.y), b
490+  905E             >				elseif state == PLAYER_GO_LEFT || state == PLAYER_GO_RIGHT
490+  905E ~           >					ld			(ix+SPLAYER.x), c
490+  905E             >				endif
490+  905E DD 77 02    >					ld			(ix+SPLAYER.state), a
490+  9061 DD 36 03 00 >					ld			(ix+SPLAYER.time), 0
490+  9065 C9          >					ret
490+  9066 FE 4F       >.tryShift:			cp			'O'
490+  9068 C0          >					ret			nz
490+  9069             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
490+  9069 ~           >					dec			b
490+  9069             >				elseif state == PLAYER_GO_DOWN
490+  9069 04          >					inc			b
490+  906A             >				elseif state == PLAYER_GO_LEFT
490+  906A ~           >					dec			c
490+  906A             >				elseif state == PLAYER_GO_RIGHT
490+  906A ~           >					inc			c
490+  906A             >				endif
490+  906A CD 8B 85    >					call		CheckBlocked
490+  906D C0          >					ret			nz
490+  906E 36 4F       >					ld			(hl), 'O'
490+  9070             >				if PLAYER_GO_DOWN == PLAYER_GO_UP
490+  9070 ~           >					inc			b
490+  9070 ~           >					ld			de, 32
490+  9070 ~           >					add			hl, de
490+  9070 ~           >					ld			de, UndoPlayerShiftUp
490+  9070             >				elseif state == PLAYER_GO_DOWN
490+  9070 05          >					dec			b
490+  9071 11 E0 FF    >					ld			de, -32
490+  9074 19          >					add			hl, de
490+  9075 11 28 8B    >					ld			de, UndoPlayerShiftDown
490+  9078             >				elseif state == PLAYER_GO_LEFT
490+  9078 ~           >					inc			c
490+  9078 ~           >					inc			hl
490+  9078 ~           >					ld			de, UndoPlayerShiftLeft
490+  9078             >				elseif state == PLAYER_GO_RIGHT
490+  9078 ~           >					dec			c
490+  9078 ~           >					dec			hl
490+  9078 ~           >					ld			de, UndoPlayerShiftRight
490+  9078             >				endif
490+  9078 36 20       >					ld			(hl), ' '
490+  907A CD F6 8A    >					call		AddUndo
490+  907D 3E 18       >					ld			a, PLAYER_SHIFT_DOWN
490+  907F 18 DA       >					jr			.doGo
490+  9081             >
491+  9081
# file closed: player.asm
129   9081
130   9081 00 00 00...  					ds			0xa000-$
131   A000              					org			0xa000
132   A000
133   A000              gfx:				incbin		"gfx/gfx.scr"
134   BB00
135   BB00              					include		"bss.asm"
# file opened: bss.asm
  1+  BB00
  2+  BB00 00 00 00...  					ds			0xc000-$
  3+  C000              					org			0xc000
  4+  C000
  5+  C000              					; don't move, code expects alignment 256 for Targets
  6+  C000              					align		256
  7+  C000              MAX_TARGETS = 8
  8+  C000 00           NumTargets:			defs		1
  9+  C001 00           NumCorrectTargets:	defs		1
 10+  C002 00 00 00...  Targets:			defs		2 * MAX_TARGETS
 11+  C012
 12+  C012 00 00        UndoHead:			defs		2
 13+  C014 00 00        UndoTail:			defs		2
 14+  C016 00 00 00...  UndoBuffer:			defs		UNDO * MAX_UNDO
 15+  C056              UndoBufferEnd:
 16+  C056
 17+  C056 00 00 00...  Level:				defs		LEVEL_WIDTH * LEVEL_HEIGHT
 18+  C2D6              LevelEnd:
 19+  C2D6
 20+  C2D6 00           CurrentLevel:		defs		1
 21+  C2D7
# file closed: bss.asm
136   C2D7
137   C2D7              					savesna 	"game.sna", start
138   C2D7              					SLDOPT 		COMMENT WPMEM, LOGPOINT, ASSERTION
139   C2D7
# file closed: game.asm
